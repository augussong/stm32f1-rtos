L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.c"
N/*
N*********************************************************************************************************
N*                                         uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                                uC/Probe
N*
N*                                         Communication: Generic
N*
N* Filename      : probe_com.c
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) This file contains code to respond to generic (non protocol-dependent)
N*                     commands received by the target.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                             INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#define   PROBE_COM_MODULE
N#include  <probe_com.h>
L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 1
N/*
N*********************************************************************************************************
N*                                      uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                                uC/Probe
N*
N*                                         Communication: Generic
N*
N* Filename      : probe_com.h
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) This file contains code to respond to generic (non protocol-dependent)
N*                     commands received by the target.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                                 MODULE
N*
N* Note(s) : (1) This header file is protected from multiple pre-processor inclusion through use of the
N*               PROBE_COM present pre-processor macro definition.
N*********************************************************************************************************
N*/
N
N#ifndef  PROBE_COM_PRESENT                                      /* See Note #1.                                         */
N#define  PROBE_COM_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                PROBE COMMUNICATION MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The Probe communication module software version is denoted as follows :
N*
N*                       Vx.yy
N*
N*                           where
N*                                  V     denotes 'Version' label
N*                                  x     denotes major software version revision number
N*                                  yy    denotes minor software version revision number
N*
N*               (b) The Probe communication module software version label #define is formatted as follows :
N*
N*                       ver = x.yy * 100
N*
N*                           where
N*                                  ver   denotes software version number scaled as
N*                                        an integer value
N*                                  x.yy  denotes software version number
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_VERSION         200u                         /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef    PROBE_COM_MODULE
N#define   PROBE_COM_EXT
N#else
S#define   PROBE_COM_EXT  extern
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                             INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
L 1 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                            CPU PORT FILE
N*
N*                                            ARM-Cortex-M3
N*                                      RealView Development Suite
N*                            RealView Microcontroller Development Kit (MDK)
N*                                       ARM Developer Suite (ADS)
N*                                            Keil uVision
N*
N* Filename      : cpu.h
N* Version       : V1.19
N* Programmer(s) : JJL
N*                 BAN
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_MODULE_PRESENT
N#define  CPU_CFG_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                          CPU INCLUDE FILES
N*
N* Note(s) : (1) The following CPU files are located in the following directories :
N*
N*               (a) \<CPU-Compiler Directory>\cpu_def.h
N*
N*               (b) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<CPU-Compiler Directory>\' directory & the
N*               specific CPU-compiler directory as additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu_def.h>
L 1 "..\..\..\..\..\uC-CPU\cpu_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      CPU CONFIGURATION DEFINES
N*
N* Filename      : cpu_def.h
N* Version       : V1.19
N* Programmer(s) : ITJ
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE in 'cpu.h' with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*               (b) Ideally, CPU_WORD_SIZE #define's would be calculated at compile-time through use of
N*                   the sizeof() operator.  However, some compilers do NOT allow pre-processor directives
N*                   to include run-time macro's -- e.g. 'sizeof()'.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE in 'cpu.h' with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                        /* ----------------------- CPU WORD SIZE ---------------------- */
N#define  CPU_WORD_SIZE_08                          1    /*  8-bit word size = sizeof(CPU_INT08x).                       */
N#define  CPU_WORD_SIZE_16                          2    /* 16-bit word size = sizeof(CPU_INT16x).                       */
N#define  CPU_WORD_SIZE_32                          4    /* 32-bit word size = sizeof(CPU_INT32x).                       */
N#define  CPU_WORD_SIZE_64                          8    /* 64-bit word size = sizeof(CPU_INT64x) [see Note #1a].        */
N
N
N                                                        /* ------------------- CPU WORD-ENDIAN ORDER ------------------ */
N#define  CPU_ENDIAN_TYPE_NONE                      0    /*                                                              */
N#define  CPU_ENDIAN_TYPE_BIG                       1    /* Big-   endian word order (CPU words' most  significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N#define  CPU_ENDIAN_TYPE_LITTLE                    2    /* Little-endian word order (CPU words' least significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type in 'cpu.h' with the appropriate-sized CPU data type large enough to
N*               completely store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
N                                                        /* --------------- CPU CRITICAL SECTION METHODS --------------- */
N#define  CPU_CRITICAL_METHOD_NONE                  0    /*                                                              */
N#define  CPU_CRITICAL_METHOD_INT_DIS_EN            1    /* DIS/EN       ints.                                           */
N#define  CPU_CRITICAL_METHOD_STATUS_STK            2    /* Push/Pop     int status onto stk.                            */
N#define  CPU_CRITICAL_METHOD_STATUS_LOCAL          3    /* Save/Restore int status to local var.                        */
N
L 74 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 2
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STANDARD DATA TYPES
N*
N* Note(s) : (1) Configure standard data types according to CPU-/compiler-specifications.
N*
N*           (2) (a) (1) 'CPU_FNCT_VOID' data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has no arguments.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_VOID  FnctName;
N*
N*                           FnctName();
N*
N*               (b) (1) 'CPU_FNCT_PTR'  data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has a single void
N*                       pointer argument.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_PTR   FnctName;
N*                           void          *pobj
N*
N*                           FnctName(pobj);
N*********************************************************************************************************
N*/
N
Ntypedef            void       CPU_VOID;
Ntypedef  unsigned  char       CPU_CHAR;                         /*  8-bit character                                     */
Ntypedef  unsigned  char       CPU_BOOLEAN;                      /*  8-bit boolean or logical                            */
Ntypedef  unsigned  char       CPU_INT08U;                       /*  8-bit unsigned integer                              */
Ntypedef    signed  char       CPU_INT08S;                       /*  8-bit   signed integer                              */
Ntypedef  unsigned  short      CPU_INT16U;                       /* 16-bit unsigned integer                              */
Ntypedef    signed  short      CPU_INT16S;                       /* 16-bit   signed integer                              */
Ntypedef  unsigned  int        CPU_INT32U;                       /* 32-bit unsigned integer                              */
Ntypedef    signed  int        CPU_INT32S;                       /* 32-bit   signed integer                              */
Ntypedef  unsigned  long long  CPU_INT64U;                       /* 64-bit unsigned integer                              */
Ntypedef    signed  long long  CPU_INT64S;                       /* 64-bit   signed integer                              */
N
Ntypedef            float      CPU_FP32;                         /* 32-bit floating point                                */
Ntypedef            double     CPU_FP64;                         /* 64-bit floating point                                */
N
N
Ntypedef            void     (*CPU_FNCT_VOID)(void);             /* See Note #2a.                                        */
Ntypedef            void     (*CPU_FNCT_PTR )(void *);           /* See Note #2b.                                        */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                                /* Define  CPU         word sizes (see Note #1) :       */
N#define  CPU_CFG_ADDR_SIZE              CPU_WORD_SIZE_32        /* Defines CPU address word size.                       */
N
N#define  CPU_CFG_DATA_SIZE              CPU_WORD_SIZE_32        /* Defines CPU data    word size.                       */
N#define  CPU_CFG_ENDIAN_TYPE            CPU_ENDIAN_TYPE_LITTLE  /* Defines CPU data    word-memory order.               */
N
N
N/*
N*********************************************************************************************************
N*                                 CONFIGURE CPU ADDRESS & DATA TYPES
N*********************************************************************************************************
N*/
N
N                                                                /* CPU address type based on address bus size.          */
N#if     (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_ADDR;
N#elif   (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_ADDR;
S#else
Stypedef  CPU_INT08U  CPU_ADDR;
N#endif
N
N                                                                /* CPU data    type based on data    bus size.          */
N#if     (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_DATA;
N#elif   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_DATA;
S#else
Stypedef  CPU_INT08U  CPU_DATA;
N#endif
N
N
Ntypedef  CPU_DATA    CPU_ALIGN;                                 /* Defines CPU data-word-alignment size.                */
Ntypedef  CPU_DATA    CPU_SIZE_T;                                /* Defines CPU standard 'size_t'   size.                */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type with the appropriate-sized CPU data type large enough to completely
N*               store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  CPU_SR;                                    /* Defines   CPU status register size (see Note #3).    */
N
N                                                                /* Configure CPU critical method      (see Note #1) :   */
N#define  CPU_CFG_CRITICAL_METHOD        CPU_CRITICAL_METHOD_STATUS_LOCAL
N
N#define  CPU_CRITICAL_ENTER()           { cpu_sr = CPU_SR_Save(); }
N#define  CPU_CRITICAL_EXIT()            { CPU_SR_Restore(cpu_sr); }
N
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid        CPU_IntDis       (void);
Nvoid        CPU_IntEn        (void);
N
Nvoid        CPU_IntSrcDis    (CPU_INT08U  pos);
Nvoid        CPU_IntSrcEn     (CPU_INT08U  pos);
NCPU_INT16S  CPU_IntSrcPrioGet(CPU_INT08U  pos);
Nvoid        CPU_IntSrcPrioSet(CPU_INT08U  pos,
N                              CPU_INT08U  prio);
N
NCPU_SR      CPU_SR_Save      (void);
Nvoid        CPU_SR_Restore   (CPU_SR      cpu_sr);
N
NCPU_INT32U  CPU_CntLeadZeros (CPU_INT32U  val);
NCPU_INT32U  CPU_RevBits      (CPU_INT32U  val);
N
Nvoid        CPU_WaitForInt   (void);
Nvoid        CPU_WaitForExcept(void);
N
Nvoid        CPU_BitBandClr   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
Nvoid        CPU_BitBandSet   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
N
N/*
N*********************************************************************************************************
N*                                           INTERRUPT SOURCES
N*********************************************************************************************************
N*/
N
N#define  CPU_INT_STK_PTR                                   0
N#define  CPU_INT_RESET                                     1
N#define  CPU_INT_NMI                                       2
N#define  CPU_INT_HFAULT                                    3
N#define  CPU_INT_MEM                                       4
N#define  CPU_INT_BUSFAULT                                  5
N#define  CPU_INT_USAGEFAULT                                6
N#define  CPU_INT_RSVD_07                                   7
N#define  CPU_INT_RSVD_08                                   8
N#define  CPU_INT_RSVD_09                                   9
N#define  CPU_INT_RSVD_10                                  10
N#define  CPU_INT_SVCALL                                   11
N#define  CPU_INT_DBGMON                                   12
N#define  CPU_INT_RSVD_13                                  13
N#define  CPU_INT_PENDSV                                   14
N#define  CPU_INT_SYSTICK                                  15
N
N
N/*
N*********************************************************************************************************
N*                                             CPU REGISTERS
N*********************************************************************************************************
N*/
N
N#define  CPU_REG_NVIC_NVIC              (*((volatile CPU_INT32U *)(0xE000E004))) /* Int Ctrl'er Type Reg.               */
N#define  CPU_REG_NVIC_ST_CTRL           (*((volatile CPU_INT32U *)(0xE000E010))) /* SysTick Ctrl & Status Reg.          */
N#define  CPU_REG_NVIC_ST_RELOAD         (*((volatile CPU_INT32U *)(0xE000E014))) /* SysTick Reload      Value Reg.      */
N#define  CPU_REG_NVIC_ST_CURRENT        (*((volatile CPU_INT32U *)(0xE000E018))) /* SysTick Current     Value Reg.      */
N#define  CPU_REG_NVIC_ST_CAL            (*((volatile CPU_INT32U *)(0xE000E01C))) /* SysTick Calibration Value Reg.      */
N                                                                                 /* IRQ Set En Reg.                     */
N#define  CPU_REG_NVIC_SETEN(n)          (*((volatile CPU_INT32U *)(0xE000E100 + (n) * 4)))
N                                                                                 /* IRQ Clr En Reg.                     */
N#define  CPU_REG_NVIC_CLREN(n)          (*((volatile CPU_INT32U *)(0xE000E180 + (n) * 4)))
N                                                                                 /* IRQ Set Pending Reg.                */
N#define  CPU_REG_NVIC_SETPEND(n)        (*((volatile CPU_INT32U *)(0xE000E200 + (n) * 4)))
N                                                                                 /* IRQ Clr Pending Reg.                */
N#define  CPU_REG_NVIC_CLRPEND(n)        (*((volatile CPU_INT32U *)(0xE000E280 + (n) * 4)))
N                                                                                 /* IRQ Active Reg.                     */
N#define  CPU_REG_NVIC_ACTIVE(n)         (*((volatile CPU_INT32U *)(0xE000E300 + (n) * 4)))
N                                                                                 /* IRQ Prio Reg.                       */
N#define  CPU_REG_NVIC_PRIO(n)           (*((volatile CPU_INT32U *)(0xE000E400 + (n) * 4)))
N
N#define  CPU_REG_NVIC_CPUID             (*((volatile CPU_INT32U *)(0xE000ED00))) /* CPUID Base Reg.                     */
N#define  CPU_REG_NVIC_ICSR              (*((volatile CPU_INT32U *)(0xE000ED04))) /* Int Ctrl State  Reg.                */
N#define  CPU_REG_NVIC_VTOR              (*((volatile CPU_INT32U *)(0xE000ED08))) /* Vect Tbl Offset Reg.                */
N#define  CPU_REG_NVIC_AIRCR             (*((volatile CPU_INT32U *)(0xE000ED0C))) /* App Int/Reset Ctrl Reg.             */
N#define  CPU_REG_NVIC_SCR               (*((volatile CPU_INT32U *)(0xE000ED10))) /* System Ctrl Reg.                    */
N#define  CPU_REG_NVIC_CCR               (*((volatile CPU_INT32U *)(0xE000ED14))) /* Cfg    Ctrl Reg.                    */
N#define  CPU_REG_NVIC_SHPRI1            (*((volatile CPU_INT32U *)(0xE000ED18))) /* System Handlers  4 to  7 Prio.      */
N#define  CPU_REG_NVIC_SHPRI2            (*((volatile CPU_INT32U *)(0xE000ED1C))) /* System Handlers  8 to 11 Prio.      */
N#define  CPU_REG_NVIC_SHPRI3            (*((volatile CPU_INT32U *)(0xE000ED20))) /* System Handlers 12 to 15 Prio.      */
N#define  CPU_REG_NVIC_SHCSR             (*((volatile CPU_INT32U *)(0xE000ED24))) /* System Handler Ctrl & State Reg.    */
N#define  CPU_REG_NVIC_CFSR              (*((volatile CPU_INT32U *)(0xE000ED28))) /* Configurable Fault Status Reg.      */
N#define  CPU_REG_NVIC_HFSR              (*((volatile CPU_INT32U *)(0xE000ED2C))) /* Hard  Fault Status Reg.             */
N#define  CPU_REG_NVIC_DFSR              (*((volatile CPU_INT32U *)(0xE000ED30))) /* Debug Fault Status Reg.             */
N#define  CPU_REG_NVIC_MMFAR             (*((volatile CPU_INT32U *)(0xE000ED34))) /* Mem Manage Addr Reg.                */
N#define  CPU_REG_NVIC_BFAR              (*((volatile CPU_INT32U *)(0xE000ED38))) /* Bus Fault  Addr Reg.                */
N#define  CPU_REG_NVIC_AFSR              (*((volatile CPU_INT32U *)(0xE000ED3C))) /* Aux Fault Status Reg.               */
N
N#define  CPU_REG_NVIC_PFR0              (*((volatile CPU_INT32U *)(0xE000ED40))) /* Processor Feature Reg 0.            */
N#define  CPU_REG_NVIC_PFR1              (*((volatile CPU_INT32U *)(0xE000ED44))) /* Processor Feature Reg 1.            */
N#define  CPU_REG_NVIC_DFR0              (*((volatile CPU_INT32U *)(0xE000ED48))) /* Debug     Feature Reg 0.            */
N#define  CPU_REG_NVIC_AFR0              (*((volatile CPU_INT32U *)(0xE000ED4C))) /* Aux       Feature Reg 0.            */
N#define  CPU_REG_NVIC_MMFR0             (*((volatile CPU_INT32U *)(0xE000ED50))) /* Memory Model Feature Reg 0.         */
N#define  CPU_REG_NVIC_MMFR1             (*((volatile CPU_INT32U *)(0xE000ED54))) /* Memory Model Feature Reg 1.         */
N#define  CPU_REG_NVIC_MMFR2             (*((volatile CPU_INT32U *)(0xE000ED58))) /* Memory Model Feature Reg 2.         */
N#define  CPU_REG_NVIC_MMFR3             (*((volatile CPU_INT32U *)(0xE000ED5C))) /* Memory Model Feature Reg 3.         */
N#define  CPU_REG_NVIC_ISAFR0            (*((volatile CPU_INT32U *)(0xE000ED60))) /* ISA Feature Reg 0.                  */
N#define  CPU_REG_NVIC_ISAFR1            (*((volatile CPU_INT32U *)(0xE000ED64))) /* ISA Feature Reg 1.                  */
N#define  CPU_REG_NVIC_ISAFR2            (*((volatile CPU_INT32U *)(0xE000ED68))) /* ISA Feature Reg 2.                  */
N#define  CPU_REG_NVIC_ISAFR3            (*((volatile CPU_INT32U *)(0xE000ED6C))) /* ISA Feature Reg 3.                  */
N#define  CPU_REG_NVIC_ISAFR4            (*((volatile CPU_INT32U *)(0xE000ED70))) /* ISA Feature Reg 4.                  */
N#define  CPU_REG_NVIC_SW_TRIG           (*((volatile CPU_INT32U *)(0xE000EF00))) /* Software Trigger Int Reg.           */
N
N#define  CPU_REG_MPU_TYPE               (*((volatile CPU_INT32U *)(0xE000ED90))) /* MPU Type Reg.                       */
N#define  CPU_REG_MPU_CTRL               (*((volatile CPU_INT32U *)(0xE000ED94))) /* MPU Ctrl Reg.                       */
N#define  CPU_REG_MPU_REG_NBR            (*((volatile CPU_INT32U *)(0xE000ED98))) /* MPU Region Nbr Reg.                 */
N#define  CPU_REG_MPU_REG_BASE           (*((volatile CPU_INT32U *)(0xE000ED9C))) /* MPU Region Base Addr Reg.           */
N#define  CPU_REG_MPU_REG_ATTR           (*((volatile CPU_INT32U *)(0xE000EDA0))) /* MPU Region Attrib & Size Reg.       */
N
N#define  CPU_REG_DBG_CTRL               (*((volatile CPU_INT32U *)(0xE000EDF0))) /* Debug Halting Ctrl & Status Reg.    */
N#define  CPU_REG_DBG_SELECT             (*((volatile CPU_INT32U *)(0xE000EDF4))) /* Debug Core Reg Selector Reg.        */
N#define  CPU_REG_DBG_DATA               (*((volatile CPU_INT32U *)(0xE000EDF8))) /* Debug Core Reg Data     Reg.        */
N#define  CPU_REG_DBG_INT                (*((volatile CPU_INT32U *)(0xE000EDFC))) /* Debug Except & Monitor Ctrl Reg.    */
N
N/*
N*********************************************************************************************************
N*                                          CPU REGISTER BITS
N*********************************************************************************************************
N*/
N
N                                                                /* ---------- SYSTICK CTRL & STATUS REG BITS ---------- */
N#define  CPU_REG_NVIC_ST_CTRL_COUNTFLAG         DEF_BIT_16
N#define  CPU_REG_NVIC_ST_CTRL_CLKSOURCE         DEF_BIT_02
N#define  CPU_REG_NVIC_ST_CTRL_TICKINT           DEF_BIT_01
N#define  CPU_REG_NVIC_ST_CTRL_ENABLE            DEF_BIT_00
N
N
N                                                                /* -------- SYSTICK CALIBRATION VALUE REG BITS -------- */
N#define  CPU_REG_NVIC_ST_CAL_NOREF              DEF_BIT_31
N#define  CPU_REG_NVIC_ST_CAL_SKEW               DEF_BIT_30
N
N                                                                /* -------------- INT CTRL STATE REG BITS ------------- */
N#define  CPU_REG_NVIC_ICSR_NMIPENDSET           DEF_BIT_31
N#define  CPU_REG_NVIC_ICSR_PENDSVSET            DEF_BIT_28
N#define  CPU_REG_NVIC_ICSR_PENDSVCLR            DEF_BIT_27
N#define  CPU_REG_NVIC_ICSR_PENDSTSET            DEF_BIT_26
N#define  CPU_REG_NVIC_ICSR_PENDSTCLR            DEF_BIT_25
N#define  CPU_REG_NVIC_ICSR_ISRPREEMPT           DEF_BIT_23
N#define  CPU_REG_NVIC_ICSR_ISRPENDING           DEF_BIT_22
N#define  CPU_REG_NVIC_ICSR_RETTOBASE            DEF_BIT_11
N
N                                                                /* ------------- VECT TBL OFFSET REG BITS ------------- */
N#define  CPU_REG_NVIC_VTOR_TBLBASE              DEF_BIT_29
N
N                                                                /* ------------ APP INT/RESET CTRL REG BITS ----------- */
N#define  CPU_REG_NVIC_AIRCR_ENDIANNESS          DEF_BIT_15
N#define  CPU_REG_NVIC_AIRCR_SYSRESETREQ         DEF_BIT_02
N#define  CPU_REG_NVIC_AIRCR_VECTCLRACTIVE       DEF_BIT_01
N#define  CPU_REG_NVIC_AIRCR_VECTRESET           DEF_BIT_00
N
N                                                                /* --------------- SYSTEM CTRL REG BITS --------------- */
N#define  CPU_REG_NVIC_SCR_SEVONPEND             DEF_BIT_04
N#define  CPU_REG_NVIC_SCR_SLEEPDEEP             DEF_BIT_02
N#define  CPU_REG_NVIC_SCR_SLEEPONEXIT           DEF_BIT_01
N
N                                                                /* ----------------- CFG CTRL REG BITS ---------------- */
N#define  CPU_REG_NVIC_CCR_STKALIGN              DEF_BIT_09
N#define  CPU_REG_NVIC_CCR_BFHFNMIGN             DEF_BIT_08
N#define  CPU_REG_NVIC_CCR_DIV_0_TRP             DEF_BIT_04
N#define  CPU_REG_NVIC_CCR_UNALIGN_TRP           DEF_BIT_03
N#define  CPU_REG_NVIC_CCR_USERSETMPEND          DEF_BIT_01
N#define  CPU_REG_NVIC_CCR_NONBASETHRDENA        DEF_BIT_00
N
N                                                                /* ------- SYSTEM HANDLER CTRL & STATE REG BITS ------- */
N#define  CPU_REG_NVIC_SHCSR_USGFAULTENA         DEF_BIT_18
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTENA         DEF_BIT_17
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTENA         DEF_BIT_16
N#define  CPU_REG_NVIC_SHCSR_SVCALLPENDED        DEF_BIT_15
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTPENDED      DEF_BIT_14
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTPENDED      DEF_BIT_13
N#define  CPU_REG_NVIC_SHCSR_USGFAULTPENDED      DEF_BIT_12
N#define  CPU_REG_NVIC_SHCSR_SYSTICKACT          DEF_BIT_11
N#define  CPU_REG_NVIC_SHCSR_PENDSVACT           DEF_BIT_10
N#define  CPU_REG_NVIC_SHCSR_MONITORACT          DEF_BIT_08
N#define  CPU_REG_NVIC_SHCSR_SVCALLACT           DEF_BIT_07
N#define  CPU_REG_NVIC_SHCSR_USGFAULTACT         DEF_BIT_03
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTACT         DEF_BIT_01
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTACT         DEF_BIT_00
N
N                                                                /* -------- CONFIGURABLE FAULT STATUS REG BITS -------- */
N#define  CPU_REG_NVIC_CFSR_DIVBYZERO            DEF_BIT_25
N#define  CPU_REG_NVIC_CFSR_UNALIGNED            DEF_BIT_24
N#define  CPU_REG_NVIC_CFSR_NOCP                 DEF_BIT_19
N#define  CPU_REG_NVIC_CFSR_INVPC                DEF_BIT_18
N#define  CPU_REG_NVIC_CFSR_INVSTATE             DEF_BIT_17
N#define  CPU_REG_NVIC_CFSR_UNDEFINSTR           DEF_BIT_16
N#define  CPU_REG_NVIC_CFSR_BFARVALID            DEF_BIT_15
N#define  CPU_REG_NVIC_CFSR_STKERR               DEF_BIT_12
N#define  CPU_REG_NVIC_CFSR_UNSTKERR             DEF_BIT_11
N#define  CPU_REG_NVIC_CFSR_IMPRECISERR          DEF_BIT_10
N#define  CPU_REG_NVIC_CFSR_PRECISERR            DEF_BIT_09
N#define  CPU_REG_NVIC_CFSR_IBUSERR              DEF_BIT_08
N#define  CPU_REG_NVIC_CFSR_MMARVALID            DEF_BIT_07
N#define  CPU_REG_NVIC_CFSR_MSTKERR              DEF_BIT_04
N#define  CPU_REG_NVIC_CFSR_MUNSTKERR            DEF_BIT_03
N#define  CPU_REG_NVIC_CFSR_DACCVIOL             DEF_BIT_01
N#define  CPU_REG_NVIC_CFSR_IACCVIOL             DEF_BIT_00
N
N                                                                /* ------------ HARD FAULT STATUS REG BITS ------------ */
N#define  CPU_REG_NVIC_HFSR_DEBUGEVT             DEF_BIT_31
N#define  CPU_REG_NVIC_HFSR_FORCED               DEF_BIT_30
N#define  CPU_REG_NVIC_HFSR_VECTTBL              DEF_BIT_01
N
N                                                                /* ------------ DEBUG FAULT STATUS REG BITS ----------- */
N#define  CPU_REG_NVIC_DFSR_EXTERNAL             DEF_BIT_04
N#define  CPU_REG_NVIC_DFSR_VCATCH               DEF_BIT_03
N#define  CPU_REG_NVIC_DFSR_DWTTRAP              DEF_BIT_02
N#define  CPU_REG_NVIC_DFSR_BKPT                 DEF_BIT_01
N#define  CPU_REG_NVIC_DFSR_HALTED               DEF_BIT_00
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef   CPU_CFG_ADDR_SIZE
S#error   "CPU_CFG_ADDR_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_ADDR_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N#ifndef   CPU_CFG_DATA_SIZE
S#error   "CPU_CFG_DATA_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_DATA_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N
N#ifndef   CPU_CFG_ENDIAN_TYPE
S#error   "CPU_CFG_ENDIAN_TYPE            not #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
S
S#elif   ((CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_BIG   ) && \
S         (CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_LITTLE))
X#elif   ((2 != 1   ) &&          (2 != 2))
S#error   "CPU_CFG_ENDIAN_TYPE      illegally #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
N#endif
N
N
N
N
N#ifndef   CPU_CFG_CRITICAL_METHOD
S#error   "CPU_CFG_CRITICAL_METHOD        not #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
S
S#elif   ((CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_INT_DIS_EN  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_STK  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_LOCAL))
X#elif   ((3 != 1  ) &&          (3 != 2  ) &&          (3 != 3))
S#error   "CPU_CFG_CRITICAL_METHOD  illegally #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU cfg module inclusion.                     */
L 89 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#include  <lib_def.h>
L 1 "..\..\..\..\..\uC-LIB\lib_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     CORE CUSTOM LIBRARY MODULE
N*
N* Filename      : lib_def.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_DEF_MODULE_PRESENT
N#define  LIB_DEF_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                CUSTOM LIBRARY MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The custom library module software version is denoted as follows :
N*
N*                       Vx.yy
N*
N*                           where
N*                                   V               denotes 'Version' label
N*                                   x               denotes major software version revision number
N*                                   yy              denotes minor software version revision number
N*
N*               (b) The software version label #define is formatted as follows :
N*
N*                       ver = x.yy * 100
N*
N*                           where
N*                                   ver             denotes software version number scaled as an integer value
N*                                   x.yy            denotes software version number
N*********************************************************************************************************
N*/
N
N#define  LIB_VERSION                                     124u   /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as 
N*               additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          STANDARD DEFINES
N*********************************************************************************************************
N*/
N
N
N#define  DEF_DISABLED                                      0
N#define  DEF_ENABLED                                       1
N
N#define  DEF_FALSE                                         0
N#define  DEF_TRUE                                          1
N
N#define  DEF_NO                                            0
N#define  DEF_YES                                           1
N
N#define  DEF_OFF                                           0
N#define  DEF_ON                                            1
N
N#define  DEF_CLR                                           0
N#define  DEF_SET                                           1
N
N#define  DEF_ACTIVE                                        0
N#define  DEF_INACTIVE                                      1
N
N#define  DEF_FAIL                                          0
N#define  DEF_OK                                            1
N
N
N                                                                /* -------------------- BIT DEFINES ------------------- */
N#define  DEF_BIT_NONE                                   0x00
N
N#define  DEF_BIT_00                                     0x01
N#define  DEF_BIT_01                                     0x02
N#define  DEF_BIT_02                                     0x04
N#define  DEF_BIT_03                                     0x08
N#define  DEF_BIT_04                                     0x10
N#define  DEF_BIT_05                                     0x20
N#define  DEF_BIT_06                                     0x40
N#define  DEF_BIT_07                                     0x80
N
N#define  DEF_BIT_08                                   0x0100
N#define  DEF_BIT_09                                   0x0200
N#define  DEF_BIT_10                                   0x0400
N#define  DEF_BIT_11                                   0x0800
N#define  DEF_BIT_12                                   0x1000
N#define  DEF_BIT_13                                   0x2000
N#define  DEF_BIT_14                                   0x4000
N#define  DEF_BIT_15                                   0x8000
N
N#define  DEF_BIT_16                               0x00010000
N#define  DEF_BIT_17                               0x00020000
N#define  DEF_BIT_18                               0x00040000
N#define  DEF_BIT_19                               0x00080000
N#define  DEF_BIT_20                               0x00100000
N#define  DEF_BIT_21                               0x00200000
N#define  DEF_BIT_22                               0x00400000
N#define  DEF_BIT_23                               0x00800000
N
N#define  DEF_BIT_24                               0x01000000
N#define  DEF_BIT_25                               0x02000000
N#define  DEF_BIT_26                               0x04000000
N#define  DEF_BIT_27                               0x08000000
N#define  DEF_BIT_28                               0x10000000
N#define  DEF_BIT_29                               0x20000000
N#define  DEF_BIT_30                               0x40000000
N#define  DEF_BIT_31                               0x80000000
N
N                                                                /* ------------------- OCTET DEFINES ------------------ */
N#define  DEF_OCTET_NBR_BITS                                8
N#define  DEF_OCTET_MASK                                 0xFF
N
N#define  DEF_NIBBLE_NBR_BITS                               4
N#define  DEF_NIBBLE_MASK                                0x0F
N
N
N/*$PAGE*/
N                                                                /* ------------------ INTEGER DEFINES ----------------- */
N#define  DEF_INT_08_NBR_BITS                               8
N#define  DEF_INT_08_MASK                                0xFF
N                                                            
N#define  DEF_INT_08U_MIN_VAL                               0u
N#define  DEF_INT_08U_MAX_VAL                             255u
N
N#define  DEF_INT_08S_MIN_VAL                            -128
N#define  DEF_INT_08S_MAX_VAL                             127
N
N#define  DEF_INT_08S_MIN_VAL_ONES_CPL                   -127
N#define  DEF_INT_08S_MAX_VAL_ONES_CPL                    127
N
N
N#define  DEF_INT_16_NBR_BITS                              16
N#define  DEF_INT_16_MASK                              0xFFFF
N                                                            
N#define  DEF_INT_16U_MIN_VAL                               0u
N#define  DEF_INT_16U_MAX_VAL                           65535u
N
N#define  DEF_INT_16S_MIN_VAL                          -32768
N#define  DEF_INT_16S_MAX_VAL                           32767
N
N#define  DEF_INT_16S_MIN_VAL_ONES_CPL                 -32767
N#define  DEF_INT_16S_MAX_VAL_ONES_CPL                  32767
N
N
N#define  DEF_INT_32_NBR_BITS                              32
N#define  DEF_INT_32_MASK                          0xFFFFFFFF
N                                                            
N#define  DEF_INT_32U_MIN_VAL                               0u
N#define  DEF_INT_32U_MAX_VAL                      4294967295u
N
N#define  DEF_INT_32S_MIN_VAL                     -2147483648
N#define  DEF_INT_32S_MAX_VAL                      2147483647
N
N#define  DEF_INT_32S_MIN_VAL_ONES_CPL            -2147483647
N#define  DEF_INT_32S_MAX_VAL_ONES_CPL             2147483647
N
N
N#define  DEF_INT_64_NBR_BITS                              64
N#define  DEF_INT_64_MASK                  0xFFFFFFFFFFFFFFFF
N                                                            
N#define  DEF_INT_64U_MIN_VAL                               0u
N#define  DEF_INT_64U_MAX_VAL            18446744073709551615u
N
N#define  DEF_INT_64S_MIN_VAL            -9223372036854775808
N#define  DEF_INT_64S_MAX_VAL             9223372036854775807
N
N#define  DEF_INT_64S_MIN_VAL_ONES_CPL   -9223372036854775807
N#define  DEF_INT_64S_MAX_VAL_ONES_CPL    9223372036854775807
N
N
N/*$PAGE*/
N                                                                /* ---------------- CPU INTEGER DEFINES --------------- */
N#define  DEF_INT_CPU_NBR_BITS                           (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS)
N
N
N#if     (DEF_INT_CPU_NBR_BITS == DEF_INT_08_NBR_BITS)
X#if     ((4 * 8) == 8)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_08_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_08U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_08U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_08S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_08S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_08S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_08S_MAX_VAL_ONES_CPL
S
S
S#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_16_NBR_BITS)
X#elif   ((4 * 8) == 16)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_16_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_16U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_16U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_16S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_16S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_16S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_16S_MAX_VAL_ONES_CPL
S
S
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_32_NBR_BITS)
X#elif   ((4 * 8) == 32)
N
N#define  DEF_INT_CPU_MASK                                DEF_INT_32_MASK
N                                                    
N#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_32U_MIN_VAL
N#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_32U_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_32S_MIN_VAL
N#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_32S_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_32S_MIN_VAL_ONES_CPL
N#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_32S_MAX_VAL_ONES_CPL
N
N
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_64_NBR_BITS)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_64_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_64U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_64U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_64S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_64S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_64S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_64S_MAX_VAL_ONES_CPL
S                                                      
S
S#else
S
S#error  "CPU_CFG_DATA_SIZE  illegally #defined in 'cpu.h'      "
S#error  "                   [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N                                                                /* ------------------- TIME DEFINES ------------------- */
N#define  DEF_TIME_NBR_HR_PER_DAY                          24uL
N
N#define  DEF_TIME_NBR_MIN_PER_HR                          60uL
N#define  DEF_TIME_NBR_MIN_PER_DAY                       (DEF_TIME_NBR_MIN_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_SEC_PER_MIN                         60uL
N#define  DEF_TIME_NBR_SEC_PER_HR                        (DEF_TIME_NBR_SEC_PER_MIN * DEF_TIME_NBR_MIN_PER_HR)
N#define  DEF_TIME_NBR_SEC_PER_DAY                       (DEF_TIME_NBR_SEC_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_mS_PER_SEC                        1000uL
N#define  DEF_TIME_NBR_uS_PER_SEC                     1000000uL
N#define  DEF_TIME_NBR_nS_PER_SEC                  1000000000uL
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*
N* Note(s) : (1) All generic library error codes are #define'd in 'lib_def.h';
N*               Any module-specific error codes are #define'd in library module header files.
N*********************************************************************************************************
N*/
N
N#define  LIB_ERR_NONE                                      0
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U  LIB_ERR;
N
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             BIT MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_BIT()
N*
N* Description : Create bit mask with single, specified bit set.
N*
N* Argument(s) : bit         Bit number of bit to set.
N*
N* Return(s)   : Bit mask with single, specified bit set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT(bit)                            (1u << (bit))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_MASK()
N*
N* Description : Shift a bit mask.
N*
N* Argument(s) : bit_mask    Bit mask to shift.
N*
N*               bit_shift   Number of bit positions to left-shift bit mask.
N*
N* Return(s)   : Shifted bit mask.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_shift' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_MASK(bit_mask, bit_shift)             ((bit_mask)       << (bit_shift))
N
N
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_FIELD()
N*
N* Description : Create & shift a contiguous bit field.
N*
N* Argument(s) : bit_field   Number of contiguous bits to set in the bit field.
N*
N*               bit_shift   Number of bit positions   to left-shift bit field.
N*
N* Return(s)   : Shifted bit field.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_field'/'bit_shift' values that overflow the target CPU &/or compiler environment 
N*                   (e.g. negative or greater-than-CPU-data-size values) MAY generate compiler warnings
N*                   &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)   \
N                                                                                             : (DEF_BIT(bit_field) - 1)) \
N                                                                                                    << (bit_shift))
X#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)                                                                                                : (DEF_BIT(bit_field) - 1))                                                                                                     << (bit_shift))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_SET()
N*
N* Description : Set specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by setting specified bit(s).
N*
N*               mask        Mask of bits to set.
N*
N* Return(s)   : Modified value with specified bit(s) set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_SET(val, mask)                       { (val) |=  (mask); }
N
N
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_CLR()
N*
N* Description : Clear specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by clearing specified bit(s).
N*
N*               mask        Mask of bits to clear.
N*
N* Return(s)   : Modified value with specified bit(s) clear.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_CLR(val, mask)                       { (val) &= ~(mask); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_SET()
N*
N* Description : Determine if specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET(val, mask)                   ((((val) & (mask)) == (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_CLR()
N*
N* Description : Determine if specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR(val, mask)                    (((val) & (mask))            ? (DEF_NO ) : (DEF_YES))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_SET_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET_ANY(val, mask)                (((val) & (mask))            ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_CLR_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR_ANY(val, mask)               ((((val) & (mask)) != (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            MATH MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_MIN()
N*
N* Description : Determine the minimum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Minimum of the two values.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MIN(a, b)                                  (((a) < (b)) ? (a) : (b))
N
N
N/*
N*********************************************************************************************************
N*                                              DEF_MAX()
N*
N* Description : Determine the maximum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Maximum of the two values.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MAX(a, b)                                  (((a) > (b)) ? (a) : (b))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              DEF_ABS()
N*
N* Description : Determine the absolute value of a value.
N*
N* Argument(s) : a           Value to calculate absolute value.
N*
N* Return(s)   : Absolute value of the value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_ABS(a)                                     (((a) < 0) ? (-(a)) : (a))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib def module include.                       */
N
L 91 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N#include  <lib_mem.h>
L 1 "..\..\..\..\..\uC-LIB\lib_mem.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     STANDARD MEMORY OPERATIONS
N*
N* Filename      : lib_mem.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_MODULE_PRESENT
N#define  LIB_MEM_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as
N*               additional include path directories.
N*
N*           (3) NO compiler-supplied standard library functions SHOULD be used.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N#include  <lib_def.h>
N#include  <app_cfg.h>
L 1 ".\app_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                              EXAMPLE CODE
N*
N*                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      APPLICATION CONFIGURATION
N*
N*                                     ST Microelectronics STM32
N*                                              with the
N*                                   STM3210B-EVAL Evaluation Board
N*
N* Filename      : app_cfg.h
N* Version       : V1.10
N* Programmer(s) : BAN
N*********************************************************************************************************
N*/
N
N#ifndef  __APP_CFG_H__
N#define  __APP_CFG_H__
N
N/*
N*********************************************************************************************************
N*                                       MODULE ENABLE / DISABLE
N*********************************************************************************************************
N*/
N
N#define  APP_OS_PROBE_EN                         DEF_ENABLED
N#define  APP_PROBE_COM_EN                        DEF_ENABLED
N
N/*
N*********************************************************************************************************
N*                                              TASKS NAMES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            TASK PRIORITIES
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_PRIO                               3
N#define  APP_TASK_KBD_PRIO                                 12
N
N#define  APP_TASK_USER_IF_PRIO                            13
N
N#define  OS_PROBE_TASK_PRIO              (OS_LOWEST_PRIO - 3)
N#define  OS_TASK_TMR_PRIO                (OS_LOWEST_PRIO - 2)
N
N/*
N*********************************************************************************************************
N*                                            TASK STACK SIZES
N*                             Size of the task stacks (# of OS_STK entries)
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_STK_SIZE                         128
N#define  APP_TASK_KBD_STK_SIZE                           128
N
N#define  APP_TASK_USER_IF_STK_SIZE                       256
N
N#define  OS_PROBE_TASK_STK_SIZE                          128
N
N/*
N*********************************************************************************************************
N*                                                  LIB
N*********************************************************************************************************
N*/
N
N#define  uC_CFG_OPTIMIZE_ASM_EN                 DEF_ENABLED
N#define  LIB_STR_CFG_FP_EN                      DEF_DISABLED
N
N/*
N*********************************************************************************************************
N*                                                 PROBE
N*********************************************************************************************************
N*/
N
N#define  OS_PROBE_TASK                                     1    /* Task will be created for uC/Probe OS Plug-In.        */
N#define  OS_PROBE_TMR_32_BITS                              0    /* uC/Probe OS Plugin timer is a 16-bit timer.          */
N#define  OS_PROBE_TIMER_SEL                                2    /* Select timer 2.                                      */
N#define  OS_PROBE_HOOKS_EN                                 1    /* Hooks to update OS_TCB profiling members included.   */
N#define  OS_PROBE_USE_FP                                   1
N
N
N
N
N#endif
L 91 "..\..\..\..\..\uC-LIB\lib_mem.h" 2
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef   LIB_MEM_MODULE
S#define  LIB_MEM_EXT
N#else
N#define  LIB_MEM_EXT  extern
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEFAULT CONFIGURATION
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                             MEMORY LIBRARY ARGUMENT CHECK CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_ARG_CHK_EXT_EN to enable/disable the memory libray suite external
N*               argument check feature :
N*
N*               (a) When ENABLED,      arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*
N*               (b) When DISABLED, NO  arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*********************************************************************************************************
N*/
N                                                        /* Configure external argument check feature (see Note #1) :    */
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
N#define  LIB_MEM_CFG_ARG_CHK_EXT_EN     DEF_DISABLED
N                                                        /*   DEF_DISABLED     Argument check DISABLED                   */
N                                                        /*   DEF_ENABLED      Argument check ENABLED                    */
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_POOL_EN to enable/disable memory pool functions.
N*********************************************************************************************************
N*/
N                                                        /* Configure memory pool feature (see Note #1) :                */
N#ifndef  LIB_MEM_CFG_POOL_EN
N#define  LIB_MEM_CFG_POOL_EN            DEF_DISABLED
N                                                        /*   DEF_DISABLED     Memory pool(s) DISABLED                   */
N                                                        /*   DEF_ENABLED      Memory pool(s) ENABLED                    */
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                               DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      LIBRARY MEMORY ERROR CODES
N*********************************************************************************************************
N*/
N
N#define  LIB_MEM_ERR_NONE                              10000
N#define  LIB_MEM_ERR_NULL_PTR                          10001    /* Ptr arg(s) passed NULL ptr(s).                       */
N#define  LIB_MEM_ERR_NONE_AVAIL                        10010    /* NO avail mem rsrc's.                                 */
N
N#define  LIB_MEM_ERR_INVALID_SEG_SIZE                  10100    /* Invalid mem seg size.                                */
N#define  LIB_MEM_ERR_INVALID_SEG_OVERLAP               10101    /* Invalid mem seg overlaps other mem seg(s).           */
N#define  LIB_MEM_ERR_INVALID_POOL                      10102    /* Invalid mem pool.                                    */
N#define  LIB_MEM_ERR_INVALID_ADDR                      10103    /* Invalid mem pool addr.                               */
N#define  LIB_MEM_ERR_INVALID_BLK_NBR                   10104    /* Invalid mem pool blk nbr.                            */
N#define  LIB_MEM_ERR_INVALID_BLK_SIZE                  10105    /* Invalid mem pool blk size.                           */
N#define  LIB_MEM_ERR_INVALID_BLK_IX                    10106    /* Invalid mem pool ix.                                 */
N
N#define  LIB_MEM_ERR_SEG_EMPTY                         10110    /* Mem seg  empty; i.e. NO avail mem for mem pools.     */
N#define  LIB_MEM_ERR_POOL_FULL                         10111    /* Mem pool full;  i.e. All mem blks avail in mem pool. */
N
N#define  LIB_MEM_ERR_HEAP_NOT_FOUND                    10115    /* Heap seg NOT found.                                  */
N#define  LIB_MEM_ERR_HEAP_EMPTY                        10116    /* Heap seg empty; i.e. NO avail mem in heap.           */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     MEMORY LIBRARY TYPE DEFINES
N*
N* Note(s) : (1) LIB_MEM_TYPE_??? #define values specifically chosen as ASCII representations of the memory
N*               library types.  Memory displays of memory library objects will display the library TYPEs
N*               with their chosen ASCII names.
N**********************************************************************************************************/
N
N                                                                /* ------------------- LIB_MEM TYPES ------------------ */
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#else
N
N#if     (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_32)
X#if     (4   == 4)
N#define  LIB_MEM_TYPE_NONE                        0x454E4F4E    /* "NONE" in ASCII.                                     */
N#define  LIB_MEM_TYPE_HEAP                        0x50414548    /* "HEAP" in ASCII.                                     */
N#define  LIB_MEM_TYPE_POOL                        0x4C4F4F50    /* "POOL" in ASCII.                                     */
N
N#elif   (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_16)
S#define  LIB_MEM_TYPE_NONE                        0x4F4E454E    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x45485041    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x4F504C4F    /* "POOL" in ASCII.                                     */
S
S#else                                                           /* Dflt CPU_WORD_SIZE_08.                               */
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#endif
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            LIB MEM TYPE
N*
N* Note(s) : (1) 'LIB_MEM_TYPE' declared as 'CPU_INT32U' & all 'LIB_MEM_TYPE's #define'd with large, non-trivial
N*               values to trap & discard invalid/corrupted library memory objects based on 'LIB_MEM_TYPE'.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  LIB_MEM_TYPE;
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL TABLE IX TYPE
N*
N* Note(s) : (1) MEM_POOL_IX_NONE  SHOULD be #define'd based on 'MEM_POOL_IX' data type declared.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U   MEM_POOL_IX;
N
N#define  MEM_POOL_IX_NONE                DEF_INT_16U_MAX_VAL    /* Define as max unsigned val (see Note #1).            */
N#define  MEM_POOL_IX_MIN                                   1
N#define  MEM_POOL_IX_MAX               (MEM_POOL_IX_NONE - 1)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        MEMORY POOL DATA TYPES
N*
N*                                                                      MEMORY SEGMENT
N*                                                                     ----------------
N*                                            MEMORY POOL'S            |              | <----
N*                                             POINTERS TO             |    MEMORY    |     |
N*                    MEM_POOL                MEMORY BLOCKS            |    BLOCKS    |     |
N*               |----------------|            |---------|             |   --------   |     |
N*               |        O------------------> |    O--------------------> |      |   |     |
N*               |----------------|            |---------|             |   |      |   |     |
N*               | Pool Addr Ptrs |            |    O-------------     |   --------   |     |
N*               | Pool Size      |            |---------|       |     |              |     |
N*               |----------------|            |         |       |     |   --------   |     |
N*               |    Blk Size    |            |         |       --------> |      |   |     |
N*               |    Blk Nbr     |            |         |             |   |      |   |     |
N*               |    Blk Ix      |            |    .    |             |   --------   |     |
N*               |----------------|            |    .    |             |              |     |
N*               |----------------|            |    .    |             |      .       |     |
N*               |        O-----------------   |         |             |      .       |     |
N*               |----------------|        |   |         |             |      .       |     |
N*               |        O------------    |   |         |             |              |     |
N*               |----------------|   |    |   |---------|             |   --------   |     |
N*               |  Seg Size Tot  |   |    |   |    O--------------------> |      |   |     |
N*               |  Seg Size Rem  |   |    |   |---------|             |   |      |   |     |
N*               |----------------|   |    |   |         |             |   --------   |     |
N*               | Seg List Ptrs  |   |    |   |---------|             |              |     |
N*               |----------------|   |    |                           | ------------ |     |
N*                                    |    |                           |              | <--------
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           ----------------     |   |
N*                                    |    |                                                |   |
N*                                    |    --------------------------------------------------   |
N*                                    |                                                         |
N*                                    -----------------------------------------------------------
N*
N*********************************************************************************************************
N*/
N
Ntypedef  struct  mem_pool  MEM_POOL;
N
N                                                                /* --------------------- MEM POOL --------------------- */
Nstruct  mem_pool {
N    LIB_MEM_TYPE    Type;                                       /* Pool type : LIB_TYPE_POOL or LIB_TYPE_HEAP.          */
N
N    MEM_POOL       *SegPrevPtr;                                 /* Ptr to PREV mem seg.                                 */
N    MEM_POOL       *SegNextPtr;                                 /* Ptr to NEXT mem seg.                                 */
N    MEM_POOL       *PoolPrevPtr;                                /* Ptr to PREV mem pool.                                */
N    MEM_POOL       *PoolNextPtr;                                /* Ptr to NEXT mem pool.                                */
N
N    void           *PoolAddrStart;                              /* Ptr   to start of mem seg for mem pool blks.         */
N    void           *PoolAddrEnd;                                /* Ptr   to end   of mem seg for mem pool blks.         */
N    void          **PoolPtrs;                                   /* Ptr   to mem pool's array of blk ptrs.               */
N    MEM_POOL_IX     BlkIx;                                      /* Ix  into mem pool's array of blk ptrs.               */
N    CPU_SIZE_T      PoolSize;                                   /* Size  of mem pool        (in octets).                */
N    CPU_SIZE_T      BlkNbr;                                     /* Nbr   of mem pool   blks.                            */
N    CPU_SIZE_T      BlkSize;                                    /* Size  of mem pool   blks (in octets).                */
N    CPU_SIZE_T      BlkAlign;                                   /* Align of mem pool   blks (in octets).                */
N
N                                                                /* --------------------- MEM SEG ---------------------- */
N    void           *SegAddr;                                    /* Ptr      to mem seg's base/start addr.               */
N    void           *SegAddrNextAvail;                           /* Ptr      to mem seg's next avail addr.               */
N    CPU_SIZE_T      SegSizeTot;                                 /* Tot size of mem seg (in octets).                     */
N    CPU_SIZE_T      SegSizeRem;                                 /* Rem size of mem seg (in octets).                     */
N};
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      MEMORY DATA VALUE MACRO'S
N*
N* Note(s) : (1) (a) Some variables & variable buffers to pass & receive data values MUST start on appropriate
N*                   CPU word-aligned addresses.  This is required because most word-aligned processors are more
N*                   efficient & may even REQUIRE that multi-octet words start on CPU word-aligned addresses.
N*
N*                   (1) For 16-bit word-aligned processors, this means that
N*
N*                           all 16- & 32-bit words MUST start on addresses that are multiples of 2 octets
N*
N*                   (2) For 32-bit word-aligned processors, this means that
N*
N*                           all 16-bit       words MUST start on addresses that are multiples of 2 octets
N*                           all 32-bit       words MUST start on addresses that are multiples of 4 octets
N*
N*               (b) However, some data values macro's appropriately access data values from any CPU addresses,
N*                   word-aligned or not.  Thus for processors that require data word alignment, data words can
N*                   be accessed to/from any CPU address, word-aligned or not, without generating data-word-
N*                   alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_GET_xxx()
N*
N* Description : Decode data values from any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address of data value to decode (see Notes #2 & #3a).
N*
N* Return(s)   : Decoded data value from CPU memory address (see Notes #1 & #3b).
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Decode data values based on the values' data-word order in CPU memory :
N*
N*                       MEM_VAL_GET_xxx_BIG()           Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx_LITTLE()        Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx()               Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_GET_xxx() macro's decode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be decoded from any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, any variable to receive the returned data value MUST start on an appropriate CPU
N*                       word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_GET_INT08U_BIG(addr)             (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
N
N
N
N#define  MEM_VAL_GET_INT08U_LITTLE(addr)          (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_BIG(addr)
S#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_BIG(addr)
S#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_BIG(addr)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_LITTLE(addr)
N#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_LITTLE(addr)
N#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_LITTLE(addr)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_SET_xxx()
N*
N* Description : Encode data values to any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address to encode data value (see Notes #2 & #3a).
N*
N*               val         Data value to encode (see Notes #1 & #3b).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Encode data values into CPU memory based on the values' data-word order :
N*
N*                       MEM_VAL_SET_xxx_BIG()           Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx_LITTLE()        Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx()               Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_SET_xxx() macro's encode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be encoded to any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, 'val' data value to encode MUST start on an appropriate CPU word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_SET_INT08U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#define  MEM_VAL_SET_INT08U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_BIG(addr, val)
S#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_BIG(addr, val)
S#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_BIG(addr, val)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_LITTLE(addr, val)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_GET_xxx()
N*
N* Description : Copy & decode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/decode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/decode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/decode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_GET_xxx_BIG()      Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx_LITTLE()   Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx()          Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_GET_xxx() macro's copy/decode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   decoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_GET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets are
N*                   inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #5'.
N*
N*               (6) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S
S#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
S
S
S
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N
N#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N
N
N#else                                                                           /* See Note #6.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_SET_xxx()
N*
N* Description : Copy & encode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/encode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/encode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/encode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_SET_xxx_BIG()      Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx_LITTLE()   Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx()          Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_SET_xxx() macro's copy/encode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   encoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_SET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets
N*                   are inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #5'.
N*********************************************************************************************************
N*/
N
N                                                                                /* See Note #5.                         */
N#define  MEM_VAL_COPY_SET_INT08U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
N
N#define  MEM_VAL_COPY_SET_INT08U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N#define  MEM_VAL_COPY_SET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         MEM_VAL_COPY_xxx()
N*
N* Description : Copy data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) MEM_VAL_COPY_xxx() macro's copy data values based on CPU's native data-word order.
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_xxx() macro's copy data values without regard to CPU word-aligned addresses.
N*                   Thus for processors that require data word alignment, data words can be copied to/from any
N*                   CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_COPY_08(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid          Mem_Init       (void);
N
N                                                                        /* -------------- MEM API  FNCTS -------------- */
Nvoid          Mem_Clr        (void        *pmem,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Set        (void        *pmem,
N                              CPU_INT08U   data_val,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Copy       (void        *pdest,
N                              void        *psrc,
N                              CPU_SIZE_T   size);
N
NCPU_BOOLEAN   Mem_Cmp        (void        *p1_mem,
N                              void        *p2_mem,
N                              CPU_SIZE_T   size);
N
N
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)                                /* -------------- MEM POOL FNCTS -------------- */
X#if (0 == 1)                                 
S
Svoid          Mem_PoolCreate (MEM_POOL    *pmem_pool,
S                              void        *pmem_base_addr,
S                              CPU_SIZE_T   mem_size,
S                              CPU_SIZE_T   blk_nbr,
S                              CPU_SIZE_T   blk_size,
S                              CPU_SIZE_T   blk_align,
S                              CPU_SIZE_T  *poctets_reqd,
S                              LIB_ERR     *perr);
S
Svoid         *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
S                              CPU_SIZE_T   size,
S                              LIB_ERR     *perr);
S
Svoid          Mem_PoolBlkFree(MEM_POOL    *pmem_pool,
S                              void        *pmem_blk,
S                              LIB_ERR     *perr);
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN        not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN  illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
N#endif
N
N
N
N#ifndef  LIB_MEM_CFG_POOL_EN
S#error  "LIB_MEM_CFG_POOL_EN               not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_POOL_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_POOL_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_POOL_EN         illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S
S#elif   (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#elif   (0 == 1)
S
S#ifndef  LIB_MEM_CFG_HEAP_SIZE
S#error  "LIB_MEM_CFG_HEAP_SIZE             not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S
S#elif   (LIB_MEM_CFG_HEAP_SIZE < 1)
S
S#error  "LIB_MEM_CFG_HEAP_SIZE       illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S#endif
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib mem module include.                       */
N
L 92 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#include  <probe_com_cfg.h>
L 1 ".\probe_com_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                      uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                              uC/Probe
N*
N*                                     Communication: Configuration
N*
N* Filename      : probe_com_cfg.h
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) This file contains configuration constants for uC/Probe Communication Modules.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                       CHOOSE COMMUNICATION METHOD
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_METHOD_RS232                    DEF_TRUE
N#define  PROBE_COM_METHOD_TCPIP                    DEF_FALSE
N#define  PROBE_COM_METHOD_USB                      DEF_FALSE
N
N/*
N*********************************************************************************************************
N*                               CONFIGURE GENERAL COMMUNICATION PARAMETERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_RX_MAX_SIZE                           128
N#define  PROBE_COM_TX_MAX_SIZE                           128
N
N#define  PROBE_COM_SUPPORT_WR                      DEF_FALSE
N#define  PROBE_COM_SUPPORT_STR                     DEF_FALSE
N
N                                                                /* If strings are supported ...                         */
N#define  PROBE_COM_STR_BUF_SIZE                          128    /*   (a) Set size of string buffer.                     */
N
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STATISTICS AND COUNTERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_STAT_EN                         DEF_ENABLED
N
N/*
N*********************************************************************************************************
N*                                  CONFIGURE RS-232 SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the RS-232 communication method ...              */
N
N#define  PROBE_RS232_PARSE_TASK                    DEF_TRUE     /*  (a) Set whether a task will handle parsing.         */
N
N                                                                /*  (b) If a task will handle parsing ...               */
N#define  PROBE_RS232_TASK_PRIO                             8    /*       (i) Set task priority.                         */
N#define  PROBE_RS232_TASK_STK_SIZE                       256    /*      (ii) Set task stack size.                       */
N
N#define  PROBE_RS232_RX_BUF_SIZE       PROBE_COM_RX_MAX_SIZE    /*  (c) Set Rx buffer size.                             */
N#define  PROBE_RS232_TX_BUF_SIZE       PROBE_COM_TX_MAX_SIZE    /*  (d) Set Tx buffer size.                             */
N
N#define  PROBE_RS232_UART_0                                1
N#define  PROBE_RS232_UART_1                                2
N#define  PROBE_RS232_UART_2                                3
N#define  PROBE_RS232_UART_3                                4
N#define  PROBE_RS232_UART_4                                5
N#define  PROBE_RS232_UART_5                                6
N#define  PROBE_RS232_UART_6                                7
N#define  PROBE_RS232_UART_7                                8
N#define  PROBE_RS232_UART_8                                9
N#define  PROBE_RS232_UART_9                               10
N#define  PROBE_RS232_UART_DBG                             63
N#define  PROBE_RS232_COMM_SEL             PROBE_RS232_UART_1    /*  (e) Configure UART selection.                       */
N
N/*
N*********************************************************************************************************
N*                                  CONFIGURE TCP-IP SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the TCP-IP communication method ...              */
N
N#define  PROBE_TCPIP_PORT                               9930    /*  (a) Set listening port of the UDP server.           */
N
N#define  PROBE_TCPIP_RX_BUF_SIZE       PROBE_COM_RX_MAX_SIZE    /*  (b) Set Rx buffer size.                             */
N#define  PROBE_TCPIP_TX_BUF_SIZE       PROBE_COM_TX_MAX_SIZE    /*  (c) Set Tx buffer size.                             */
N
N#define  PROBE_TCPIP_TASK_PRIO                             9    /*  (d) Set task priority.                              */
N#define  PROBE_TCPIP_TASK_STK_SIZE                       256    /*  (e) Set task stack size.                            */
N
N/*
N*********************************************************************************************************
N*                                    CONFIGURE USB SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the USB communication method ...                 */
N
N#define  PROBE_USB_RX_BUF_SIZE         PROBE_COM_RX_MAX_SIZE    /*  (a) Set Rx buffer size.                             */
N#define  PROBE_USB_TX_BUF_SIZE         PROBE_COM_TX_MAX_SIZE    /*  (b) Set Tx buffer size.                             */
N
N#define  PROBE_USB_TASK_PRIO                              10    /*  (c) Set task priority.                              */
N#define  PROBE_USB_TASK_STK_SIZE                         256    /*  (d) Set task stack size.                            */
N
N#define  PROBE_USB_INIT_STACK                      DEF_TRUE     /*  (e) The USB comm module will init stack.            */
N
N/*
N*********************************************************************************************************
N*                              CONFIGURE HARDWARE SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_RS232_UART_1_REMAP                DEF_FALSE
N#define  PROBE_RS232_UART_2_REMAP                DEF_TRUE
N#define  PROBE_RS232_UART_3_REMAP_PARTIAL        DEF_FALSE
N#define  PROBE_RS232_UART_3_REMAP_FULL           DEF_FALSE
L 94 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#if (PROBE_COM_SUPPORT_STR == DEF_ENABLED)
X#if (0 == 1)
S#include  <lib_str.h>
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                                 DEFINES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               DATA TYPES
N*********************************************************************************************************
N*/
N
Ntypedef  void  (*PROBE_COM_INFO_HDNLR_FNCT) (CPU_INT16U   info,
N                                             CPU_INT32U   data);
N
Ntypedef  void  (*PROBE_COM_STR_HDNLR_FNCT)  (CPU_CHAR    *pstr,
N                                             CPU_INT16U   len);
N
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N                                                                /* ------------------- COUNTERS ----------------------- */
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxPktCtr;                   /* Number of packets received                           */
X  CPU_INT32U  ProbeCom_RxPktCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxPktCtr;                   /* Number of packets tranmitted                         */
X  CPU_INT32U  ProbeCom_TxPktCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxSymCtr;                   /* Number of symbols transmitted                        */
X  CPU_INT32U  ProbeCom_TxSymCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxSymByteCtr;               /* Number of symbol bytes transmitted                   */
X  CPU_INT32U  ProbeCom_TxSymByteCtr;                
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_ErrPktCtr;                  /* Number of error packets transmitted                  */
X  CPU_INT32U  ProbeCom_ErrPktCtr;                   
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxStrCtr;                   /* Number of string characters transmitted              */
N#endif
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxSymCtr;                   /* Number of symbols received.                          */
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxSymByteCtr;               /* Number of symbol bytes received.                     */
N#endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                               MACRO'S
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid         ProbeCom_Init        (void);                                   /* Init comm module.                        */
N
NCPU_INT16U   ProbeCom_ParseRxPkt  (void                       *prx_pkt,     /* Parse rx'd pkt & fmt resp.               */
N                                   void                       *ptx_pkt,
N                                   CPU_INT16U                  rx_pkt_size,
N                                   CPU_INT16U                  tx_buf_size);
N
Nvoid         ProbeCom_InfoHndlrSet(PROBE_COM_INFO_HDNLR_FNCT   hndlr);      /* Set hndlr for info pkt's.                */
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
SCPU_BOOLEAN  ProbeCom_TxStr       (CPU_CHAR                   *pstr,        /* Tx str.                                  */
S                                   CPU_INT16U                  dly);
S
Svoid         ProbeCom_StrHndlrSet (PROBE_COM_STR_HDNLR_FNCT    hndlr);      /* Set hdnlr for str wr pkt's.              */
N#endif
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*                                    DEFINED IN OS's probe_com_os.c
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Svoid         ProbeCom_OS_Init    (void);
SCPU_BOOLEAN  ProbeCom_OS_Pend    (CPU_BOOLEAN                 wait);
Svoid         ProbeCom_OS_Post    (void);
Svoid         ProbeCom_OS_Dly     (CPU_INT16U                  dly);
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef    PROBE_COM_SUPPORT_WR
S  #error  "PROBE_COM_SUPPORT_WR               not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Write commands     supported]     "
S  #error  "                             [     ||  DEF_FALSE  Write commands NOT supported]     "
S
S#elif    ((PROBE_COM_SUPPORT_WR != DEF_TRUE ) && \
S          (PROBE_COM_SUPPORT_WR != DEF_FALSE))
X#elif    ((0 != 1 ) &&           (0 != 0))
S  #error  "PROBE_COM_SUPPORT_WR         illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Write commands     supported]     "
S  #error  "                             [     ||  DEF_FALSE  Write commands NOT supported]     "
N#endif
N
N
N
N#ifndef    PROBE_COM_SUPPORT_STR
S  #error  "PROBE_COM_SUPPORT_STR              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                       [MUST be  DEF_TRUE   String commands/functions     supported]"
S  #error  "                       [     ||  DEF_FALSE  String commands/functions NOT supported]"
S
S#elif    ((PROBE_COM_SUPPORT_STR != DEF_TRUE ) && \
S          (PROBE_COM_SUPPORT_STR != DEF_FALSE))
X#elif    ((0 != 1 ) &&           (0 != 0))
S  #error  "PROBE_COM_SUPPORT_STR                      illegally #define'd in 'probe_com_cfg.h' "
S  #error  "                       [MUST be  DEF_TRUE   String commands/functions     supported]"
S  #error  "                       [     ||  DEF_FALSE  String commands/functions NOT supported]"
S
S#elif     (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#elif     (0 == 1)
S#ifndef    PROBE_COM_STR_BUF_SIZE
S  #error  "PROBE_COM_STR_BUF_SIZE             not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_STR_BUF_SIZE > 65535) || \
S          (PROBE_COM_STR_BUF_SIZE < 32   ))
X#elif    ((PROBE_COM_STR_BUF_SIZE > 65535) ||           (PROBE_COM_STR_BUF_SIZE < 32   ))
S  #error  "PROBE_COM_STR_BUF_SIZE       illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S#endif
N#endif
N
N
N#ifndef    PROBE_COM_STAT_EN
S  #error  "PROBE_COM_STAT_EN                  not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Counters are     maintained]      "
S  #error  "                             [     ||  DEF_FALSE  Counters are NOT maintained]      "
S
S#elif    ((PROBE_COM_STAT_EN != DEF_TRUE ) && \
S          (PROBE_COM_STAT_EN != DEF_FALSE))
X#elif    ((1 != 1 ) &&           (1 != 0))
S  #error  "PROBE_COM_STAT_EN            illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Counters are     maintained]      "
S  #error  "                             [     ||  DEF_FALSE  Counters are NOT maintained]      "
N#endif
N
N
N
N#ifndef    PROBE_COM_RX_MAX_SIZE
S  #error  "PROBE_COM_RX_BUF_SIZE              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_RX_MAX_SIZE > 65535) || \
S          (PROBE_COM_RX_MAX_SIZE < 32   ))
X#elif    ((128 > 65535) ||           (128 < 32   ))
S  #error  "PROBE_COM_RX_MAX_SIZE        illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
N#endif
N
N
N
N
N#ifndef    PROBE_COM_TX_MAX_SIZE
S  #error  "PROBE_COM_TX_BUF_SIZE              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_TX_MAX_SIZE > 65535) || \
S          (PROBE_COM_TX_MAX_SIZE < 32   ))
X#elif    ((128 > 65535) ||           (128 < 32   ))
S  #error  "PROBE_COM_TX_MAX_SIZE        illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
N#endif
N
N
N
N/*
N*********************************************************************************************************
N*                                              MODULE END
N*
N* Note(s) : See 'MODULE  Note #1'.
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of PROBE_COM module include (see Note #1).       */
L 37 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.c" 2
N
N
N/*
N*********************************************************************************************************
N*                                            LOCAL DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                             DATA FORMATS
N*
N* Note(s):  (1) The first word in all TX data segments is identical:
N*
N*               (A)  A 2-byte format;
N*               (B)  A 1-byte status;
N*               (C)  A 1-byte modifier, currently unused.
N*
N*
N*           (2) The first two bytes in all RX data segments is identical:
N*               (A)  A 2-byte format;
N*
N*           (3) The following data formats are currently defined:
N*
N*               (A)  PROBE_COM_FMT_?X_QUERY.  The RX request queries the target about a particular setup
N*                    parameter or capability.
N*
N*               (B)  PROBE_COM_FMT_?X_SIMPLE_RD.  The RX request instructs the target to send data read
N*                    from its memory, for a certain {memory address, data length} pair (which is given in
N*                    the request).
N*
N*               (C)  PROBE_COM_FMT_?X_SIMPLE_WR.  The RX request instructs the target to write certain
N*                    data into its memory, for a certain {memory address, data length, data} triplet
N*                    (which is given in the request).
N*
N*               (D)  PROBE_COM_FMT_?X_MULTIPLE_RD.  The RX request instructs the target to send data read
N*                    from its memory, for a certain set of {memory address, data length} pairs (which are
N*                    given in the request).
N*
N*               (E)  PROBE_COM_FMT_?X_STR_RD.  The RX request instructs the target to return a string
N*                    that the user has stored in the target's string buffer.
N**********************************************************************************************************
N*/
N
N#define  PROBE_COM_FMT_TX_ERROR                       0x8000
N
N#define  PROBE_COM_FMT_RX_QUERY                       0x0001
N#define  PROBE_COM_FMT_TX_QUERY                       0x8001
N
N#define  PROBE_COM_FMT_RX_SIMPLE_RD                   0x0002
N#define  PROBE_COM_FMT_TX_SIMPLE_RD                   0x8002
N
N#define  PROBE_COM_FMT_RX_SIMPLE_WR                   0x0003
N#define  PROBE_COM_FMT_TX_SIMPLE_WR                   0x8003
N
N#define  PROBE_COM_FMT_RX_INFO                        0x0004
N#define  PROBE_COM_FMT_TX_INFO                        0x8004
N
N#define  PROBE_COM_FMT_RX_MULTIPLE_RD                 0x0007
N#define  PROBE_COM_FMT_TX_MULTIPLE_RD                 0x8007
N
N#define  PROBE_COM_FMT_TX_MULTIPLE_RD_LO                0x07
N#define  PROBE_COM_FMT_TX_MULTIPLE_RD_HI                0x80
N
N#define  PROBE_COM_FMT_RX_MULTIPLE_WR                 0x0008
N#define  PROBE_COM_FMT_TX_MULTIPLE_WR                 0x8008
N
N#define  PROBE_COM_FMT_RX_STR_RD                      0x0009
N#define  PROBE_COM_FMT_TX_STR_RD                      0x8009
N
N#define  PROBE_COM_FMT_RX_STR_WR                      0x000A
N#define  PROBE_COM_FMT_TX_STR_WR                      0x800A
N
N/*
N*********************************************************************************************************
N*                                             STATUS CONSTANTS
N*
N* Note(s):  (1) The following status constants are currently defined:
N*
N*               (A)  PROBE_COM_STATUS_OK.  The target was able to respond to the command.
N*
N*               (B)  PROBE_COM_STATUS_STR_NONE.  A PROBE_COM_FMT_RX_STR_GET packet is received, but the
N*                    target has no string to send.
N*
N*               (C)  PROBE_COM_STATUS_UNKNOWN_REQUEST.  A request packet with an unknown type was
N*                    received.
N*
N*               (D)  PROBE_COM_STATUS_QUERY_NOT_SUPPORTED.  A PROBE_COM_FMT_RX_QUERY packet is received,
N*                    but the query is not supported.
N*
N*               (E)  PROBE_COM_STATUS_TX_PKT_TOO_LARGE.  The response to the request would be too large
N*                    to fit into the target.
N*
N*               (F)  PROBE_COM_STATUS_RX_PKT_WRONG_SIZE.  The request packet is not the expected size.
N*
N*               (G)  PROBE_COM_STATUS_FAIL.  Another error occurred.
N**********************************************************************************************************
N*/
N
N#define  PROBE_COM_STATUS_OK                            0x01
N#define  PROBE_COM_STATUS_TELEMETRY_NONE                0xF7
N#define  PROBE_COM_STATUS_STR_NONE                      0xF8
N#define  PROBE_COM_STATUS_UNKNOWN_REQUEST               0xF9
N#define  PROBE_COM_STATUS_QUERY_NOT_SUPPORTED           0xFC
N#define  PROBE_COM_STATUS_TX_PKT_TOO_LARGE              0xFD
N#define  PROBE_COM_STATUS_RX_PKT_WRONG_SIZE             0xFE
N#define  PROBE_COM_STATUS_FAIL                          0xFF
N
N/*
N*********************************************************************************************************
N*                                                QUERIES
N*
N* Note(s):  (1) The following queries are currently defined:
N*
N*               (A)  PROBE_COM_QUERY_MAX_RX_SIZE.  The target responds with the data size of the largest
N*                    packet it can receive.
N*
N*               (B)  PROBE_COM_QUERY_MAX_TX_SIZE.  The target responds with the data size of the largest
N*                    packet it can send.
N*
N*               (C)  PROBE_COM_ENDIANNESS_TEST.  The target responds with a 4-byte data value.  On
N*                    little-endian CPUs, this will be received as 0x12345678; on big-endian CPUs, this
N*                    will be received as 0x87654321.
N*
N*               (D)  PROBE_COM_QUERY_FMT_SUPPORT.  The target responds with a list of the formats the
N*                    target can respond to.
N*
N*               (E)  PROBE_COM_QUERY_VERSION.  The target responds with the communication module version.
N**********************************************************************************************************
N*/
N
N                                                                /* ------------------- CONFIGURATION ------------------ */
N#define  PROBE_COM_QUERY_MAX_RX_SIZE                  0x0101
N#define  PROBE_COM_QUERY_MAX_TX_SIZE                  0x0102
N
N                                                                /* ----------------- TARGET PROPERTIES ---------------- */
N#define  PROBE_COM_QUERY_ENDIANNESS_TEST              0x0201
N
N                                                                /* ------------- COMMUNICATION CAPABILITIES ----------- */
N#define  PROBE_COM_QUERY_FMT_SUPPORT                  0x1001
N#define  PROBE_COM_QUERY_VERSION                      0x1002
N
N/*
N*********************************************************************************************************
N*                                            INFO PACKET TYPES
N*
N* Note(s):  (1) The following info packet types are currently defined:
N*
N*               (A)  PROBE_COM_INFO_PKT_SIZE.  Probe supplies the size of the next packet.
N**********************************************************************************************************
N*/
N
N#define  PROBE_COM_INFO_PKT_SIZE                      0x0001
N
N/*
N*********************************************************************************************************
N*                                               MODIFIERS
N*
N* Note(s):  (1) The following modifiers are currently defined:
N*
N*               (A)  PROBE_COM_MODIFIER_NONE.  This is the generic modifier.
N*
N*               (B)  PROBE_COM_MODIFIER_STR_HAVE.  The target indicates that it has a string to transmit.
N**********************************************************************************************************
N*/
N
N#define  PROBE_COM_MODIFIER_NONE                        0x00
N#define  PROBE_COM_MODIFIER_STR_HAVE                    0x01
N
N/*
N*********************************************************************************************************
N*                                               HEADER SIZES
N*
N* Note(s):  (1) Every RX packet has a 2-byte "header".
N*
N*           (2) Every TX packet has a 4-byte "header".
N**********************************************************************************************************
N*/
N
N#define  PROBE_COM_SIZE_RX_HDR                             2
N#define  PROBE_COM_SIZE_TX_HDR                             4
N
N/*
N*********************************************************************************************************
N*                                           LOCAL CONSTANTS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                          LOCAL DATA TYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            LOCAL TABLES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                       LOCAL GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U                 ProbeCom_StrBufWrIx;
Sstatic  CPU_INT16U                 ProbeCom_StrBufRdIx;
Sstatic  CPU_CHAR                   ProbeCom_StrBuf[PROBE_COM_STR_BUF_SIZE];
Sstatic  PROBE_COM_STR_HDNLR_FNCT   ProbeCom_StrHndlr;
N#endif
N
Nstatic  CPU_INT32U                 ProbeCom_EndiannessTest;
N
Nstatic  PROBE_COM_INFO_HDNLR_FNCT  ProbeCom_InfoHndlr;
N
N
N/*
N*********************************************************************************************************
N*                                      LOCAL FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT08U   ProbeCom_PktModifier  (void);
N
Nstatic  CPU_INT16U   ProbeCom_CmdErr       (CPU_INT08U   *ptx_buf,
N                                            CPU_INT08U    pcomm_err);
N
Nstatic  CPU_INT16U   ProbeCom_CmdQuery     (CPU_INT08U   *prx_buf,
N                                            CPU_INT08U   *ptx_buf,
N                                            CPU_INT16U    rx_pkt_size,
N                                            CPU_INT16U    tx_buf_size);
N
Nstatic  CPU_INT16U   ProbeCom_CmdInfo      (CPU_INT08U   *prx_buf,
N                                            CPU_INT08U   *ptx_buf,
N                                            CPU_INT16U    rx_pkt_size,
N                                            CPU_INT16U    tx_buf_size);
N
Nstatic  CPU_INT16U   ProbeCom_CmdSimpleRd  (CPU_INT08U   *prx_buf,
N                                            CPU_INT08U   *ptx_buf,
N                                            CPU_INT16U    rx_pkt_size,
N                                            CPU_INT16U    tx_buf_size);
N
Nstatic  CPU_INT16U   ProbeCom_CmdMultipleRd(CPU_INT08U   *prx_buf,
N                                            CPU_INT08U   *ptx_buf,
N                                            CPU_INT16U    rx_pkt_size,
N                                            CPU_INT16U    tx_buf_size);
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U   ProbeCom_CmdSimpleWr  (CPU_INT08U   *prx_buf,
S                                            CPU_INT08U   *ptx_buf,
S                                            CPU_INT16U    rx_pkt_size,
S                                            CPU_INT16U    tx_buf_size);
S
Sstatic  CPU_INT16U   ProbeCom_CmdMultipleWr(CPU_INT08U   *prx_buf,
S                                            CPU_INT08U   *ptx_buf,
S                                            CPU_INT16U    rx_pkt_size,
S                                            CPU_INT16U    tx_buf_size);
N#endif
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U   ProbeCom_CmdStrRd     (CPU_INT08U   *prx_buf,
S                                            CPU_INT08U   *ptx_buf,
S                                            CPU_INT16U    rx_pkt_size,
S                                            CPU_INT16U    tx_buf_size);
S
Sstatic  CPU_INT16U   ProbeCom_CmdStrWr     (CPU_INT08U   *prx_buf,
S                                            CPU_INT08U   *ptx_buf,
S                                            CPU_INT16U    rx_pkt_size,
S                                            CPU_INT16U    tx_buf_size);
N#endif
N
N
N                                                                /* ------------------- RD FROM RX PKT ----------------- */
Nstatic  CPU_INT08U   ProbeCom_GetINT8U     (CPU_INT08U  **pbuf);
N
Nstatic  CPU_INT16U   ProbeCom_GetINT16U    (CPU_INT08U  **pbuf);
N
Nstatic  CPU_INT32U   ProbeCom_GetINT32U    (CPU_INT08U  **pbuf);
N
N                                                                /* -------------------- WR TO TX BUF ----------------- */
Nstatic  void         ProbeCom_StoINT8U     (CPU_INT08U  **pbuf,
N                                            CPU_INT08U    data);
N
Nstatic  void         ProbeCom_StoINT16U    (CPU_INT08U  **pbuf,
N                                            CPU_INT16U    data);
N
N#if 0
Sstatic  void         ProbeCom_StoINT32U    (CPU_INT08U  **pbuf,
S                                            CPU_INT32U    data);
N#endif
N
N                                                                /* -------------- DETERMINE PKT MODIFIER -------------- */
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_BOOLEAN  ProbeCom_StrRdy       (void);
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                     LOCAL CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N*                                           GLOBAL FUNCTIONS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_Init()
N*
N* Description : Initialize the module.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  ProbeCom_Init (void)
N{
N#if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
X#if (0  == 1)
S    ProbeCom_StrBufWrIx     = 0;
S    ProbeCom_StrBufRdIx     = 0;
S
S    ProbeCom_OS_Init();
N#endif
N
N#if (PROBE_COM_STAT_EN      == DEF_ENABLED)
X#if (1      == 1)
N    ProbeCom_RxPktCtr       = 0;
N    ProbeCom_TxPktCtr       = 0;
N    ProbeCom_TxSymCtr       = 0;
N    ProbeCom_TxSymByteCtr   = 0;
N    ProbeCom_ErrPktCtr      = 0;
N
N#if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
X#if (0  == 1)
S    ProbeCom_TxStrCtr       = 0;
N#endif
N
N#if (PROBE_COM_SUPPORT_WR   == DEF_TRUE)
X#if (0   == 1)
S    ProbeCom_RxSymCtr       = 0;
S    ProbeCom_RxSymByteCtr   = 0;
N#endif
N#endif
N
N    ProbeCom_EndiannessTest = 0x12345678L;
N
N    ProbeCom_InfoHndlr      = (PROBE_COM_INFO_HDNLR_FNCT)0;
N#if (PROBE_COM_SUPPORT_STR  == DEF_TRUE)
X#if (0  == 1)
S    ProbeCom_StrHndlr       = (PROBE_COM_STR_HDNLR_FNCT )0;
N#endif
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_ParseRxPkt()
N*
N* Description : Parse a packet & formulate a response.
N*
N* Argument(s) : prx_pkt         Pointer to the receive  packet buffer
N*
N*               ptx_pkt         Pointer to the transmit packet buffer
N*
N*               rx_pkt_size     Size of the received packet
N*
N*               tx_pkt_size     Size of the transmit packet buffer
N*
N* Return(s)   : The number of bytes in the data segment of the packet to transmit in response.
N*
N* Caller(s)   : Tasks/receive handlers in communications-specific drivers, e.g., probe_rs232,
N*               probe_usb, probe_tcpip, etc.).
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
NCPU_INT16U  ProbeCom_ParseRxPkt (void        *prx_pkt,
N                                 void        *ptx_pkt,
N                                 CPU_INT16U   rx_pkt_size,
N                                 CPU_INT16U   tx_buf_size)
N{
N    CPU_INT16U   tx_buf_wr;
N    CPU_INT16U   format;
N    CPU_INT08U  *prx_pkt_08;
N    CPU_INT08U  *ptx_pkt_08;
N
N
N    if (rx_pkt_size < 2) {
N        return (0);
N    }
N
N    prx_pkt_08  = (CPU_INT08U *)prx_pkt;
N    ptx_pkt_08  = (CPU_INT08U *)ptx_pkt;
N    format      = (prx_pkt_08[1] << 8) + prx_pkt_08[0];
N    prx_pkt_08 += 2;
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    ProbeCom_RxPktCtr++;
N    ProbeCom_TxPktCtr++;
N#endif
N
N    switch (format) {
N        case PROBE_COM_FMT_RX_QUERY:
X        case 0x0001:
N             tx_buf_wr = ProbeCom_CmdQuery(       prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
N             break;
N
N        case PROBE_COM_FMT_RX_INFO:
X        case 0x0004:
N             tx_buf_wr = ProbeCom_CmdInfo(        prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
N             break;
N
N        case PROBE_COM_FMT_RX_SIMPLE_RD:
X        case 0x0002:
N             tx_buf_wr = ProbeCom_CmdSimpleRd(    prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
N             break;
N
N        case PROBE_COM_FMT_RX_MULTIPLE_RD:
X        case 0x0007:
N             tx_buf_wr = ProbeCom_CmdMultipleRd(  prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
N             break;
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
S        case PROBE_COM_FMT_RX_SIMPLE_WR:
S             tx_buf_wr = ProbeCom_CmdSimpleWr(    prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
S             break;
S
S        case PROBE_COM_FMT_RX_MULTIPLE_WR:
S             tx_buf_wr = ProbeCom_CmdMultipleWr(  prx_pkt_08, ptx_pkt_08, rx_pkt_size, tx_buf_size);
S             break;
N#endif
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
S        case PROBE_COM_FMT_RX_STR_RD:
S             tx_buf_wr = ProbeCom_CmdStrRd(       prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
S             break;
S
S        case PROBE_COM_FMT_RX_STR_WR:
S             tx_buf_wr = ProbeCom_CmdStrWr(       prx_pkt_08, ptx_pkt_08,  rx_pkt_size, tx_buf_size);
S             break;
N#endif
N
N        default:
N             tx_buf_wr = ProbeCom_CmdErr(                     ptx_pkt_08,  PROBE_COM_STATUS_UNKNOWN_REQUEST);
X             tx_buf_wr = ProbeCom_CmdErr(                     ptx_pkt_08,  0xF9);
N             break;
N    }
N
N    return (tx_buf_wr);
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_InfoHndlrSet()
N*
N* Description : Set the handler that will be invoked when an info packet is received.
N*
N* Argument(s) : hndlr           The handler that will be invoked.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application or communications-specific driver.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  ProbeCom_InfoHndlrSet (PROBE_COM_INFO_HDNLR_FNCT  hndlr)
N{
N#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
X#if (3 == 3)
N    CPU_SR  cpu_sr;
N#endif
N
N
N    CPU_CRITICAL_ENTER();
X    { cpu_sr = CPU_SR_Save(); };
N    ProbeCom_InfoHndlr = hndlr;
N    CPU_CRITICAL_EXIT();
X    { CPU_SR_Restore(cpu_sr); };
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_StrHndlrSet()
N*
N* Description : Set the handler that will be invoked when an string write packet is received.
N*
N* Argument(s) : hndlr           The handler that will be invoked.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application or communications-specific driver.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Svoid  ProbeCom_StrHndlrSet (PROBE_COM_STR_HDNLR_FNCT  hndlr)
S{
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR  cpu_sr;
S#endif
S
S
S    CPU_CRITICAL_ENTER();
S    ProbeCom_StrHndlr = hndlr;
S    CPU_CRITICAL_EXIT();
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                            ProbeCom_TxStr()
N*
N* Description : Append a string in the string buffer.
N*
N* Argument(s) : pstr        Pointer to the string to send.
N*
N*               dly         Delay time (in milliseconds).  If this value is zero, then
N*                           the function will return after queueing in the buffer the portion that fits
N*                           immediately.  Otherwise, the function will delay for a certain number of
N*                           milliseconds until the entire string has been queued in the buffer.
N*
N* Return(s)   : DEF_TRUE   if the entire string was queued in the buffer.
N*               DEF_FALSE  if the entire string could not be queued in the buffer.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) The string buffer is implemented as a circular buffer.  This function is one of two
N*                   points of access for this buffer, the other being in the task or ISR which forms the
N*                   tx packets.  Only this function should modify the global current write index
N*                   (ProbeCom_StrBufWrIx); only the task or ISR which forms the packets should modify the
N*                   global current read index (ProbeCom_StrBufRdIx).
N*
N*               (2) The global current write index (ProbeCom_StrBufWrIx) is the index of the next location
N*                   in the buffer to write.  The global current read index (ProbeCom_StrBufRdIx) is the
N*                   index of the next location in the buffer to read.
N*
N*               (3) The string buffer, an array of PROBE_COM_STR_BUF_SIZE bytes, can only hold
N*                   (PROBE_COM_STR_BUF_SIZE - 1) bytes so that the condition
N*
N*                                        ProbeCom_StrBufWrIx == ProbeCom_StrBufRdIx
N*
N*                   will be true if and only if the buffer is empty.  Consequently, this function
N*                   always leaves an empty space in the buffer.
N*
N*               (4) If called from an ISR, dly MUST be 0.
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
SCPU_BOOLEAN  ProbeCom_TxStr (CPU_CHAR    *pstr,
S                             CPU_INT16U   dly)
S{
S    CPU_BOOLEAN  ret;
S    CPU_INT32U   len;
S    CPU_INT16U   wr_ix;
S    CPU_INT16U   rd_ix;
S    CPU_INT16U   wr_ix_n;
S
S    CPU_INT16U   nbytes_free;
S    CPU_INT16U   nbytes_wr;
S
S
S    if (dly == 0) {
S        ret = ProbeCom_OS_Pend(DEF_FALSE);
S    } else {
S        ret = ProbeCom_OS_Pend(DEF_TRUE);
S    }
S
S    if (ret == DEF_FALSE) {
S        return (DEF_FALSE);
S    }
S
S    len = (CPU_INT32U)Str_Len(pstr);                            /* Determine length of the string (without NULL byte).  */
S
S    while (len > 0) {
S        rd_ix = ProbeCom_StrBufRdIx;
S        wr_ix = ProbeCom_StrBufWrIx;
S
S        if (rd_ix > wr_ix) {                                    /* If rd_ix > wr_ix, store str at                       */
S            nbytes_free = rd_ix - wr_ix - 1;                    /*           buf interval [wr_ix, rd_ix - 1).           */
S        } else {
S            if (rd_ix == 0) {                                   /* If rd_ix <= wr_ix && rd_ix == 0, store str at        */
S                                                                /*           buf interval [wr_ix, end_ix - 1).          */
S                nbytes_free = PROBE_COM_STR_BUF_SIZE - wr_ix - 1;
S            } else {                                            /* If rd_ix <= wr_ix && rd_ix != 0, store str at        */
S                nbytes_free = PROBE_COM_STR_BUF_SIZE - wr_ix;   /*           buf interval [wr_ix, end_ix).              */
S            }
S        }
S
S        if (nbytes_free == 0) {                                 /* If the buf is full ...                               */
S            if (dly == 0) {                                     /* (a) Rtn if dly = 0.                                  */
S                ProbeCom_OS_Post();
S                return (DEF_FALSE);
S            } else {                                            /* (b) Call OS fnct to dly and continue.                */
S                ProbeCom_OS_Dly(dly);
S            }
S        } else {
S            if (nbytes_free > len) {                            /* If str is shorter than free space.                   */
S                nbytes_wr = len;
S            } else {
S                nbytes_wr = nbytes_free;
S            }
S
S            wr_ix_n = wr_ix + nbytes_wr;                        /* Assign wr ix after wr.                               */
S
S            if (wr_ix_n == PROBE_COM_STR_BUF_SIZE) {            /* Wrap buf ix around.                                  */
S                wr_ix_n = 0;
S            }
S
S            Mem_Copy((void     *)&ProbeCom_StrBuf[wr_ix],       /* Copy str to buf.                                     */
S                     (void     *) pstr,
S                     (CPU_SIZE_T) nbytes_wr);
S
S            ProbeCom_StrBufWrIx  = wr_ix_n;                     /* Assign new global wr ix.                             */
S            pstr               += nbytes_wr;                    /* Inc str ptr.                                         */
S            len                -= nbytes_wr;                    /* Dec str len.                                         */
S        }
S    }
S
S    ProbeCom_OS_Post();
S    return (DEF_TRUE);                                          /* Rtn TRUE to indicate success.                        */
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N*                                             LOCAL FUNCTIONS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            ProbeCom_StrRdy()
N*
N* Description : Check if a string is ready for transmission.
N*
N* Argument(s) : none.
N*
N* Return(s)   : DEF_TRUE   if a  string is in the buffer for transmission.
N*               DEF_FALSE  if no string is in the buffer for transmission.
N*
N* Caller(s)   : ProbeCom_PktModifier().
N*
N* Note(s)     : (1) See Notes for 'ProbeCom_TxStr()'.
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_BOOLEAN  ProbeCom_StrRdy (void)
S{
S    CPU_BOOLEAN  rdy;
S    CPU_INT16U   wr_ix;
S    CPU_INT16U   rd_ix;
S
S
S    wr_ix = ProbeCom_StrBufWrIx;
S    rd_ix = ProbeCom_StrBufRdIx;
S
S    if (wr_ix == rd_ix) {
S        rdy = DEF_FALSE;
S    } else {
S        rdy = DEF_TRUE;
S    }
S
S    return (rdy);
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_PktModifier()
N*
N* Description : Get packet modfier byte.
N*
N* Argument(s) : none.
N*
N* Return(s)   : The modifier byte.
N*
N* Caller(s)   : Various command handlers (ProbeCom_Cmd????()).
X
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT08U  ProbeCom_PktModifier (void)
N{
N    CPU_INT08U  mod;
N
N
N    mod = PROBE_COM_MODIFIER_NONE;
X    mod = 0x00;
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
S    if (ProbeCom_StrRdy() == DEF_TRUE) {
S        DEF_BIT_SET(mod, PROBE_COM_MODIFIER_STR_HAVE);
S    }
N#endif
N
N    return (mod);
N}
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_CmdErr()
N*
N* Description : Formulate error response when the target receives a request it cannot handle.
N*
N* Argument(s) : ptx_buf      Pointer to the transmit buffer
N*
N*               comm_err     Error that occurred
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : Various command handlers (ProbeCom_Cmd????()).
X
N*
N* Note(s)     : (1) The TX format:
N*
N*                   (A) A 2-byte format  , indicating the data segment format;
N*                   (B) A 1-byte constant, PROBE_RS232_OK,   if the location can    be read;
N*                       A 1-byte constant, PROBE_RS232_FAIL, if the location cannot be read.
N*                   (C) A 1-byte modifier.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeCom_CmdErr (CPU_INT08U  *ptx_buf,
N                                     CPU_INT08U   comm_err)
N{
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    ProbeCom_ErrPktCtr++;
N#endif
N
N    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_ERROR);       /* TX pkt format.                                  */
X    ProbeCom_StoINT16U(&ptx_buf, 0x8000);        
N    ProbeCom_StoINT8U( &ptx_buf, comm_err);                     /* Target status.                                  */
N    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /* Modifier.                                       */
N    return (PROBE_COM_SIZE_TX_HDR);                             /* Rtn TX data segment size =  4 (= Tx hdr size).  */
X    return (4);                              
N}
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_CmdQuery()
N*
N* Description : Parse the FMT_QUERY command & formulate response.  This command asks the target
N*               about its capabilities, which are returned in response.
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 2-byte query , indicating the query type.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |          Query          |
N*                         +-------------------------+-------------------------+
N*
N*              (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier;
N*                   (E) A n-byte answer, the answer to the query.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*                         |                       Answer                      |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeCom_CmdQuery (CPU_INT08U  *prx_buf,
N                                       CPU_INT08U  *ptx_buf,
N                                       CPU_INT16U   rx_pkt_size,
N                                       CPU_INT16U   tx_buf_size)
N{
N    CPU_INT16U  query;
N    CPU_INT16U  nbytes;
N    CPU_INT32U  version;
N
N
N    query  = 0;
N    nbytes = 0;
N
N                                                                /* ------------------- CHK PKT SIZE ------------------- */
N                                                                /* Expected size =  2 (= Rx header size)                */
N                                                                /*               +  2 (= Query         ).               */
N    if (rx_pkt_size != 4) {
N        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
X        return (ProbeCom_CmdErr(ptx_buf, 0xFE));
N    }
N
N                                                                /* ------------------- HANDLE QUERY ------------------- */
N    query = ProbeCom_GetINT16U(&prx_buf);                       /* Read the query.                                      */
N
N    switch (query) {
N        case PROBE_COM_QUERY_MAX_RX_SIZE:
X        case 0x0101:
N        case PROBE_COM_QUERY_MAX_TX_SIZE:
X        case 0x0102:
N        case PROBE_COM_QUERY_FMT_SUPPORT:
X        case 0x1001:
N        case PROBE_COM_QUERY_ENDIANNESS_TEST:
X        case 0x0201:
N             break;
N
N        default:
N             return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_QUERY_NOT_SUPPORTED));
X             return (ProbeCom_CmdErr(ptx_buf, 0xFC));
N    }
N
N                                                                /* Store TX pkt header :                                */
N    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_QUERY);       /*  (a) TX pkt format.                                  */
X    ProbeCom_StoINT16U(&ptx_buf, 0x8001);        
N    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
X    ProbeCom_StoINT8U( &ptx_buf, 0x01);           
N    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
N
N                                                                /* Store TX data segment data.                          */
N    switch (query) {
N
N        case PROBE_COM_QUERY_MAX_RX_SIZE:
X        case 0x0101:
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_RX_MAX_SIZE);
X             ProbeCom_StoINT16U(&ptx_buf, 128);
N             ProbeCom_StoINT16U(&ptx_buf, 0);
N             nbytes  = 4;
N             break;
N
N        case PROBE_COM_QUERY_MAX_TX_SIZE:
X        case 0x0102:
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_TX_MAX_SIZE);
X             ProbeCom_StoINT16U(&ptx_buf, 128);
N             ProbeCom_StoINT16U(&ptx_buf, 0);
N             nbytes  = 4;
N             break;
N
N        case PROBE_COM_QUERY_FMT_SUPPORT:
X        case 0x1001:
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_QUERY      );
X             ProbeCom_StoINT16U(&ptx_buf, 0x0001      );
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_INFO       );
X             ProbeCom_StoINT16U(&ptx_buf, 0x0004       );
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_SIMPLE_RD  );
X             ProbeCom_StoINT16U(&ptx_buf, 0x0002  );
N             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_MULTIPLE_RD);
X             ProbeCom_StoINT16U(&ptx_buf, 0x0007);
N             nbytes  = 8;
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
S             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_SIMPLE_WR  );
S             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_MULTIPLE_WR);
S             nbytes += 4;
N#endif
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
S             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_STR_RD);
S             ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_RX_STR_WR);
S             nbytes += 4;
N#endif
N             break;
N
N        case PROBE_COM_QUERY_ENDIANNESS_TEST:
X        case 0x0201:
N             ProbeCom_EndiannessTest = 0x12345678;
N             Mem_Copy((void     *) ptx_buf,
N                      (void     *)&ProbeCom_EndiannessTest,
N                      (CPU_SIZE_T) 4);
N             nbytes  = 4;
N             break;
N
N
N        case PROBE_COM_QUERY_VERSION:
X        case 0x1002:
N             version = PROBE_COM_VERSION;
X             version = 200u;
N             Mem_Copy((void     *) ptx_buf,
N                      (void     *)&version,
N                      (CPU_SIZE_T) 4);
N             nbytes  = 4;
N             break;
N
N        default:
N             nbytes  = 0;
N             break;
N    }
N
N                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
N    return ((CPU_INT16U)(nbytes + PROBE_COM_SIZE_TX_HDR));      /* TX pkt size = nbytes (= Tx data   size)              */
X    return ((CPU_INT16U)(nbytes + 4));       
N                                                                /*             + 4      (= Tx header size).             */
N}
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_CmdInfo()
N*
N* Description : Parse the FMT_INFO command & formulate response.  This command supplies information
N*               to the target about the Windows program's capabilitied & configuration.
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 2-byte info  , indicating the type of the info packet;
N*                   (C) A 4-byte data  , the packet data.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |          Info           |
N*                         +-------------------------+-------------------------+
N*                         |                       Data                        |
N*                         +---------------------------------------------------+
N*
N*              (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*                         |                       Answer                      |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeCom_CmdInfo (CPU_INT08U  *prx_buf,
N                                      CPU_INT08U  *ptx_buf,
N                                      CPU_INT16U   rx_pkt_size,
N                                      CPU_INT16U   tx_buf_size)
N{
N    CPU_INT16U                 info;
N    CPU_INT32U                 data;
N    PROBE_COM_INFO_HDNLR_FNCT  hndlr;
N#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
X#if (3 == 3)
N    CPU_SR                     cpu_sr;
N#endif
N
N
N                                                                /* ------------------- CHK PKT SIZE ------------------- */
N                                                                /* Expected size = 2 (= Rx header size)                 */
N                                                                /*               + 2 (= Info          )                 */
N                                                                /*               + 4 (= Data          ).                */
N    if (rx_pkt_size != 8) {
N        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
X        return (ProbeCom_CmdErr(ptx_buf, 0xFE));
N    }
N                                                                /* ------------------- HANDLE INFO -------------------- */
N    CPU_CRITICAL_ENTER();
X    { cpu_sr = CPU_SR_Save(); };
N    hndlr = ProbeCom_InfoHndlr;
N    CPU_CRITICAL_EXIT();
X    { CPU_SR_Restore(cpu_sr); };
N    if (hndlr != (PROBE_COM_INFO_HDNLR_FNCT)0) {                /* Invoke callback if callback is set.                  */
N        info = ProbeCom_GetINT16U(&prx_buf);
N        data = ProbeCom_GetINT32U(&prx_buf);
N        hndlr(info, data);
N    }
N
N                                                                /* Store TX pkt hdr :                                   */
N    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_INFO);        /*  (a) TX pkt format.                                  */
X    ProbeCom_StoINT16U(&ptx_buf, 0x8004);         
N    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
X    ProbeCom_StoINT8U( &ptx_buf, 0x01);           
N    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
N
N                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
N    return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR));               /* Tx pkt size = 4 (= Tx header size).                  */
X    return ((CPU_INT16U)(4));                
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_CmdSimpleRd()
N*
N* Description : Parse the FMT_SIMPLE_RD request & formulate response.  This command causes the target
N*               to send data read from its memory for a certain {memory address, data length} pair (which
N*               is given in the request).
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format , indicating the data segment format;
N*                   (B) A 2-byte length , indicating the number of bytes to read;
N*                   (C) A 4-byte address, the starting address of the data to read.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |     Number of bytes     |
N*                         +-------------------------+-------------------------+
N*                         |                      Address                      |
N*                         +-------------------------+-------------------------+
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier;
N*                   (D) The memory data.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*                         |                        Data                       |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeCom_CmdSimpleRd (CPU_INT08U  *prx_buf,
N                                          CPU_INT08U  *ptx_buf,
N                                          CPU_INT16U   rx_pkt_size,
N                                          CPU_INT16U   tx_buf_size)
N{
N    CPU_ADDR    addr;
N    CPU_INT16U  nbytes;
N
N
N    addr   = 0;
N    nbytes = 0;
N
N                                                                /* ------------------- CHK PKT SIZE ------------------- */
N                                                                /* Expected size = 2 (= Rx header size )                */
N                                                                /*               + 2 (= Number of bytes)                */
N                                                                /*               + 4 (= Address        ).               */
N    if (rx_pkt_size != 8) {
N        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
X        return (ProbeCom_CmdErr(ptx_buf, 0xFE));
N    }
N
N
N                                                                /* -------------------- HANDLE RD --------------------- */
N    nbytes = ProbeCom_GetINT16U(&prx_buf);                      /* Get nbr of bytes to read.                            */
N
N                                                                /* Get read addr.                                       */
N#if ((!defined(CPU_CFG_ADDR_SIZE)) || \
N     ((defined(CPU_CFG_ADDR_SIZE)) && \
N              (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
X#if ((!1L) ||      ((1L) &&               (4   != 2)))
N    addr   = (CPU_ADDR)ProbeCom_GetINT32U(&prx_buf);
N#else
S    addr   = (CPU_ADDR)ProbeCom_GetINT16U(&prx_buf);
N#endif
N
N    if (nbytes + PROBE_COM_SIZE_TX_HDR > tx_buf_size) {         /* If TX pkt will NOT fit in buf, rtn err.            */
X    if (nbytes + 4 > tx_buf_size) {          
N        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_TX_PKT_TOO_LARGE));
X        return (ProbeCom_CmdErr(ptx_buf, 0xFD));
N    }
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    ProbeCom_TxSymCtr++;                                        /* Increment transmit symbol counter.                   */
N    ProbeCom_TxSymByteCtr += nbytes;
N#endif
N
N                                                                /* Store TX pkt hdr :                                   */
N    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_SIMPLE_RD);   /*  (a) TX pkt format.                                  */
X    ProbeCom_StoINT16U(&ptx_buf, 0x8002);    
N    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /*  (b) Target status.                                  */
X    ProbeCom_StoINT8U( &ptx_buf, 0x01);           
N    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /*  (c) Modifier.                                       */
N
N    Mem_Copy((void     *)ptx_buf,                               /* Save TX data segment data.                           */
N             (void     *)addr,
N             (CPU_SIZE_T)nbytes);
N
N                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
N    return ((CPU_INT16U)(nbytes + PROBE_COM_SIZE_TX_HDR));      /* TX pkt size = nbytes (= Tx data   size)              */
X    return ((CPU_INT16U)(nbytes + 4));       
N                                                                /*             + 4      (= Tx header size).             */
N}
N
N
N/*
N*********************************************************************************************************
N*                                        ProbeCom_CmdMultipleRd()
N*
N* Description : Parse the FMT_MULTIPLE_RD request & formulate respnse.  This command causes the target
N*               to send data read from its memory for a certain set of {memory address, data length}
N*               pairs (which are given in the request).
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format,          indicating the data segment format;
N*                   (B) A 5-byte item descriptor, for each item in the list, consisting of:
N*
N*                       (1) A 4-byte address, the starting address of the data to read;
N*                       (2) A 1-byte length,  indicating the number of bytes to read.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         | Num. bytes |         Addr       ---
N*                         +-------------------------+------------+------------+        |    Item 1
N*                         ress                                   | Num. bytes |       ---
N*                         +--------------------------------------+------------+        |
N*                         |                      Address                      |        |    Item 2
N*                         +------------+--------------------------------------+       ---
N*                         | Num. bytes |                                   Addr        |    Item 3
N*                         +------------+--------------------------------------+        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         +--------------------------------------+------------+        .
N*                         ress                                   | Num. bytes |       ---
N*                         ---------------------------------------+------------+        |   Item n
N*                         |                      Address                      |        |
N*                         +---------------------------------------------------+       ---
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier;
N*                   (D) For each item, the following is sent:
N*
N*                       (1) The memory data.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+       ---
N*                         |                        Data                       |        |    Item 1
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         +---------------------------------------------------+       ---
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         +---------------------------------------------------+       ---
N*                         |                        Data                       |        |    Item n
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         +---------------------------------------------------+       ---
N*
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeCom_CmdMultipleRd (CPU_INT08U  *prx_buf,
N                                            CPU_INT08U  *ptx_buf,
N                                            CPU_INT16U   rx_pkt_size,
N                                            CPU_INT16U   tx_buf_size)
N{
N    CPU_INT08U  *ptx_buf_start;
N    CPU_INT16U   tx_len;
N
N    CPU_ADDR     addr;
N    CPU_INT16U   nbytes;
N    CPU_INT16U   rx_pkt_ix;
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    CPU_INT16U   sym_ctr;
N    CPU_INT16U   sym_byte_ctr;
N#endif
N
N
N                                                                /* ------------------- CHK PKT SIZE ------------------- */
N                                                                /* Expected size >= 2 (= Rx header size )               */
N                                                                /*                + 5 (= 1 item descriptor).            */
N    if (rx_pkt_size  < 7) {
N        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
X        return (ProbeCom_CmdErr(ptx_buf, 0xFE));
N    }
N
N                                                                /* -------------------- HANDLE RD --------------------- */
N    ptx_buf_start = ptx_buf;                                    /* Save ptr to TX buf in case pkt is too long for buf.  */
N    tx_len        = PROBE_COM_SIZE_TX_HDR;                      /* Initial TX pkt len = 4 = size of hdr.                */
X    tx_len        = 4;                       
N
N                                                                /* Store TX pkt hdr :                                   */
N    ptx_buf[0]    = PROBE_COM_FMT_TX_MULTIPLE_RD_LO;            /* (a) TX pkt format.                                   */
X    ptx_buf[0]    = 0x07;             
N    ptx_buf[1]    = PROBE_COM_FMT_TX_MULTIPLE_RD_HI;
X    ptx_buf[1]    = 0x80;
N    ptx_buf[2]    = PROBE_COM_STATUS_OK;                        /* (b) Target status.                                   */
X    ptx_buf[2]    = 0x01;                         
N    ptx_buf[3]    = ProbeCom_PktModifier();                     /* (c) Modifier.                                        */
N    ptx_buf      += PROBE_COM_SIZE_TX_HDR;
X    ptx_buf      += 4;
N
N    rx_pkt_ix     = 7;                                          /* Recv pkt ix after 1st item = 2 (= Rx header size   ) */
N                                                                /*                            + 5 (= 1 item descriptor).*/
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    sym_ctr      = 0;
N    sym_byte_ctr = 0;
N#endif
N                                                                /* Store data for each item.                            */
N    while (rx_pkt_ix <= rx_pkt_size) {
N        nbytes     =  prx_buf[0];                               /* (a) Get nbr of bytes to read.                        */
N
N                                                                /* (b) Get read addr.                                   */
N#if ((!defined(CPU_CFG_ADDR_SIZE)) || \
N     ((defined(CPU_CFG_ADDR_SIZE)) && \
N              (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
X#if ((!1L) ||      ((1L) &&               (4   != 2)))
N        addr       = (prx_buf[4] << 8) + prx_buf[3];
N        addr       = (addr       << 8) + prx_buf[2];
N        addr       = (addr       << 8) + prx_buf[1];
N#else
S        addr       = (prx_buf[2] << 8) + prx_buf[1];
N#endif
N
N        prx_buf   += 5;
N        rx_pkt_ix += 5;
N
N        tx_len    += nbytes;                                    /* (c) Add nbr of bytes to pkt len.                     */
N
N        if (tx_len > tx_buf_size) {                             /* (d) Will pkt be too long for TX buf? ...             */
N            ptx_buf = ptx_buf_start;                            /*     ... rtn err.                                     */
N            return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_TX_PKT_TOO_LARGE));
X            return (ProbeCom_CmdErr(ptx_buf, 0xFD));
N        }
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N        sym_ctr++;                                              /* (e) Inc local sym ctr.                               */
N        sym_byte_ctr += nbytes;
N#endif
N                                                                /* (f) Otherwise, save TX data.                         */
N        Mem_Copy((void     *)ptx_buf,
N                 (void     *)addr,
N                 (CPU_SIZE_T)nbytes);
N
N        ptx_buf += nbytes;
N    }
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    ProbeCom_TxSymCtr     += sym_ctr;                           /* Inc global sym ctr.                                  */
N    ProbeCom_TxSymByteCtr += sym_byte_ctr;
N#endif
N
N                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
N    return (tx_len);
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeCom_CmdSimpleWr()
N*
N* Description : Parse the FMT_SIMPLE_WR request & formulate response.  This command causes the target
N*               to write certain data into its memroy, for a certain {memory address, data length, data}
N*               triplet (which is given in the request).
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format,  indicating the data segment format;
N*                   (B) A 2-byte length,  indicating the number of bytes to write;
N*                   (C) A 4-byte address, the starting address at which the data should be written;
N*                   (D) The memory data.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |      Number of bytes    |
N*                         +-------------------------+-------------------------+
N*                         |                      Address                      |
N*                         +---------------------------------------------------+
N*                         |                        Data                       |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U  ProbeCom_CmdSimpleWr (CPU_INT08U  *prx_buf,
S                                          CPU_INT08U  *ptx_buf,
S                                          CPU_INT16U   rx_pkt_size,
S                                          CPU_INT16U   tx_buf_size)
S{
S    CPU_INT16U  nbytes;
S    CPU_ADDR    addr;
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR      cpu_sr;
S#endif
S
S
S                                                                /* ------------------- CHK PKT SIZE ------------------- */
S                                                                /* Expected size >= 2      (= Rx header size )          */
S                                                                /*                + 2      (= Number of bytes)          */
S                                                                /*                + 4      (= Address        )          */
S                                                                /*                + nbytes (= Data           ).         */
S    if (rx_pkt_size < 8) {
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S    }
S
S                                                                /* -------------------- HANDLE WR --------------------- */
S    nbytes = ProbeCom_GetINT16U(&prx_buf);                      /* Get nbr of bytes to write.                           */
S
S                                                                /* Get write addr.                                      */
S#if ((!defined(CPU_CFG_ADDR_SIZE)) || \
S     ((defined(CPU_CFG_ADDR_SIZE)) && \
S              (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
X#if ((!defined(CPU_CFG_ADDR_SIZE)) ||      ((defined(CPU_CFG_ADDR_SIZE)) &&               (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
S    addr   = (CPU_ADDR)ProbeCom_GetINT32U(&prx_buf);
S#else
S    addr   = (CPU_ADDR)ProbeCom_GetINT16U(&prx_buf);
S#endif
S
S    if (rx_pkt_size != (8 + nbytes)) {                          /* If RX data segment is NOT expected size ... rtn err. */
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S    }
S
S                                                                /* Copy data into memory.                               */
S    CPU_CRITICAL_ENTER();
S    Mem_Copy((void     *)addr,
S             (void     *)prx_buf,
S             (CPU_SIZE_T)nbytes);
S    CPU_CRITICAL_EXIT();
S
S                                                                /* Store TX pkt hdr :                                   */
S    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_SIMPLE_WR);   /* (a) TX pkt format.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /* (b) Target status.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /* (c) Modifier.                                        */
S
S                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
S    return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR));               /* Tx pkt size = 4 (= Tx header size).                  */
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                        ProbeCom_CmdMultipleWr()
N*
N* Description : Parse the FMT_MULTIPLE_WR request & formulate response.  This command causes the target
N*               to write certain data into its memroy, for a certain number of {memory address, data
N*               length, data} triplets (which are given in the request).
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format,  indicating the data segment format;
N*                   (B) A n-byte item descriptor, for each item in the list, consiting of the following:
N*
N*                       (1) A 1-byte length,  indicating the number of bytes to write;
N*                       (2) A 4-byte address, the starting address at which the data should be written;
N*                       (3) The memory data.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         | Num. bytes |         Addr       ---
N*                         +-------------------------+------------+------------+        |
N*                         ress                                   |            |        |
N*                         +--------------------------------------+            |        |    Item 1
N*                         |                       Data                        |        |
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         +------------+--------------------------------------+       ---
N*                         | Num. bytes |                                   Addr        |    Item 2
N*                         +------------+--------------------------------------+        .
N*                         |                         .                         |        .
N*                         |                         .                         |        .
N*                         |                         .            +------------+        .
N*                         |                         .            | Num. bytes |       ---
N*                         ---------------------------------------+------------+        |
N*                         |                      Address                      |        |
N*                         +---------------------------------------------------+        |    Item n
N*                         |                       Data                        |        |
N*                         |                         .                         |        |
N*                         |                         .                         |        |
N*                         +------------+--------------------------------------+       ---
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U  ProbeCom_CmdMultipleWr (CPU_INT08U  *prx_buf,
S                                            CPU_INT08U  *ptx_buf,
S                                            CPU_INT16U   rx_pkt_size,
S                                            CPU_INT16U   tx_buf_size)
S{
S    CPU_INT16U  nbytes;
S    CPU_ADDR    addr;
S    CPU_INT16U  rx_pkt_ix;
S#if (PROBE_COM_STAT_EN == DEF_ENABLED)
S    CPU_INT16U  sym_ctr;
S    CPU_INT16U  sym_byte_ctr;
S#endif
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR      cpu_sr;
S#endif
S
S                                                                /* ------------------- CHK PKT SIZE ------------------- */
S                                                                /* Expected size >= 2      (= Rx header size )          */
S                                                                /*                + 1      (= Number of bytes)          */
S                                                                /*                + 4      (= Address        )          */
S                                                                /*                + nbytes (= Data           ).         */
S    if (rx_pkt_size < 7) {
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S    }
S
S                                                                /* -------------------- HANDLE WR --------------------- */
S    rx_pkt_ix  = 7;                                             /* Recv pkt ix after 1st item = 2 (= Rx header size   ) */
S                                                                /*                            + 5 (= 1 item descriptor).*/
S
S#if (PROBE_COM_STAT_EN == DEF_ENABLED)
S    sym_ctr      = 0;
S    sym_byte_ctr = 0;
S#endif
S                                                                /* Store data for each item.                            */
S    while (rx_pkt_ix <= rx_pkt_size) {
S        nbytes  =  prx_buf[0];                                  /* (a) Get nbr of bytes to write.                       */
S
S                                                                /* (b) Get write addr.                                  */
S#if ((!defined(CPU_CFG_ADDR_SIZE)) || \
S     ((defined(CPU_CFG_ADDR_SIZE)) && \
S              (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
X#if ((!defined(CPU_CFG_ADDR_SIZE)) ||      ((defined(CPU_CFG_ADDR_SIZE)) &&               (CPU_CFG_ADDR_SIZE   != CPU_WORD_SIZE_16)))
S        addr     = (prx_buf[4] << 8) + prx_buf[3];
S        addr     = (addr       << 8) + prx_buf[2];
S        addr     = (addr       << 8) + prx_buf[1];
S#else
S        addr     = (prx_buf[2] << 8) + prx_buf[1];
S#endif
S
S        prx_buf += 5;
S
S        if (rx_pkt_ix + nbytes > rx_pkt_size) {
S            return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S        }
S
S#if (PROBE_COM_STAT_EN == DEF_ENABLED)
S        sym_ctr++;                                              /* (c) Incr local sym ctr.                              */
S        sym_byte_ctr += nbytes;
S#endif
S                                                                /* (d) Store data into pkt.                             */
S        CPU_CRITICAL_ENTER();
S        Mem_Copy((void     *)addr,
S                 (void     *)prx_buf,
S                 (CPU_SIZE_T)nbytes);
S        CPU_CRITICAL_EXIT();
S
S        prx_buf   += nbytes;
S        rx_pkt_ix += 5 + nbytes;
S    }
S
S#if (PROBE_COM_STAT_EN == DEF_ENABLED)
S    ProbeCom_RxSymCtr     += sym_ctr;                           /* Inc global sym ctr.                                  */
S    ProbeCom_RxSymByteCtr += sym_byte_ctr;
S#endif
S
S                                                                /* Store TX pkt hdr :                                   */
S    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_MULTIPLE_WR); /* (a) TX pkt format.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /* (b) Target status.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /* (c) Modifier.                                        */
S
S                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
S    return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR));               /* Tx pkt size = 4 (= Tx header size).                  */
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_CmdStrRd()
N*
N* Description : Parse the FMT_STR_RD command & formulate response.  This command asks the target to send
N*               a string that it is currently storing.
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 2-byte padding.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |         Padding         |
N*                         +-------------------------+-------------------------+
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier;
N*                   (D) A n-byte string, the string which is stored in the target's buffer.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*                         |                       String                      |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*               (3) See Notes for 'ProbeCom_TxStr()'.
N*
N*               (4) uC/Probe requires that a NULL byte ends the string.  Consequently, if the data
N*                   section of the TX packet is n bytes long, then only (n - 1) bytes have been read from
N*                   the string buffer.
N*
N*               (5) A NULL modifier is returned so that string transmission will not monopolize the
N*                   transmission channel.  If more string is queued in the string buffer, additional
N*                   string bytes will be sent following the response to the next received packet.
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U  ProbeCom_CmdStrRd (CPU_INT08U  *prx_buf,
S                                       CPU_INT08U  *ptx_buf,
S                                       CPU_INT16U   rx_pkt_size,
S                                       CPU_INT16U   tx_buf_size)
S{
S    CPU_INT16U  wr_ix;
S    CPU_INT16U  rd_ix;
S    CPU_INT16U  nbytes;
S    CPU_INT16U  nbytes_rd;
S    CPU_INT16U  rd_ix_n;
S    CPU_INT16U  tx_max;
S
S
S    wr_ix  = ProbeCom_StrBufWrIx;
S    rd_ix  = ProbeCom_StrBufRdIx;
S    nbytes = 0;
S
S                                                                /* ------------------- CHK PKT SIZE ------------------- */
S                                                                /* Expected size = 2 (= Rx header size)                 */
S                                                                /*               + 2 (= Padding       ).                */
S    if (rx_pkt_size != 4) {
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S    }
S
S                                                                /* ------------------- HANDLE STR --------------------- */
S    if (wr_ix == rd_ix) {                                       /* If there is NO string ... rtn err.                   */
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_STR_NONE));
S    }
S
S                                                                /* Store TX pkt hdr :                                   */
S    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_STR_RD);      /* (a) TX pkt format.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /* (b) Target status.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, 0);                            /* (c) Modifier (see Notes #5).                         */
S
S                                                                /* ------------------- STORE STR ---------------------- */
S    tx_max = tx_buf_size - PROBE_COM_SIZE_TX_HDR - 1;           /* (a) Calculate size of largest tx string.             */
S
S    if (wr_ix > rd_ix) {                                        /* (b) If wr_ix > rd_ix, store the bytes [rd_ix, wr_ix).*/
S        nbytes_rd = wr_ix - rd_ix;                              /*     (1) Calculate nbr bytes to read.                 */
S                                                                /*     (2) If too much to fit in pkt ...                */
S                                                                /*     ... Store only [rd_ix,rd_ix + tx_buf_size - 5)   */
S                                                                /*     ... Where 5 = 1 (NULL byte)                      */
S        if (nbytes_rd >= tx_max) {                              /*                 + 4 (TX hdr   ).                     */
S            nbytes_rd = tx_max;
S            rd_ix_n   = rd_ix + tx_max;
S        } else {
S            rd_ix_n   = wr_ix;
S        }
S
S        nbytes = nbytes_rd;                                     /*     (3) Store nbr of bytes read.                     */
S        Mem_Copy((void     *) ptx_buf,                          /*     (4) Read from the string buf.                    */
S                 (void     *)&ProbeCom_StrBuf[rd_ix],
S                 (CPU_SIZE_T) nbytes_rd);
S       *(ptx_buf + nbytes)  = 0;                                /*     (5) Store NULL byte.                             */
S    } else {                                                    /*  (c) If wr_ix < rd_ix ...                            */
S                                                                /*  ... Store in pkt the bytes [rd_ix, end_ix) ...      */
S                                                                /*  ... Then store in pkt the bytes [0, wr_ix).         */
S
S        nbytes_rd = PROBE_COM_STR_BUF_SIZE - rd_ix;             /*      (1) Calculate nbr bytes to read.                */
S
S        if (nbytes_rd >= tx_max) {                              /*      (2) If too much to fit in pkt ...               */
S                                                                /*      ... Store only [rd_ix, rd_ix + tx_buf_size)     */
S            nbytes  = tx_max;                                   /*          (A) Store nbr of bytes read.                */
S            rd_ix_n = rd_ix + tx_max;
S            Mem_Copy((void     *) ptx_buf,                      /*          (B) Read from string buf.                   */
S                     (void     *)&ProbeCom_StrBuf[rd_ix],
S                     (CPU_SIZE_T) nbytes);
S           *(ptx_buf + nbytes)  = 0;                            /*          (C) Store NULL byte.                        */
S        } else {                                                /*     (3) If not too much for pkt :                    */
S
S                                                                /*           ------- [rd_ix, end_ix) ------             */
S
S            nbytes    = nbytes_rd;                              /*          (A) Store nbr of bytes read.                */
S            rd_ix_n   = 0;                                      /*          (B) Buf read ix after read.                 */
S            Mem_Copy((void     *) ptx_buf,                      /*          (C) Read from the string buf.               */
S                     (void     *)&ProbeCom_StrBuf[rd_ix],
S                     (CPU_SIZE_T) nbytes_rd);
S            rd_ix     = rd_ix_n;                                /*          (D) Update local read index.                */
S
S                                                                /*           --------- [0, wr_ix) ---------             */
S            ptx_buf   += nbytes_rd;
S            nbytes_rd  = wr_ix;                                 /*          (E) Number of bytes to read.                */
S            if (nbytes_rd + nbytes >= tx_max) {                 /*          (F) Too much to fit in pkt ...              */
S                nbytes_rd = tx_max - nbytes;                    /*          ... Store only [0, tx_buf_size - 5].        */
S            }
S            nbytes  += nbytes_rd;                               /*          (G) Update total nbr bytes read.            */
S            rd_ix_n  = rd_ix + nbytes_rd;                       /*          (H) Buf read ix after read.                 */
S            Mem_Copy((void     *) ptx_buf,                      /*          (I) Read from the string buf.               */
S                     (void     *)&ProbeCom_StrBuf[rd_ix],
S                     (CPU_SIZE_T) nbytes_rd);
S           *(ptx_buf + nbytes_rd) = 0;                           /*          (J) Store NULL byte.                        */
S        }
S    }
S
S    ProbeCom_StrBufRdIx = rd_ix_n;                              /*  (d) Update global read ix.                          */
S
S#if (PROBE_COM_STAT_EN == DEF_ENABLED)
S    ProbeCom_TxStrCtr += nbytes;
S#endif
S                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
S    return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR + nbytes + 1));  /* Tx pkt size = 4      (= Tx header size)              */
S                                                                /*             + nbytes (= String    size)              */
S                                                                /*             + 1      (= NULL byte     ).             */
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeCom_CmdStrWr()
N*
N* Description : Parse the FMT_STR_WR command & formulate response.  This command sends a string to the
N*               target.
N*
N* Argument(s) : prx_buf         Pointer to the receive  buffer
N*
N*               ptx_buf         Pointer to the transmit buffer
N*
N*               rx_pkt_size     Size of the receive  packet
N*
N*               tx_buf_size     Size of the transmit buffer
N*
N* Return(s)   : The number of bytes written to the tx buffer.
N*
N* Caller(s)   : ProbeCom_ParseRxPkt().
N*
N* Note(s)     : (1) The RX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 2-byte padding;
N*                   (C) A n-byte string.
N*
N*                         +-------------------------+-------------------------+
N*                         |          Format         |         Padding         |
N*                         +-------------------------+-------------------------+
N*                         |                       String                      |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         |                         .                         |
N*                         +---------------------------------------------------+
N*
N*               (2) The TX format:
N*
N*                   (A) A 2-byte format, indicating the data segment format;
N*                   (B) A 1-byte status, indicating the status after the request;
N*                   (C) A 1-byte modifier.
N*
N*                         +-------------------------+------------+------------+
N*                         |          Format         |   Status   |  Modifier  |
N*                         +-------------------------+------------+------------+
N*
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT16U  ProbeCom_CmdStrWr (CPU_INT08U  *prx_buf,
S                                       CPU_INT08U  *ptx_buf,
S                                       CPU_INT16U   rx_pkt_size,
S                                       CPU_INT16U   tx_buf_size)
S{
S    PROBE_COM_STR_HDNLR_FNCT   hndlr;
S    CPU_CHAR                  *pstr;
S    CPU_INT16U                 len;
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR                     cpu_sr;
S#endif
S
S
S                                                                /* ------------------- CHK PKT SIZE ------------------- */
S                                                                /* Expected size = 2 (= Rx header size)                 */
S                                                                /*               + 2 (= Padding       ).                */
S    if (rx_pkt_size <= 4) {
S        return (ProbeCom_CmdErr(ptx_buf, PROBE_COM_STATUS_RX_PKT_WRONG_SIZE));
S    }
S
S
S
S                                                                /* ------------------- HANDLE STR --------------------- */
S    CPU_CRITICAL_ENTER();
S    hndlr = ProbeCom_StrHndlr;
S    CPU_CRITICAL_EXIT();
S    if (hndlr != (PROBE_COM_STR_HDNLR_FNCT)0) {                 /* Invoke callback if callback is set.                  */
S        pstr = (CPU_CHAR *)(prx_buf     + 4);
S        len  = (CPU_INT16U)(rx_pkt_size - 4);
S        hndlr(pstr, len);
S    }
S
S
S
S                                                                /* ------------------ STORE RESPONSE ------------------ */
S                                                                /* Store TX pkt hdr :                                   */
S    ProbeCom_StoINT16U(&ptx_buf, PROBE_COM_FMT_TX_STR_WR);      /* (a) TX pkt format.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, PROBE_COM_STATUS_OK);          /* (b) Target status.                                   */
S    ProbeCom_StoINT8U( &ptx_buf, ProbeCom_PktModifier());       /* (c) Modifier.                                        */
S
S
S
S                                                                /* ------------------ RTN TX PKT SIZE ----------------- */
S    return ((CPU_INT16U)(PROBE_COM_SIZE_TX_HDR));               /* Tx pkt size = 4 (= Tx header size)                   */
S}
N#endif
N
N
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N**                                    STATIC BUFFER FUNCTIONS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                       ProbeCom_GetINT8U()
N*                                       ProbeCom_GetINT16U()
N*                                       ProbeCom_GetINT32U()
N*
N* Description : Retrieve data from a buffer and increment buffer pointer.
N*
N* Argument(s) : pbuf            The pointer to the buffer pointer.
N*
N* Return(s)   : A 8-, 16-, or 32-bit datum, respectively.
N*
N* Caller(s)   : various.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT08U  ProbeCom_GetINT8U (CPU_INT08U **pbuf)
N{
N    return (*((*pbuf)++));
N}
N
N
Nstatic  CPU_INT16U  ProbeCom_GetINT16U (CPU_INT08U **pbuf)
N{
N    CPU_INT16U  lowbyte;
N    CPU_INT16U  highbyte;
N
N
N    lowbyte  = ProbeCom_GetINT8U(pbuf);
N    highbyte = ProbeCom_GetINT8U(pbuf);
N    return ((CPU_INT16U)((CPU_INT16U)(highbyte << 8) | (CPU_INT16U)lowbyte));
N}
N
Nstatic  CPU_INT32U  ProbeCom_GetINT32U (CPU_INT08U **pbuf)
N{
N    CPU_INT32U  highword;
N    CPU_INT32U  lowword;
N
N
N    lowword  = ProbeCom_GetINT16U(pbuf);
N    highword = ProbeCom_GetINT16U(pbuf);
N    return ((CPU_INT32U)((highword << 16) | lowword));
N}
N
N
N/*
N*********************************************************************************************************
N*                                       ProbeCom_StoINT8U()
N*                                       ProbeCom_StoINT16U()
N*                                       ProbeCom_StoINT32U()
N*
N* Description : Store data into a buffer and increment the buffer pointer.
N*
N* Argument(s) : pbuf            The pointer to the buffer pointer.
N*
N*               data            A 8-, 16-, or 32-bit datum, respectively.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : various.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  void  ProbeCom_StoINT8U (CPU_INT08U **pbuf, CPU_INT08U data)
N{
N    *((*pbuf)++) = data;
N}
N
N
Nstatic  void  ProbeCom_StoINT16U (CPU_INT08U **pbuf, CPU_INT16U data)
N{
N    ProbeCom_StoINT8U(pbuf, (CPU_INT08U)(data & 0x00FF));
N    ProbeCom_StoINT8U(pbuf, (CPU_INT08U)(data >> 8));
N}
N
N
N#if 0
Sstatic  void  ProbeCom_StoINT32U (CPU_INT08U **pbuf, CPU_INT32U data)
S{
S    ProbeCom_StoINT16U(pbuf, (CPU_INT16U)(data & 0x0000FFFFL));
S    ProbeCom_StoINT16U(pbuf, (CPU_INT16U)(data >> 16));
S}
N#endif
