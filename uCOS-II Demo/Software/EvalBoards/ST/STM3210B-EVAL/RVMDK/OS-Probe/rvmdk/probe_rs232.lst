L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c"
N/*
N*********************************************************************************************************
N*                                         uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                                uC/Probe
N*
N*                                         Communication: RS-232
N*
N* Filename      : probe_rs232.c
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) The abbreviations RX and TX refer to communication from the target's perspective.
N*
N*                 (2) The abbreviations RD and WR refer to reading data from the target memory and
N*                     writing data to the target memory, respectively.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#define   PROBE_RS232_MODULE
N#include  <probe_com.h>
L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 1
N/*
N*********************************************************************************************************
N*                                      uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                                uC/Probe
N*
N*                                         Communication: Generic
N*
N* Filename      : probe_com.h
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) This file contains code to respond to generic (non protocol-dependent)
N*                     commands received by the target.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                                 MODULE
N*
N* Note(s) : (1) This header file is protected from multiple pre-processor inclusion through use of the
N*               PROBE_COM present pre-processor macro definition.
N*********************************************************************************************************
N*/
N
N#ifndef  PROBE_COM_PRESENT                                      /* See Note #1.                                         */
N#define  PROBE_COM_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                PROBE COMMUNICATION MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The Probe communication module software version is denoted as follows :
N*
N*                       Vx.yy
N*
N*                           where
N*                                  V     denotes 'Version' label
N*                                  x     denotes major software version revision number
N*                                  yy    denotes minor software version revision number
N*
N*               (b) The Probe communication module software version label #define is formatted as follows :
N*
N*                       ver = x.yy * 100
N*
N*                           where
N*                                  ver   denotes software version number scaled as
N*                                        an integer value
N*                                  x.yy  denotes software version number
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_VERSION         200u                         /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef    PROBE_COM_MODULE
S#define   PROBE_COM_EXT
N#else
N#define   PROBE_COM_EXT  extern
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                             INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
L 1 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                            CPU PORT FILE
N*
N*                                            ARM-Cortex-M3
N*                                      RealView Development Suite
N*                            RealView Microcontroller Development Kit (MDK)
N*                                       ARM Developer Suite (ADS)
N*                                            Keil uVision
N*
N* Filename      : cpu.h
N* Version       : V1.19
N* Programmer(s) : JJL
N*                 BAN
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_MODULE_PRESENT
N#define  CPU_CFG_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                          CPU INCLUDE FILES
N*
N* Note(s) : (1) The following CPU files are located in the following directories :
N*
N*               (a) \<CPU-Compiler Directory>\cpu_def.h
N*
N*               (b) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<CPU-Compiler Directory>\' directory & the
N*               specific CPU-compiler directory as additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu_def.h>
L 1 "..\..\..\..\..\uC-CPU\cpu_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      CPU CONFIGURATION DEFINES
N*
N* Filename      : cpu_def.h
N* Version       : V1.19
N* Programmer(s) : ITJ
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE in 'cpu.h' with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*               (b) Ideally, CPU_WORD_SIZE #define's would be calculated at compile-time through use of
N*                   the sizeof() operator.  However, some compilers do NOT allow pre-processor directives
N*                   to include run-time macro's -- e.g. 'sizeof()'.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE in 'cpu.h' with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                        /* ----------------------- CPU WORD SIZE ---------------------- */
N#define  CPU_WORD_SIZE_08                          1    /*  8-bit word size = sizeof(CPU_INT08x).                       */
N#define  CPU_WORD_SIZE_16                          2    /* 16-bit word size = sizeof(CPU_INT16x).                       */
N#define  CPU_WORD_SIZE_32                          4    /* 32-bit word size = sizeof(CPU_INT32x).                       */
N#define  CPU_WORD_SIZE_64                          8    /* 64-bit word size = sizeof(CPU_INT64x) [see Note #1a].        */
N
N
N                                                        /* ------------------- CPU WORD-ENDIAN ORDER ------------------ */
N#define  CPU_ENDIAN_TYPE_NONE                      0    /*                                                              */
N#define  CPU_ENDIAN_TYPE_BIG                       1    /* Big-   endian word order (CPU words' most  significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N#define  CPU_ENDIAN_TYPE_LITTLE                    2    /* Little-endian word order (CPU words' least significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type in 'cpu.h' with the appropriate-sized CPU data type large enough to
N*               completely store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
N                                                        /* --------------- CPU CRITICAL SECTION METHODS --------------- */
N#define  CPU_CRITICAL_METHOD_NONE                  0    /*                                                              */
N#define  CPU_CRITICAL_METHOD_INT_DIS_EN            1    /* DIS/EN       ints.                                           */
N#define  CPU_CRITICAL_METHOD_STATUS_STK            2    /* Push/Pop     int status onto stk.                            */
N#define  CPU_CRITICAL_METHOD_STATUS_LOCAL          3    /* Save/Restore int status to local var.                        */
N
L 74 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 2
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STANDARD DATA TYPES
N*
N* Note(s) : (1) Configure standard data types according to CPU-/compiler-specifications.
N*
N*           (2) (a) (1) 'CPU_FNCT_VOID' data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has no arguments.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_VOID  FnctName;
N*
N*                           FnctName();
N*
N*               (b) (1) 'CPU_FNCT_PTR'  data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has a single void
N*                       pointer argument.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_PTR   FnctName;
N*                           void          *pobj
N*
N*                           FnctName(pobj);
N*********************************************************************************************************
N*/
N
Ntypedef            void       CPU_VOID;
Ntypedef  unsigned  char       CPU_CHAR;                         /*  8-bit character                                     */
Ntypedef  unsigned  char       CPU_BOOLEAN;                      /*  8-bit boolean or logical                            */
Ntypedef  unsigned  char       CPU_INT08U;                       /*  8-bit unsigned integer                              */
Ntypedef    signed  char       CPU_INT08S;                       /*  8-bit   signed integer                              */
Ntypedef  unsigned  short      CPU_INT16U;                       /* 16-bit unsigned integer                              */
Ntypedef    signed  short      CPU_INT16S;                       /* 16-bit   signed integer                              */
Ntypedef  unsigned  int        CPU_INT32U;                       /* 32-bit unsigned integer                              */
Ntypedef    signed  int        CPU_INT32S;                       /* 32-bit   signed integer                              */
Ntypedef  unsigned  long long  CPU_INT64U;                       /* 64-bit unsigned integer                              */
Ntypedef    signed  long long  CPU_INT64S;                       /* 64-bit   signed integer                              */
N
Ntypedef            float      CPU_FP32;                         /* 32-bit floating point                                */
Ntypedef            double     CPU_FP64;                         /* 64-bit floating point                                */
N
N
Ntypedef            void     (*CPU_FNCT_VOID)(void);             /* See Note #2a.                                        */
Ntypedef            void     (*CPU_FNCT_PTR )(void *);           /* See Note #2b.                                        */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                                /* Define  CPU         word sizes (see Note #1) :       */
N#define  CPU_CFG_ADDR_SIZE              CPU_WORD_SIZE_32        /* Defines CPU address word size.                       */
N
N#define  CPU_CFG_DATA_SIZE              CPU_WORD_SIZE_32        /* Defines CPU data    word size.                       */
N#define  CPU_CFG_ENDIAN_TYPE            CPU_ENDIAN_TYPE_LITTLE  /* Defines CPU data    word-memory order.               */
N
N
N/*
N*********************************************************************************************************
N*                                 CONFIGURE CPU ADDRESS & DATA TYPES
N*********************************************************************************************************
N*/
N
N                                                                /* CPU address type based on address bus size.          */
N#if     (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_ADDR;
N#elif   (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_ADDR;
S#else
Stypedef  CPU_INT08U  CPU_ADDR;
N#endif
N
N                                                                /* CPU data    type based on data    bus size.          */
N#if     (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_DATA;
N#elif   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_DATA;
S#else
Stypedef  CPU_INT08U  CPU_DATA;
N#endif
N
N
Ntypedef  CPU_DATA    CPU_ALIGN;                                 /* Defines CPU data-word-alignment size.                */
Ntypedef  CPU_DATA    CPU_SIZE_T;                                /* Defines CPU standard 'size_t'   size.                */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type with the appropriate-sized CPU data type large enough to completely
N*               store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  CPU_SR;                                    /* Defines   CPU status register size (see Note #3).    */
N
N                                                                /* Configure CPU critical method      (see Note #1) :   */
N#define  CPU_CFG_CRITICAL_METHOD        CPU_CRITICAL_METHOD_STATUS_LOCAL
N
N#define  CPU_CRITICAL_ENTER()           { cpu_sr = CPU_SR_Save(); }
N#define  CPU_CRITICAL_EXIT()            { CPU_SR_Restore(cpu_sr); }
N
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid        CPU_IntDis       (void);
Nvoid        CPU_IntEn        (void);
N
Nvoid        CPU_IntSrcDis    (CPU_INT08U  pos);
Nvoid        CPU_IntSrcEn     (CPU_INT08U  pos);
NCPU_INT16S  CPU_IntSrcPrioGet(CPU_INT08U  pos);
Nvoid        CPU_IntSrcPrioSet(CPU_INT08U  pos,
N                              CPU_INT08U  prio);
N
NCPU_SR      CPU_SR_Save      (void);
Nvoid        CPU_SR_Restore   (CPU_SR      cpu_sr);
N
NCPU_INT32U  CPU_CntLeadZeros (CPU_INT32U  val);
NCPU_INT32U  CPU_RevBits      (CPU_INT32U  val);
N
Nvoid        CPU_WaitForInt   (void);
Nvoid        CPU_WaitForExcept(void);
N
Nvoid        CPU_BitBandClr   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
Nvoid        CPU_BitBandSet   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
N
N/*
N*********************************************************************************************************
N*                                           INTERRUPT SOURCES
N*********************************************************************************************************
N*/
N
N#define  CPU_INT_STK_PTR                                   0
N#define  CPU_INT_RESET                                     1
N#define  CPU_INT_NMI                                       2
N#define  CPU_INT_HFAULT                                    3
N#define  CPU_INT_MEM                                       4
N#define  CPU_INT_BUSFAULT                                  5
N#define  CPU_INT_USAGEFAULT                                6
N#define  CPU_INT_RSVD_07                                   7
N#define  CPU_INT_RSVD_08                                   8
N#define  CPU_INT_RSVD_09                                   9
N#define  CPU_INT_RSVD_10                                  10
N#define  CPU_INT_SVCALL                                   11
N#define  CPU_INT_DBGMON                                   12
N#define  CPU_INT_RSVD_13                                  13
N#define  CPU_INT_PENDSV                                   14
N#define  CPU_INT_SYSTICK                                  15
N
N
N/*
N*********************************************************************************************************
N*                                             CPU REGISTERS
N*********************************************************************************************************
N*/
N
N#define  CPU_REG_NVIC_NVIC              (*((volatile CPU_INT32U *)(0xE000E004))) /* Int Ctrl'er Type Reg.               */
N#define  CPU_REG_NVIC_ST_CTRL           (*((volatile CPU_INT32U *)(0xE000E010))) /* SysTick Ctrl & Status Reg.          */
N#define  CPU_REG_NVIC_ST_RELOAD         (*((volatile CPU_INT32U *)(0xE000E014))) /* SysTick Reload      Value Reg.      */
N#define  CPU_REG_NVIC_ST_CURRENT        (*((volatile CPU_INT32U *)(0xE000E018))) /* SysTick Current     Value Reg.      */
N#define  CPU_REG_NVIC_ST_CAL            (*((volatile CPU_INT32U *)(0xE000E01C))) /* SysTick Calibration Value Reg.      */
N                                                                                 /* IRQ Set En Reg.                     */
N#define  CPU_REG_NVIC_SETEN(n)          (*((volatile CPU_INT32U *)(0xE000E100 + (n) * 4)))
N                                                                                 /* IRQ Clr En Reg.                     */
N#define  CPU_REG_NVIC_CLREN(n)          (*((volatile CPU_INT32U *)(0xE000E180 + (n) * 4)))
N                                                                                 /* IRQ Set Pending Reg.                */
N#define  CPU_REG_NVIC_SETPEND(n)        (*((volatile CPU_INT32U *)(0xE000E200 + (n) * 4)))
N                                                                                 /* IRQ Clr Pending Reg.                */
N#define  CPU_REG_NVIC_CLRPEND(n)        (*((volatile CPU_INT32U *)(0xE000E280 + (n) * 4)))
N                                                                                 /* IRQ Active Reg.                     */
N#define  CPU_REG_NVIC_ACTIVE(n)         (*((volatile CPU_INT32U *)(0xE000E300 + (n) * 4)))
N                                                                                 /* IRQ Prio Reg.                       */
N#define  CPU_REG_NVIC_PRIO(n)           (*((volatile CPU_INT32U *)(0xE000E400 + (n) * 4)))
N
N#define  CPU_REG_NVIC_CPUID             (*((volatile CPU_INT32U *)(0xE000ED00))) /* CPUID Base Reg.                     */
N#define  CPU_REG_NVIC_ICSR              (*((volatile CPU_INT32U *)(0xE000ED04))) /* Int Ctrl State  Reg.                */
N#define  CPU_REG_NVIC_VTOR              (*((volatile CPU_INT32U *)(0xE000ED08))) /* Vect Tbl Offset Reg.                */
N#define  CPU_REG_NVIC_AIRCR             (*((volatile CPU_INT32U *)(0xE000ED0C))) /* App Int/Reset Ctrl Reg.             */
N#define  CPU_REG_NVIC_SCR               (*((volatile CPU_INT32U *)(0xE000ED10))) /* System Ctrl Reg.                    */
N#define  CPU_REG_NVIC_CCR               (*((volatile CPU_INT32U *)(0xE000ED14))) /* Cfg    Ctrl Reg.                    */
N#define  CPU_REG_NVIC_SHPRI1            (*((volatile CPU_INT32U *)(0xE000ED18))) /* System Handlers  4 to  7 Prio.      */
N#define  CPU_REG_NVIC_SHPRI2            (*((volatile CPU_INT32U *)(0xE000ED1C))) /* System Handlers  8 to 11 Prio.      */
N#define  CPU_REG_NVIC_SHPRI3            (*((volatile CPU_INT32U *)(0xE000ED20))) /* System Handlers 12 to 15 Prio.      */
N#define  CPU_REG_NVIC_SHCSR             (*((volatile CPU_INT32U *)(0xE000ED24))) /* System Handler Ctrl & State Reg.    */
N#define  CPU_REG_NVIC_CFSR              (*((volatile CPU_INT32U *)(0xE000ED28))) /* Configurable Fault Status Reg.      */
N#define  CPU_REG_NVIC_HFSR              (*((volatile CPU_INT32U *)(0xE000ED2C))) /* Hard  Fault Status Reg.             */
N#define  CPU_REG_NVIC_DFSR              (*((volatile CPU_INT32U *)(0xE000ED30))) /* Debug Fault Status Reg.             */
N#define  CPU_REG_NVIC_MMFAR             (*((volatile CPU_INT32U *)(0xE000ED34))) /* Mem Manage Addr Reg.                */
N#define  CPU_REG_NVIC_BFAR              (*((volatile CPU_INT32U *)(0xE000ED38))) /* Bus Fault  Addr Reg.                */
N#define  CPU_REG_NVIC_AFSR              (*((volatile CPU_INT32U *)(0xE000ED3C))) /* Aux Fault Status Reg.               */
N
N#define  CPU_REG_NVIC_PFR0              (*((volatile CPU_INT32U *)(0xE000ED40))) /* Processor Feature Reg 0.            */
N#define  CPU_REG_NVIC_PFR1              (*((volatile CPU_INT32U *)(0xE000ED44))) /* Processor Feature Reg 1.            */
N#define  CPU_REG_NVIC_DFR0              (*((volatile CPU_INT32U *)(0xE000ED48))) /* Debug     Feature Reg 0.            */
N#define  CPU_REG_NVIC_AFR0              (*((volatile CPU_INT32U *)(0xE000ED4C))) /* Aux       Feature Reg 0.            */
N#define  CPU_REG_NVIC_MMFR0             (*((volatile CPU_INT32U *)(0xE000ED50))) /* Memory Model Feature Reg 0.         */
N#define  CPU_REG_NVIC_MMFR1             (*((volatile CPU_INT32U *)(0xE000ED54))) /* Memory Model Feature Reg 1.         */
N#define  CPU_REG_NVIC_MMFR2             (*((volatile CPU_INT32U *)(0xE000ED58))) /* Memory Model Feature Reg 2.         */
N#define  CPU_REG_NVIC_MMFR3             (*((volatile CPU_INT32U *)(0xE000ED5C))) /* Memory Model Feature Reg 3.         */
N#define  CPU_REG_NVIC_ISAFR0            (*((volatile CPU_INT32U *)(0xE000ED60))) /* ISA Feature Reg 0.                  */
N#define  CPU_REG_NVIC_ISAFR1            (*((volatile CPU_INT32U *)(0xE000ED64))) /* ISA Feature Reg 1.                  */
N#define  CPU_REG_NVIC_ISAFR2            (*((volatile CPU_INT32U *)(0xE000ED68))) /* ISA Feature Reg 2.                  */
N#define  CPU_REG_NVIC_ISAFR3            (*((volatile CPU_INT32U *)(0xE000ED6C))) /* ISA Feature Reg 3.                  */
N#define  CPU_REG_NVIC_ISAFR4            (*((volatile CPU_INT32U *)(0xE000ED70))) /* ISA Feature Reg 4.                  */
N#define  CPU_REG_NVIC_SW_TRIG           (*((volatile CPU_INT32U *)(0xE000EF00))) /* Software Trigger Int Reg.           */
N
N#define  CPU_REG_MPU_TYPE               (*((volatile CPU_INT32U *)(0xE000ED90))) /* MPU Type Reg.                       */
N#define  CPU_REG_MPU_CTRL               (*((volatile CPU_INT32U *)(0xE000ED94))) /* MPU Ctrl Reg.                       */
N#define  CPU_REG_MPU_REG_NBR            (*((volatile CPU_INT32U *)(0xE000ED98))) /* MPU Region Nbr Reg.                 */
N#define  CPU_REG_MPU_REG_BASE           (*((volatile CPU_INT32U *)(0xE000ED9C))) /* MPU Region Base Addr Reg.           */
N#define  CPU_REG_MPU_REG_ATTR           (*((volatile CPU_INT32U *)(0xE000EDA0))) /* MPU Region Attrib & Size Reg.       */
N
N#define  CPU_REG_DBG_CTRL               (*((volatile CPU_INT32U *)(0xE000EDF0))) /* Debug Halting Ctrl & Status Reg.    */
N#define  CPU_REG_DBG_SELECT             (*((volatile CPU_INT32U *)(0xE000EDF4))) /* Debug Core Reg Selector Reg.        */
N#define  CPU_REG_DBG_DATA               (*((volatile CPU_INT32U *)(0xE000EDF8))) /* Debug Core Reg Data     Reg.        */
N#define  CPU_REG_DBG_INT                (*((volatile CPU_INT32U *)(0xE000EDFC))) /* Debug Except & Monitor Ctrl Reg.    */
N
N/*
N*********************************************************************************************************
N*                                          CPU REGISTER BITS
N*********************************************************************************************************
N*/
N
N                                                                /* ---------- SYSTICK CTRL & STATUS REG BITS ---------- */
N#define  CPU_REG_NVIC_ST_CTRL_COUNTFLAG         DEF_BIT_16
N#define  CPU_REG_NVIC_ST_CTRL_CLKSOURCE         DEF_BIT_02
N#define  CPU_REG_NVIC_ST_CTRL_TICKINT           DEF_BIT_01
N#define  CPU_REG_NVIC_ST_CTRL_ENABLE            DEF_BIT_00
N
N
N                                                                /* -------- SYSTICK CALIBRATION VALUE REG BITS -------- */
N#define  CPU_REG_NVIC_ST_CAL_NOREF              DEF_BIT_31
N#define  CPU_REG_NVIC_ST_CAL_SKEW               DEF_BIT_30
N
N                                                                /* -------------- INT CTRL STATE REG BITS ------------- */
N#define  CPU_REG_NVIC_ICSR_NMIPENDSET           DEF_BIT_31
N#define  CPU_REG_NVIC_ICSR_PENDSVSET            DEF_BIT_28
N#define  CPU_REG_NVIC_ICSR_PENDSVCLR            DEF_BIT_27
N#define  CPU_REG_NVIC_ICSR_PENDSTSET            DEF_BIT_26
N#define  CPU_REG_NVIC_ICSR_PENDSTCLR            DEF_BIT_25
N#define  CPU_REG_NVIC_ICSR_ISRPREEMPT           DEF_BIT_23
N#define  CPU_REG_NVIC_ICSR_ISRPENDING           DEF_BIT_22
N#define  CPU_REG_NVIC_ICSR_RETTOBASE            DEF_BIT_11
N
N                                                                /* ------------- VECT TBL OFFSET REG BITS ------------- */
N#define  CPU_REG_NVIC_VTOR_TBLBASE              DEF_BIT_29
N
N                                                                /* ------------ APP INT/RESET CTRL REG BITS ----------- */
N#define  CPU_REG_NVIC_AIRCR_ENDIANNESS          DEF_BIT_15
N#define  CPU_REG_NVIC_AIRCR_SYSRESETREQ         DEF_BIT_02
N#define  CPU_REG_NVIC_AIRCR_VECTCLRACTIVE       DEF_BIT_01
N#define  CPU_REG_NVIC_AIRCR_VECTRESET           DEF_BIT_00
N
N                                                                /* --------------- SYSTEM CTRL REG BITS --------------- */
N#define  CPU_REG_NVIC_SCR_SEVONPEND             DEF_BIT_04
N#define  CPU_REG_NVIC_SCR_SLEEPDEEP             DEF_BIT_02
N#define  CPU_REG_NVIC_SCR_SLEEPONEXIT           DEF_BIT_01
N
N                                                                /* ----------------- CFG CTRL REG BITS ---------------- */
N#define  CPU_REG_NVIC_CCR_STKALIGN              DEF_BIT_09
N#define  CPU_REG_NVIC_CCR_BFHFNMIGN             DEF_BIT_08
N#define  CPU_REG_NVIC_CCR_DIV_0_TRP             DEF_BIT_04
N#define  CPU_REG_NVIC_CCR_UNALIGN_TRP           DEF_BIT_03
N#define  CPU_REG_NVIC_CCR_USERSETMPEND          DEF_BIT_01
N#define  CPU_REG_NVIC_CCR_NONBASETHRDENA        DEF_BIT_00
N
N                                                                /* ------- SYSTEM HANDLER CTRL & STATE REG BITS ------- */
N#define  CPU_REG_NVIC_SHCSR_USGFAULTENA         DEF_BIT_18
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTENA         DEF_BIT_17
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTENA         DEF_BIT_16
N#define  CPU_REG_NVIC_SHCSR_SVCALLPENDED        DEF_BIT_15
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTPENDED      DEF_BIT_14
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTPENDED      DEF_BIT_13
N#define  CPU_REG_NVIC_SHCSR_USGFAULTPENDED      DEF_BIT_12
N#define  CPU_REG_NVIC_SHCSR_SYSTICKACT          DEF_BIT_11
N#define  CPU_REG_NVIC_SHCSR_PENDSVACT           DEF_BIT_10
N#define  CPU_REG_NVIC_SHCSR_MONITORACT          DEF_BIT_08
N#define  CPU_REG_NVIC_SHCSR_SVCALLACT           DEF_BIT_07
N#define  CPU_REG_NVIC_SHCSR_USGFAULTACT         DEF_BIT_03
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTACT         DEF_BIT_01
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTACT         DEF_BIT_00
N
N                                                                /* -------- CONFIGURABLE FAULT STATUS REG BITS -------- */
N#define  CPU_REG_NVIC_CFSR_DIVBYZERO            DEF_BIT_25
N#define  CPU_REG_NVIC_CFSR_UNALIGNED            DEF_BIT_24
N#define  CPU_REG_NVIC_CFSR_NOCP                 DEF_BIT_19
N#define  CPU_REG_NVIC_CFSR_INVPC                DEF_BIT_18
N#define  CPU_REG_NVIC_CFSR_INVSTATE             DEF_BIT_17
N#define  CPU_REG_NVIC_CFSR_UNDEFINSTR           DEF_BIT_16
N#define  CPU_REG_NVIC_CFSR_BFARVALID            DEF_BIT_15
N#define  CPU_REG_NVIC_CFSR_STKERR               DEF_BIT_12
N#define  CPU_REG_NVIC_CFSR_UNSTKERR             DEF_BIT_11
N#define  CPU_REG_NVIC_CFSR_IMPRECISERR          DEF_BIT_10
N#define  CPU_REG_NVIC_CFSR_PRECISERR            DEF_BIT_09
N#define  CPU_REG_NVIC_CFSR_IBUSERR              DEF_BIT_08
N#define  CPU_REG_NVIC_CFSR_MMARVALID            DEF_BIT_07
N#define  CPU_REG_NVIC_CFSR_MSTKERR              DEF_BIT_04
N#define  CPU_REG_NVIC_CFSR_MUNSTKERR            DEF_BIT_03
N#define  CPU_REG_NVIC_CFSR_DACCVIOL             DEF_BIT_01
N#define  CPU_REG_NVIC_CFSR_IACCVIOL             DEF_BIT_00
N
N                                                                /* ------------ HARD FAULT STATUS REG BITS ------------ */
N#define  CPU_REG_NVIC_HFSR_DEBUGEVT             DEF_BIT_31
N#define  CPU_REG_NVIC_HFSR_FORCED               DEF_BIT_30
N#define  CPU_REG_NVIC_HFSR_VECTTBL              DEF_BIT_01
N
N                                                                /* ------------ DEBUG FAULT STATUS REG BITS ----------- */
N#define  CPU_REG_NVIC_DFSR_EXTERNAL             DEF_BIT_04
N#define  CPU_REG_NVIC_DFSR_VCATCH               DEF_BIT_03
N#define  CPU_REG_NVIC_DFSR_DWTTRAP              DEF_BIT_02
N#define  CPU_REG_NVIC_DFSR_BKPT                 DEF_BIT_01
N#define  CPU_REG_NVIC_DFSR_HALTED               DEF_BIT_00
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef   CPU_CFG_ADDR_SIZE
S#error   "CPU_CFG_ADDR_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_ADDR_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N#ifndef   CPU_CFG_DATA_SIZE
S#error   "CPU_CFG_DATA_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_DATA_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N
N#ifndef   CPU_CFG_ENDIAN_TYPE
S#error   "CPU_CFG_ENDIAN_TYPE            not #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
S
S#elif   ((CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_BIG   ) && \
S         (CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_LITTLE))
X#elif   ((2 != 1   ) &&          (2 != 2))
S#error   "CPU_CFG_ENDIAN_TYPE      illegally #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
N#endif
N
N
N
N
N#ifndef   CPU_CFG_CRITICAL_METHOD
S#error   "CPU_CFG_CRITICAL_METHOD        not #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
S
S#elif   ((CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_INT_DIS_EN  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_STK  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_LOCAL))
X#elif   ((3 != 1  ) &&          (3 != 2  ) &&          (3 != 3))
S#error   "CPU_CFG_CRITICAL_METHOD  illegally #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU cfg module inclusion.                     */
L 89 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#include  <lib_def.h>
L 1 "..\..\..\..\..\uC-LIB\lib_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     CORE CUSTOM LIBRARY MODULE
N*
N* Filename      : lib_def.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_DEF_MODULE_PRESENT
N#define  LIB_DEF_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                CUSTOM LIBRARY MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The custom library module software version is denoted as follows :
N*
N*                       Vx.yy
N*
N*                           where
N*                                   V               denotes 'Version' label
N*                                   x               denotes major software version revision number
N*                                   yy              denotes minor software version revision number
N*
N*               (b) The software version label #define is formatted as follows :
N*
N*                       ver = x.yy * 100
N*
N*                           where
N*                                   ver             denotes software version number scaled as an integer value
N*                                   x.yy            denotes software version number
N*********************************************************************************************************
N*/
N
N#define  LIB_VERSION                                     124u   /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as 
N*               additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          STANDARD DEFINES
N*********************************************************************************************************
N*/
N
N
N#define  DEF_DISABLED                                      0
N#define  DEF_ENABLED                                       1
N
N#define  DEF_FALSE                                         0
N#define  DEF_TRUE                                          1
N
N#define  DEF_NO                                            0
N#define  DEF_YES                                           1
N
N#define  DEF_OFF                                           0
N#define  DEF_ON                                            1
N
N#define  DEF_CLR                                           0
N#define  DEF_SET                                           1
N
N#define  DEF_ACTIVE                                        0
N#define  DEF_INACTIVE                                      1
N
N#define  DEF_FAIL                                          0
N#define  DEF_OK                                            1
N
N
N                                                                /* -------------------- BIT DEFINES ------------------- */
N#define  DEF_BIT_NONE                                   0x00
N
N#define  DEF_BIT_00                                     0x01
N#define  DEF_BIT_01                                     0x02
N#define  DEF_BIT_02                                     0x04
N#define  DEF_BIT_03                                     0x08
N#define  DEF_BIT_04                                     0x10
N#define  DEF_BIT_05                                     0x20
N#define  DEF_BIT_06                                     0x40
N#define  DEF_BIT_07                                     0x80
N
N#define  DEF_BIT_08                                   0x0100
N#define  DEF_BIT_09                                   0x0200
N#define  DEF_BIT_10                                   0x0400
N#define  DEF_BIT_11                                   0x0800
N#define  DEF_BIT_12                                   0x1000
N#define  DEF_BIT_13                                   0x2000
N#define  DEF_BIT_14                                   0x4000
N#define  DEF_BIT_15                                   0x8000
N
N#define  DEF_BIT_16                               0x00010000
N#define  DEF_BIT_17                               0x00020000
N#define  DEF_BIT_18                               0x00040000
N#define  DEF_BIT_19                               0x00080000
N#define  DEF_BIT_20                               0x00100000
N#define  DEF_BIT_21                               0x00200000
N#define  DEF_BIT_22                               0x00400000
N#define  DEF_BIT_23                               0x00800000
N
N#define  DEF_BIT_24                               0x01000000
N#define  DEF_BIT_25                               0x02000000
N#define  DEF_BIT_26                               0x04000000
N#define  DEF_BIT_27                               0x08000000
N#define  DEF_BIT_28                               0x10000000
N#define  DEF_BIT_29                               0x20000000
N#define  DEF_BIT_30                               0x40000000
N#define  DEF_BIT_31                               0x80000000
N
N                                                                /* ------------------- OCTET DEFINES ------------------ */
N#define  DEF_OCTET_NBR_BITS                                8
N#define  DEF_OCTET_MASK                                 0xFF
N
N#define  DEF_NIBBLE_NBR_BITS                               4
N#define  DEF_NIBBLE_MASK                                0x0F
N
N
N/*$PAGE*/
N                                                                /* ------------------ INTEGER DEFINES ----------------- */
N#define  DEF_INT_08_NBR_BITS                               8
N#define  DEF_INT_08_MASK                                0xFF
N                                                            
N#define  DEF_INT_08U_MIN_VAL                               0u
N#define  DEF_INT_08U_MAX_VAL                             255u
N
N#define  DEF_INT_08S_MIN_VAL                            -128
N#define  DEF_INT_08S_MAX_VAL                             127
N
N#define  DEF_INT_08S_MIN_VAL_ONES_CPL                   -127
N#define  DEF_INT_08S_MAX_VAL_ONES_CPL                    127
N
N
N#define  DEF_INT_16_NBR_BITS                              16
N#define  DEF_INT_16_MASK                              0xFFFF
N                                                            
N#define  DEF_INT_16U_MIN_VAL                               0u
N#define  DEF_INT_16U_MAX_VAL                           65535u
N
N#define  DEF_INT_16S_MIN_VAL                          -32768
N#define  DEF_INT_16S_MAX_VAL                           32767
N
N#define  DEF_INT_16S_MIN_VAL_ONES_CPL                 -32767
N#define  DEF_INT_16S_MAX_VAL_ONES_CPL                  32767
N
N
N#define  DEF_INT_32_NBR_BITS                              32
N#define  DEF_INT_32_MASK                          0xFFFFFFFF
N                                                            
N#define  DEF_INT_32U_MIN_VAL                               0u
N#define  DEF_INT_32U_MAX_VAL                      4294967295u
N
N#define  DEF_INT_32S_MIN_VAL                     -2147483648
N#define  DEF_INT_32S_MAX_VAL                      2147483647
N
N#define  DEF_INT_32S_MIN_VAL_ONES_CPL            -2147483647
N#define  DEF_INT_32S_MAX_VAL_ONES_CPL             2147483647
N
N
N#define  DEF_INT_64_NBR_BITS                              64
N#define  DEF_INT_64_MASK                  0xFFFFFFFFFFFFFFFF
N                                                            
N#define  DEF_INT_64U_MIN_VAL                               0u
N#define  DEF_INT_64U_MAX_VAL            18446744073709551615u
N
N#define  DEF_INT_64S_MIN_VAL            -9223372036854775808
N#define  DEF_INT_64S_MAX_VAL             9223372036854775807
N
N#define  DEF_INT_64S_MIN_VAL_ONES_CPL   -9223372036854775807
N#define  DEF_INT_64S_MAX_VAL_ONES_CPL    9223372036854775807
N
N
N/*$PAGE*/
N                                                                /* ---------------- CPU INTEGER DEFINES --------------- */
N#define  DEF_INT_CPU_NBR_BITS                           (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS)
N
N
N#if     (DEF_INT_CPU_NBR_BITS == DEF_INT_08_NBR_BITS)
X#if     ((4 * 8) == 8)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_08_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_08U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_08U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_08S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_08S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_08S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_08S_MAX_VAL_ONES_CPL
S
S
S#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_16_NBR_BITS)
X#elif   ((4 * 8) == 16)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_16_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_16U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_16U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_16S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_16S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_16S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_16S_MAX_VAL_ONES_CPL
S
S
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_32_NBR_BITS)
X#elif   ((4 * 8) == 32)
N
N#define  DEF_INT_CPU_MASK                                DEF_INT_32_MASK
N                                                    
N#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_32U_MIN_VAL
N#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_32U_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_32S_MIN_VAL
N#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_32S_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_32S_MIN_VAL_ONES_CPL
N#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_32S_MAX_VAL_ONES_CPL
N
N
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_64_NBR_BITS)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_64_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_64U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_64U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_64S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_64S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_64S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_64S_MAX_VAL_ONES_CPL
S                                                      
S
S#else
S
S#error  "CPU_CFG_DATA_SIZE  illegally #defined in 'cpu.h'      "
S#error  "                   [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N                                                                /* ------------------- TIME DEFINES ------------------- */
N#define  DEF_TIME_NBR_HR_PER_DAY                          24uL
N
N#define  DEF_TIME_NBR_MIN_PER_HR                          60uL
N#define  DEF_TIME_NBR_MIN_PER_DAY                       (DEF_TIME_NBR_MIN_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_SEC_PER_MIN                         60uL
N#define  DEF_TIME_NBR_SEC_PER_HR                        (DEF_TIME_NBR_SEC_PER_MIN * DEF_TIME_NBR_MIN_PER_HR)
N#define  DEF_TIME_NBR_SEC_PER_DAY                       (DEF_TIME_NBR_SEC_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_mS_PER_SEC                        1000uL
N#define  DEF_TIME_NBR_uS_PER_SEC                     1000000uL
N#define  DEF_TIME_NBR_nS_PER_SEC                  1000000000uL
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*
N* Note(s) : (1) All generic library error codes are #define'd in 'lib_def.h';
N*               Any module-specific error codes are #define'd in library module header files.
N*********************************************************************************************************
N*/
N
N#define  LIB_ERR_NONE                                      0
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U  LIB_ERR;
N
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             BIT MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_BIT()
N*
N* Description : Create bit mask with single, specified bit set.
N*
N* Argument(s) : bit         Bit number of bit to set.
N*
N* Return(s)   : Bit mask with single, specified bit set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT(bit)                            (1u << (bit))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_MASK()
N*
N* Description : Shift a bit mask.
N*
N* Argument(s) : bit_mask    Bit mask to shift.
N*
N*               bit_shift   Number of bit positions to left-shift bit mask.
N*
N* Return(s)   : Shifted bit mask.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_shift' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_MASK(bit_mask, bit_shift)             ((bit_mask)       << (bit_shift))
N
N
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_FIELD()
N*
N* Description : Create & shift a contiguous bit field.
N*
N* Argument(s) : bit_field   Number of contiguous bits to set in the bit field.
N*
N*               bit_shift   Number of bit positions   to left-shift bit field.
N*
N* Return(s)   : Shifted bit field.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_field'/'bit_shift' values that overflow the target CPU &/or compiler environment 
N*                   (e.g. negative or greater-than-CPU-data-size values) MAY generate compiler warnings
N*                   &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)   \
N                                                                                             : (DEF_BIT(bit_field) - 1)) \
N                                                                                                    << (bit_shift))
X#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)                                                                                                : (DEF_BIT(bit_field) - 1))                                                                                                     << (bit_shift))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_SET()
N*
N* Description : Set specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by setting specified bit(s).
N*
N*               mask        Mask of bits to set.
N*
N* Return(s)   : Modified value with specified bit(s) set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_SET(val, mask)                       { (val) |=  (mask); }
N
N
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_CLR()
N*
N* Description : Clear specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by clearing specified bit(s).
N*
N*               mask        Mask of bits to clear.
N*
N* Return(s)   : Modified value with specified bit(s) clear.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_CLR(val, mask)                       { (val) &= ~(mask); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_SET()
N*
N* Description : Determine if specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET(val, mask)                   ((((val) & (mask)) == (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_CLR()
N*
N* Description : Determine if specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR(val, mask)                    (((val) & (mask))            ? (DEF_NO ) : (DEF_YES))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_SET_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET_ANY(val, mask)                (((val) & (mask))            ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_CLR_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR_ANY(val, mask)               ((((val) & (mask)) != (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            MATH MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_MIN()
N*
N* Description : Determine the minimum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Minimum of the two values.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MIN(a, b)                                  (((a) < (b)) ? (a) : (b))
N
N
N/*
N*********************************************************************************************************
N*                                              DEF_MAX()
N*
N* Description : Determine the maximum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Maximum of the two values.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MAX(a, b)                                  (((a) > (b)) ? (a) : (b))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              DEF_ABS()
N*
N* Description : Determine the absolute value of a value.
N*
N* Argument(s) : a           Value to calculate absolute value.
N*
N* Return(s)   : Absolute value of the value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_ABS(a)                                     (((a) < 0) ? (-(a)) : (a))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib def module include.                       */
N
L 91 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N#include  <lib_mem.h>
L 1 "..\..\..\..\..\uC-LIB\lib_mem.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     STANDARD MEMORY OPERATIONS
N*
N* Filename      : lib_mem.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_MODULE_PRESENT
N#define  LIB_MEM_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as
N*               additional include path directories.
N*
N*           (3) NO compiler-supplied standard library functions SHOULD be used.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N#include  <lib_def.h>
N#include  <app_cfg.h>
L 1 ".\app_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                              EXAMPLE CODE
N*
N*                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      APPLICATION CONFIGURATION
N*
N*                                     ST Microelectronics STM32
N*                                              with the
N*                                   STM3210B-EVAL Evaluation Board
N*
N* Filename      : app_cfg.h
N* Version       : V1.10
N* Programmer(s) : BAN
N*********************************************************************************************************
N*/
N
N#ifndef  __APP_CFG_H__
N#define  __APP_CFG_H__
N
N/*
N*********************************************************************************************************
N*                                       MODULE ENABLE / DISABLE
N*********************************************************************************************************
N*/
N
N#define  APP_OS_PROBE_EN                         DEF_ENABLED
N#define  APP_PROBE_COM_EN                        DEF_ENABLED
N
N/*
N*********************************************************************************************************
N*                                              TASKS NAMES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            TASK PRIORITIES
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_PRIO                               3
N#define  APP_TASK_KBD_PRIO                                 12
N
N#define  APP_TASK_USER_IF_PRIO                            13
N
N#define  OS_PROBE_TASK_PRIO              (OS_LOWEST_PRIO - 3)
N#define  OS_TASK_TMR_PRIO                (OS_LOWEST_PRIO - 2)
N
N/*
N*********************************************************************************************************
N*                                            TASK STACK SIZES
N*                             Size of the task stacks (# of OS_STK entries)
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_STK_SIZE                         128
N#define  APP_TASK_KBD_STK_SIZE                           128
N
N#define  APP_TASK_USER_IF_STK_SIZE                       256
N
N#define  OS_PROBE_TASK_STK_SIZE                          128
N
N/*
N*********************************************************************************************************
N*                                                  LIB
N*********************************************************************************************************
N*/
N
N#define  uC_CFG_OPTIMIZE_ASM_EN                 DEF_ENABLED
N#define  LIB_STR_CFG_FP_EN                      DEF_DISABLED
N
N/*
N*********************************************************************************************************
N*                                                 PROBE
N*********************************************************************************************************
N*/
N
N#define  OS_PROBE_TASK                                     1    /* Task will be created for uC/Probe OS Plug-In.        */
N#define  OS_PROBE_TMR_32_BITS                              0    /* uC/Probe OS Plugin timer is a 16-bit timer.          */
N#define  OS_PROBE_TIMER_SEL                                2    /* Select timer 2.                                      */
N#define  OS_PROBE_HOOKS_EN                                 1    /* Hooks to update OS_TCB profiling members included.   */
N#define  OS_PROBE_USE_FP                                   1
N
N
N
N
N#endif
L 91 "..\..\..\..\..\uC-LIB\lib_mem.h" 2
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef   LIB_MEM_MODULE
S#define  LIB_MEM_EXT
N#else
N#define  LIB_MEM_EXT  extern
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEFAULT CONFIGURATION
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                             MEMORY LIBRARY ARGUMENT CHECK CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_ARG_CHK_EXT_EN to enable/disable the memory libray suite external
N*               argument check feature :
N*
N*               (a) When ENABLED,      arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*
N*               (b) When DISABLED, NO  arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*********************************************************************************************************
N*/
N                                                        /* Configure external argument check feature (see Note #1) :    */
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
N#define  LIB_MEM_CFG_ARG_CHK_EXT_EN     DEF_DISABLED
N                                                        /*   DEF_DISABLED     Argument check DISABLED                   */
N                                                        /*   DEF_ENABLED      Argument check ENABLED                    */
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_POOL_EN to enable/disable memory pool functions.
N*********************************************************************************************************
N*/
N                                                        /* Configure memory pool feature (see Note #1) :                */
N#ifndef  LIB_MEM_CFG_POOL_EN
N#define  LIB_MEM_CFG_POOL_EN            DEF_DISABLED
N                                                        /*   DEF_DISABLED     Memory pool(s) DISABLED                   */
N                                                        /*   DEF_ENABLED      Memory pool(s) ENABLED                    */
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                               DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      LIBRARY MEMORY ERROR CODES
N*********************************************************************************************************
N*/
N
N#define  LIB_MEM_ERR_NONE                              10000
N#define  LIB_MEM_ERR_NULL_PTR                          10001    /* Ptr arg(s) passed NULL ptr(s).                       */
N#define  LIB_MEM_ERR_NONE_AVAIL                        10010    /* NO avail mem rsrc's.                                 */
N
N#define  LIB_MEM_ERR_INVALID_SEG_SIZE                  10100    /* Invalid mem seg size.                                */
N#define  LIB_MEM_ERR_INVALID_SEG_OVERLAP               10101    /* Invalid mem seg overlaps other mem seg(s).           */
N#define  LIB_MEM_ERR_INVALID_POOL                      10102    /* Invalid mem pool.                                    */
N#define  LIB_MEM_ERR_INVALID_ADDR                      10103    /* Invalid mem pool addr.                               */
N#define  LIB_MEM_ERR_INVALID_BLK_NBR                   10104    /* Invalid mem pool blk nbr.                            */
N#define  LIB_MEM_ERR_INVALID_BLK_SIZE                  10105    /* Invalid mem pool blk size.                           */
N#define  LIB_MEM_ERR_INVALID_BLK_IX                    10106    /* Invalid mem pool ix.                                 */
N
N#define  LIB_MEM_ERR_SEG_EMPTY                         10110    /* Mem seg  empty; i.e. NO avail mem for mem pools.     */
N#define  LIB_MEM_ERR_POOL_FULL                         10111    /* Mem pool full;  i.e. All mem blks avail in mem pool. */
N
N#define  LIB_MEM_ERR_HEAP_NOT_FOUND                    10115    /* Heap seg NOT found.                                  */
N#define  LIB_MEM_ERR_HEAP_EMPTY                        10116    /* Heap seg empty; i.e. NO avail mem in heap.           */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     MEMORY LIBRARY TYPE DEFINES
N*
N* Note(s) : (1) LIB_MEM_TYPE_??? #define values specifically chosen as ASCII representations of the memory
N*               library types.  Memory displays of memory library objects will display the library TYPEs
N*               with their chosen ASCII names.
N**********************************************************************************************************/
N
N                                                                /* ------------------- LIB_MEM TYPES ------------------ */
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#else
N
N#if     (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_32)
X#if     (4   == 4)
N#define  LIB_MEM_TYPE_NONE                        0x454E4F4E    /* "NONE" in ASCII.                                     */
N#define  LIB_MEM_TYPE_HEAP                        0x50414548    /* "HEAP" in ASCII.                                     */
N#define  LIB_MEM_TYPE_POOL                        0x4C4F4F50    /* "POOL" in ASCII.                                     */
N
N#elif   (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_16)
S#define  LIB_MEM_TYPE_NONE                        0x4F4E454E    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x45485041    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x4F504C4F    /* "POOL" in ASCII.                                     */
S
S#else                                                           /* Dflt CPU_WORD_SIZE_08.                               */
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#endif
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            LIB MEM TYPE
N*
N* Note(s) : (1) 'LIB_MEM_TYPE' declared as 'CPU_INT32U' & all 'LIB_MEM_TYPE's #define'd with large, non-trivial
N*               values to trap & discard invalid/corrupted library memory objects based on 'LIB_MEM_TYPE'.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  LIB_MEM_TYPE;
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL TABLE IX TYPE
N*
N* Note(s) : (1) MEM_POOL_IX_NONE  SHOULD be #define'd based on 'MEM_POOL_IX' data type declared.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U   MEM_POOL_IX;
N
N#define  MEM_POOL_IX_NONE                DEF_INT_16U_MAX_VAL    /* Define as max unsigned val (see Note #1).            */
N#define  MEM_POOL_IX_MIN                                   1
N#define  MEM_POOL_IX_MAX               (MEM_POOL_IX_NONE - 1)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        MEMORY POOL DATA TYPES
N*
N*                                                                      MEMORY SEGMENT
N*                                                                     ----------------
N*                                            MEMORY POOL'S            |              | <----
N*                                             POINTERS TO             |    MEMORY    |     |
N*                    MEM_POOL                MEMORY BLOCKS            |    BLOCKS    |     |
N*               |----------------|            |---------|             |   --------   |     |
N*               |        O------------------> |    O--------------------> |      |   |     |
N*               |----------------|            |---------|             |   |      |   |     |
N*               | Pool Addr Ptrs |            |    O-------------     |   --------   |     |
N*               | Pool Size      |            |---------|       |     |              |     |
N*               |----------------|            |         |       |     |   --------   |     |
N*               |    Blk Size    |            |         |       --------> |      |   |     |
N*               |    Blk Nbr     |            |         |             |   |      |   |     |
N*               |    Blk Ix      |            |    .    |             |   --------   |     |
N*               |----------------|            |    .    |             |              |     |
N*               |----------------|            |    .    |             |      .       |     |
N*               |        O-----------------   |         |             |      .       |     |
N*               |----------------|        |   |         |             |      .       |     |
N*               |        O------------    |   |         |             |              |     |
N*               |----------------|   |    |   |---------|             |   --------   |     |
N*               |  Seg Size Tot  |   |    |   |    O--------------------> |      |   |     |
N*               |  Seg Size Rem  |   |    |   |---------|             |   |      |   |     |
N*               |----------------|   |    |   |         |             |   --------   |     |
N*               | Seg List Ptrs  |   |    |   |---------|             |              |     |
N*               |----------------|   |    |                           | ------------ |     |
N*                                    |    |                           |              | <--------
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           ----------------     |   |
N*                                    |    |                                                |   |
N*                                    |    --------------------------------------------------   |
N*                                    |                                                         |
N*                                    -----------------------------------------------------------
N*
N*********************************************************************************************************
N*/
N
Ntypedef  struct  mem_pool  MEM_POOL;
N
N                                                                /* --------------------- MEM POOL --------------------- */
Nstruct  mem_pool {
N    LIB_MEM_TYPE    Type;                                       /* Pool type : LIB_TYPE_POOL or LIB_TYPE_HEAP.          */
N
N    MEM_POOL       *SegPrevPtr;                                 /* Ptr to PREV mem seg.                                 */
N    MEM_POOL       *SegNextPtr;                                 /* Ptr to NEXT mem seg.                                 */
N    MEM_POOL       *PoolPrevPtr;                                /* Ptr to PREV mem pool.                                */
N    MEM_POOL       *PoolNextPtr;                                /* Ptr to NEXT mem pool.                                */
N
N    void           *PoolAddrStart;                              /* Ptr   to start of mem seg for mem pool blks.         */
N    void           *PoolAddrEnd;                                /* Ptr   to end   of mem seg for mem pool blks.         */
N    void          **PoolPtrs;                                   /* Ptr   to mem pool's array of blk ptrs.               */
N    MEM_POOL_IX     BlkIx;                                      /* Ix  into mem pool's array of blk ptrs.               */
N    CPU_SIZE_T      PoolSize;                                   /* Size  of mem pool        (in octets).                */
N    CPU_SIZE_T      BlkNbr;                                     /* Nbr   of mem pool   blks.                            */
N    CPU_SIZE_T      BlkSize;                                    /* Size  of mem pool   blks (in octets).                */
N    CPU_SIZE_T      BlkAlign;                                   /* Align of mem pool   blks (in octets).                */
N
N                                                                /* --------------------- MEM SEG ---------------------- */
N    void           *SegAddr;                                    /* Ptr      to mem seg's base/start addr.               */
N    void           *SegAddrNextAvail;                           /* Ptr      to mem seg's next avail addr.               */
N    CPU_SIZE_T      SegSizeTot;                                 /* Tot size of mem seg (in octets).                     */
N    CPU_SIZE_T      SegSizeRem;                                 /* Rem size of mem seg (in octets).                     */
N};
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      MEMORY DATA VALUE MACRO'S
N*
N* Note(s) : (1) (a) Some variables & variable buffers to pass & receive data values MUST start on appropriate
N*                   CPU word-aligned addresses.  This is required because most word-aligned processors are more
N*                   efficient & may even REQUIRE that multi-octet words start on CPU word-aligned addresses.
N*
N*                   (1) For 16-bit word-aligned processors, this means that
N*
N*                           all 16- & 32-bit words MUST start on addresses that are multiples of 2 octets
N*
N*                   (2) For 32-bit word-aligned processors, this means that
N*
N*                           all 16-bit       words MUST start on addresses that are multiples of 2 octets
N*                           all 32-bit       words MUST start on addresses that are multiples of 4 octets
N*
N*               (b) However, some data values macro's appropriately access data values from any CPU addresses,
N*                   word-aligned or not.  Thus for processors that require data word alignment, data words can
N*                   be accessed to/from any CPU address, word-aligned or not, without generating data-word-
N*                   alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_GET_xxx()
N*
N* Description : Decode data values from any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address of data value to decode (see Notes #2 & #3a).
N*
N* Return(s)   : Decoded data value from CPU memory address (see Notes #1 & #3b).
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Decode data values based on the values' data-word order in CPU memory :
N*
N*                       MEM_VAL_GET_xxx_BIG()           Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx_LITTLE()        Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx()               Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_GET_xxx() macro's decode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be decoded from any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, any variable to receive the returned data value MUST start on an appropriate CPU
N*                       word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_GET_INT08U_BIG(addr)             (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
N
N
N
N#define  MEM_VAL_GET_INT08U_LITTLE(addr)          (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_BIG(addr)
S#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_BIG(addr)
S#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_BIG(addr)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_LITTLE(addr)
N#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_LITTLE(addr)
N#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_LITTLE(addr)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_SET_xxx()
N*
N* Description : Encode data values to any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address to encode data value (see Notes #2 & #3a).
N*
N*               val         Data value to encode (see Notes #1 & #3b).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Encode data values into CPU memory based on the values' data-word order :
N*
N*                       MEM_VAL_SET_xxx_BIG()           Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx_LITTLE()        Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx()               Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_SET_xxx() macro's encode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be encoded to any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, 'val' data value to encode MUST start on an appropriate CPU word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_SET_INT08U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#define  MEM_VAL_SET_INT08U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_BIG(addr, val)
S#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_BIG(addr, val)
S#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_BIG(addr, val)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_LITTLE(addr, val)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_GET_xxx()
N*
N* Description : Copy & decode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/decode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/decode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/decode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_GET_xxx_BIG()      Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx_LITTLE()   Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx()          Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_GET_xxx() macro's copy/decode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   decoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_GET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets are
N*                   inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #5'.
N*
N*               (6) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S
S#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
S
S
S
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N
N#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N
N
N#else                                                                           /* See Note #6.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_SET_xxx()
N*
N* Description : Copy & encode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/encode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/encode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/encode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_SET_xxx_BIG()      Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx_LITTLE()   Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx()          Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_SET_xxx() macro's copy/encode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   encoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_SET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets
N*                   are inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #5'.
N*********************************************************************************************************
N*/
N
N                                                                                /* See Note #5.                         */
N#define  MEM_VAL_COPY_SET_INT08U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
N
N#define  MEM_VAL_COPY_SET_INT08U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N#define  MEM_VAL_COPY_SET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         MEM_VAL_COPY_xxx()
N*
N* Description : Copy data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) MEM_VAL_COPY_xxx() macro's copy data values based on CPU's native data-word order.
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_xxx() macro's copy data values without regard to CPU word-aligned addresses.
N*                   Thus for processors that require data word alignment, data words can be copied to/from any
N*                   CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_COPY_08(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid          Mem_Init       (void);
N
N                                                                        /* -------------- MEM API  FNCTS -------------- */
Nvoid          Mem_Clr        (void        *pmem,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Set        (void        *pmem,
N                              CPU_INT08U   data_val,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Copy       (void        *pdest,
N                              void        *psrc,
N                              CPU_SIZE_T   size);
N
NCPU_BOOLEAN   Mem_Cmp        (void        *p1_mem,
N                              void        *p2_mem,
N                              CPU_SIZE_T   size);
N
N
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)                                /* -------------- MEM POOL FNCTS -------------- */
X#if (0 == 1)                                 
S
Svoid          Mem_PoolCreate (MEM_POOL    *pmem_pool,
S                              void        *pmem_base_addr,
S                              CPU_SIZE_T   mem_size,
S                              CPU_SIZE_T   blk_nbr,
S                              CPU_SIZE_T   blk_size,
S                              CPU_SIZE_T   blk_align,
S                              CPU_SIZE_T  *poctets_reqd,
S                              LIB_ERR     *perr);
S
Svoid         *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
S                              CPU_SIZE_T   size,
S                              LIB_ERR     *perr);
S
Svoid          Mem_PoolBlkFree(MEM_POOL    *pmem_pool,
S                              void        *pmem_blk,
S                              LIB_ERR     *perr);
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN        not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN  illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
N#endif
N
N
N
N#ifndef  LIB_MEM_CFG_POOL_EN
S#error  "LIB_MEM_CFG_POOL_EN               not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_POOL_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_POOL_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_POOL_EN         illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S
S#elif   (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#elif   (0 == 1)
S
S#ifndef  LIB_MEM_CFG_HEAP_SIZE
S#error  "LIB_MEM_CFG_HEAP_SIZE             not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S
S#elif   (LIB_MEM_CFG_HEAP_SIZE < 1)
S
S#error  "LIB_MEM_CFG_HEAP_SIZE       illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S#endif
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib mem module include.                       */
N
L 92 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#include  <probe_com_cfg.h>
L 1 ".\probe_com_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                      uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                              uC/Probe
N*
N*                                     Communication: Configuration
N*
N* Filename      : probe_com_cfg.h
N* Version       : V2.00
N* Programmer(s) : BAN
N* Note(s)       : (1) This file contains configuration constants for uC/Probe Communication Modules.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                       CHOOSE COMMUNICATION METHOD
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_METHOD_RS232                    DEF_TRUE
N#define  PROBE_COM_METHOD_TCPIP                    DEF_FALSE
N#define  PROBE_COM_METHOD_USB                      DEF_FALSE
N
N/*
N*********************************************************************************************************
N*                               CONFIGURE GENERAL COMMUNICATION PARAMETERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_RX_MAX_SIZE                           128
N#define  PROBE_COM_TX_MAX_SIZE                           128
N
N#define  PROBE_COM_SUPPORT_WR                      DEF_FALSE
N#define  PROBE_COM_SUPPORT_STR                     DEF_FALSE
N
N                                                                /* If strings are supported ...                         */
N#define  PROBE_COM_STR_BUF_SIZE                          128    /*   (a) Set size of string buffer.                     */
N
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STATISTICS AND COUNTERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_COM_STAT_EN                         DEF_ENABLED
N
N/*
N*********************************************************************************************************
N*                                  CONFIGURE RS-232 SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the RS-232 communication method ...              */
N
N#define  PROBE_RS232_PARSE_TASK                    DEF_TRUE     /*  (a) Set whether a task will handle parsing.         */
N
N                                                                /*  (b) If a task will handle parsing ...               */
N#define  PROBE_RS232_TASK_PRIO                             8    /*       (i) Set task priority.                         */
N#define  PROBE_RS232_TASK_STK_SIZE                       256    /*      (ii) Set task stack size.                       */
N
N#define  PROBE_RS232_RX_BUF_SIZE       PROBE_COM_RX_MAX_SIZE    /*  (c) Set Rx buffer size.                             */
N#define  PROBE_RS232_TX_BUF_SIZE       PROBE_COM_TX_MAX_SIZE    /*  (d) Set Tx buffer size.                             */
N
N#define  PROBE_RS232_UART_0                                1
N#define  PROBE_RS232_UART_1                                2
N#define  PROBE_RS232_UART_2                                3
N#define  PROBE_RS232_UART_3                                4
N#define  PROBE_RS232_UART_4                                5
N#define  PROBE_RS232_UART_5                                6
N#define  PROBE_RS232_UART_6                                7
N#define  PROBE_RS232_UART_7                                8
N#define  PROBE_RS232_UART_8                                9
N#define  PROBE_RS232_UART_9                               10
N#define  PROBE_RS232_UART_DBG                             63
N#define  PROBE_RS232_COMM_SEL             PROBE_RS232_UART_1    /*  (e) Configure UART selection.                       */
N
N/*
N*********************************************************************************************************
N*                                  CONFIGURE TCP-IP SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the TCP-IP communication method ...              */
N
N#define  PROBE_TCPIP_PORT                               9930    /*  (a) Set listening port of the UDP server.           */
N
N#define  PROBE_TCPIP_RX_BUF_SIZE       PROBE_COM_RX_MAX_SIZE    /*  (b) Set Rx buffer size.                             */
N#define  PROBE_TCPIP_TX_BUF_SIZE       PROBE_COM_TX_MAX_SIZE    /*  (c) Set Tx buffer size.                             */
N
N#define  PROBE_TCPIP_TASK_PRIO                             9    /*  (d) Set task priority.                              */
N#define  PROBE_TCPIP_TASK_STK_SIZE                       256    /*  (e) Set task stack size.                            */
N
N/*
N*********************************************************************************************************
N*                                    CONFIGURE USB SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N                                                                /* For the USB communication method ...                 */
N
N#define  PROBE_USB_RX_BUF_SIZE         PROBE_COM_RX_MAX_SIZE    /*  (a) Set Rx buffer size.                             */
N#define  PROBE_USB_TX_BUF_SIZE         PROBE_COM_TX_MAX_SIZE    /*  (b) Set Tx buffer size.                             */
N
N#define  PROBE_USB_TASK_PRIO                              10    /*  (c) Set task priority.                              */
N#define  PROBE_USB_TASK_STK_SIZE                         256    /*  (d) Set task stack size.                            */
N
N#define  PROBE_USB_INIT_STACK                      DEF_TRUE     /*  (e) The USB comm module will init stack.            */
N
N/*
N*********************************************************************************************************
N*                              CONFIGURE HARDWARE SPECIFIC PARAMETERS
N*********************************************************************************************************
N*/
N
N#define  PROBE_RS232_UART_1_REMAP                DEF_FALSE
N#define  PROBE_RS232_UART_2_REMAP                DEF_TRUE
N#define  PROBE_RS232_UART_3_REMAP_PARTIAL        DEF_FALSE
N#define  PROBE_RS232_UART_3_REMAP_FULL           DEF_FALSE
L 94 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\probe_com.h" 2
N
N#if (PROBE_COM_SUPPORT_STR == DEF_ENABLED)
X#if (0 == 1)
S#include  <lib_str.h>
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                                 DEFINES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               DATA TYPES
N*********************************************************************************************************
N*/
N
Ntypedef  void  (*PROBE_COM_INFO_HDNLR_FNCT) (CPU_INT16U   info,
N                                             CPU_INT32U   data);
N
Ntypedef  void  (*PROBE_COM_STR_HDNLR_FNCT)  (CPU_CHAR    *pstr,
N                                             CPU_INT16U   len);
N
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N                                                                /* ------------------- COUNTERS ----------------------- */
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxPktCtr;                   /* Number of packets received                           */
Xextern  CPU_INT32U  ProbeCom_RxPktCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxPktCtr;                   /* Number of packets tranmitted                         */
Xextern  CPU_INT32U  ProbeCom_TxPktCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxSymCtr;                   /* Number of symbols transmitted                        */
Xextern  CPU_INT32U  ProbeCom_TxSymCtr;                    
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxSymByteCtr;               /* Number of symbol bytes transmitted                   */
Xextern  CPU_INT32U  ProbeCom_TxSymByteCtr;                
NPROBE_COM_EXT  CPU_INT32U  ProbeCom_ErrPktCtr;                  /* Number of error packets transmitted                  */
Xextern  CPU_INT32U  ProbeCom_ErrPktCtr;                   
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_TxStrCtr;                   /* Number of string characters transmitted              */
N#endif
N
N#if (PROBE_COM_SUPPORT_WR == DEF_TRUE)
X#if (0 == 1)
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxSymCtr;                   /* Number of symbols received.                          */
SPROBE_COM_EXT  CPU_INT32U  ProbeCom_RxSymByteCtr;               /* Number of symbol bytes received.                     */
N#endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                               MACRO'S
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid         ProbeCom_Init        (void);                                   /* Init comm module.                        */
N
NCPU_INT16U   ProbeCom_ParseRxPkt  (void                       *prx_pkt,     /* Parse rx'd pkt & fmt resp.               */
N                                   void                       *ptx_pkt,
N                                   CPU_INT16U                  rx_pkt_size,
N                                   CPU_INT16U                  tx_buf_size);
N
Nvoid         ProbeCom_InfoHndlrSet(PROBE_COM_INFO_HDNLR_FNCT   hndlr);      /* Set hndlr for info pkt's.                */
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
SCPU_BOOLEAN  ProbeCom_TxStr       (CPU_CHAR                   *pstr,        /* Tx str.                                  */
S                                   CPU_INT16U                  dly);
S
Svoid         ProbeCom_StrHndlrSet (PROBE_COM_STR_HDNLR_FNCT    hndlr);      /* Set hdnlr for str wr pkt's.              */
N#endif
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*                                    DEFINED IN OS's probe_com_os.c
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#if (0 == 1)
Svoid         ProbeCom_OS_Init    (void);
SCPU_BOOLEAN  ProbeCom_OS_Pend    (CPU_BOOLEAN                 wait);
Svoid         ProbeCom_OS_Post    (void);
Svoid         ProbeCom_OS_Dly     (CPU_INT16U                  dly);
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef    PROBE_COM_SUPPORT_WR
S  #error  "PROBE_COM_SUPPORT_WR               not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Write commands     supported]     "
S  #error  "                             [     ||  DEF_FALSE  Write commands NOT supported]     "
S
S#elif    ((PROBE_COM_SUPPORT_WR != DEF_TRUE ) && \
S          (PROBE_COM_SUPPORT_WR != DEF_FALSE))
X#elif    ((0 != 1 ) &&           (0 != 0))
S  #error  "PROBE_COM_SUPPORT_WR         illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Write commands     supported]     "
S  #error  "                             [     ||  DEF_FALSE  Write commands NOT supported]     "
N#endif
N
N
N
N#ifndef    PROBE_COM_SUPPORT_STR
S  #error  "PROBE_COM_SUPPORT_STR              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                       [MUST be  DEF_TRUE   String commands/functions     supported]"
S  #error  "                       [     ||  DEF_FALSE  String commands/functions NOT supported]"
S
S#elif    ((PROBE_COM_SUPPORT_STR != DEF_TRUE ) && \
S          (PROBE_COM_SUPPORT_STR != DEF_FALSE))
X#elif    ((0 != 1 ) &&           (0 != 0))
S  #error  "PROBE_COM_SUPPORT_STR                      illegally #define'd in 'probe_com_cfg.h' "
S  #error  "                       [MUST be  DEF_TRUE   String commands/functions     supported]"
S  #error  "                       [     ||  DEF_FALSE  String commands/functions NOT supported]"
S
S#elif     (PROBE_COM_SUPPORT_STR == DEF_TRUE)
X#elif     (0 == 1)
S#ifndef    PROBE_COM_STR_BUF_SIZE
S  #error  "PROBE_COM_STR_BUF_SIZE             not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_STR_BUF_SIZE > 65535) || \
S          (PROBE_COM_STR_BUF_SIZE < 32   ))
X#elif    ((PROBE_COM_STR_BUF_SIZE > 65535) ||           (PROBE_COM_STR_BUF_SIZE < 32   ))
S  #error  "PROBE_COM_STR_BUF_SIZE       illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S#endif
N#endif
N
N
N#ifndef    PROBE_COM_STAT_EN
S  #error  "PROBE_COM_STAT_EN                  not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Counters are     maintained]      "
S  #error  "                             [     ||  DEF_FALSE  Counters are NOT maintained]      "
S
S#elif    ((PROBE_COM_STAT_EN != DEF_TRUE ) && \
S          (PROBE_COM_STAT_EN != DEF_FALSE))
X#elif    ((1 != 1 ) &&           (1 != 0))
S  #error  "PROBE_COM_STAT_EN            illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  DEF_TRUE   Counters are     maintained]      "
S  #error  "                             [     ||  DEF_FALSE  Counters are NOT maintained]      "
N#endif
N
N
N
N#ifndef    PROBE_COM_RX_MAX_SIZE
S  #error  "PROBE_COM_RX_BUF_SIZE              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_RX_MAX_SIZE > 65535) || \
S          (PROBE_COM_RX_MAX_SIZE < 32   ))
X#elif    ((128 > 65535) ||           (128 < 32   ))
S  #error  "PROBE_COM_RX_MAX_SIZE        illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
N#endif
N
N
N
N
N#ifndef    PROBE_COM_TX_MAX_SIZE
S  #error  "PROBE_COM_TX_BUF_SIZE              not #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
S#elif    ((PROBE_COM_TX_MAX_SIZE > 65535) || \
S          (PROBE_COM_TX_MAX_SIZE < 32   ))
X#elif    ((128 > 65535) ||           (128 < 32   ))
S  #error  "PROBE_COM_TX_MAX_SIZE        illegally #define'd in 'probe_com_cfg.h'               "
S  #error  "                             [MUST be  >= 32   ]                                    "
S  #error  "                             [     &&  <= 65535]                                    "
S
N#endif
N
N
N
N/*
N*********************************************************************************************************
N*                                              MODULE END
N*
N* Note(s) : See 'MODULE  Note #1'.
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of PROBE_COM module include (see Note #1).       */
L 39 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c" 2
N#include  <probe_rs232.h>
L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.h" 1
N/*
N*********************************************************************************************************
N*                                         uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                                uC/Probe
N*
N*                                         Communication: RS-232
N*
N* Filename      : probe_rs232.h
N* Version       : V2.00
N* Programmer(s) : BAN
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                                 MODULE
N*
N* Note(s) : (1) This header file is protected from multiple pre-processor inclusion through use of the
N*               PROBE_RS232 present pre-processor macro definition.
N*********************************************************************************************************
N*/
N
N#ifndef  PROBE_RS232_PRESENT                                    /* See Note #1.                                         */
N#define  PROBE_RS232_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                                 EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef    PROBE_RS232_MODULE
N#define   PROBE_RS232_EXT
N#else
S#define   PROBE_RS232_EXT  extern
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                              INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#include  <probe_com.h>
N#include  <probe_rs232c.h>
L 1 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\probe_rs232c.h" 1
N/*
N*********************************************************************************************************
N*                                      uC/Probe Communication
N*
N*                           (c) Copyright 2007; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                              uC/Probe
N*
N*                                      Communication: RS-232
N*                                      Port for the ST STM32
N*
N* Filename      : probe_rs232c.h
N* Version       : V1.00
N* Programmer(s) : BAN
N*********************************************************************************************************
N*/
N
N#ifndef  __PROBE_RS232C_H__
N#define  __PROBE_RS232C_H__
N
N
N
N
N
N
N#endif
N
L 61 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.h" 2
N
N
N#if (PROBE_COM_METHOD_RS232 == DEF_ENABLED)
X#if (1 == 1)
N
N/*
N*********************************************************************************************************
N*                                                 DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N                                                                    /* ---------------- Byte counters --------------------- */
NPROBE_RS232_EXT  CPU_INT32U  ProbeRS232_RxCtr;                      /*  ... Number of bytes received                        */
X  CPU_INT32U  ProbeRS232_RxCtr;                       
NPROBE_RS232_EXT  CPU_INT32U  ProbeRS232_TxCtr;                      /*  ... Number of bytes transmitted                     */
X  CPU_INT32U  ProbeRS232_TxCtr;                       
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                                 MACRO'S
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                           FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid  ProbeRS232_Init          (CPU_INT32U   baud_rate);            /* Initialize uC/Probe RS-232 Communication Module      */
Nvoid  ProbeRS232_RxHandler     (CPU_INT08U   rx_data);              /* Processor independent Rx handler                     */
Nvoid  ProbeRS232_TxHandler     (void);                              /* Processor independent Tx handler                     */
N
N#if (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#if (1 == 1)
Nvoid  ProbeRS232_Task          (void        *p_arg);
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                           FUNCTION PROTOTYPES
N*                                    DEFINED IN PORT's probe_rs232c.c
N*********************************************************************************************************
N*/
N
Nvoid  ProbeRS232_InitTarget    (CPU_INT32U   baud_rate);            /* Initialize the target specifics                      */
N
Nvoid  ProbeRS232_RxTxISRHandler(void);                              /* Code to process Rx or Tx character                   */
N
Nvoid  ProbeRS232_RxISRHandler  (void);                              /* Code to process character received                   */
Nvoid  ProbeRS232_RxIntEn       (void);                              /* Enable  Rx interrupts                                */
Nvoid  ProbeRS232_RxIntDis      (void);                              /* Disable Rx interrupts                                */
N
Nvoid  ProbeRS232_TxISRHandler  (void);                              /* Code to process next character to send               */
Nvoid  ProbeRS232_TxIntEn       (void);                              /* Enable  Tx interrupts                                */
Nvoid  ProbeRS232_TxIntDis      (void);                              /* Disable Tx interrupts                                */
Nvoid  ProbeRS232_Tx1           (CPU_INT08U   c);                    /* Function to send a single character                  */
N
N
N/*
N*********************************************************************************************************
N*                                           FUNCTION PROTOTYPES
N*                                    DEFINED IN OS's probe_rs232_os.c
N*********************************************************************************************************
N*/
N
N#if (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#if (1 == 1)
Nvoid  ProbeRS232_OS_Init       (void);
Nvoid  ProbeRS232_OS_Pend       (void);
Nvoid  ProbeRS232_OS_Post       (void);
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                          CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef    PROBE_RS232_PARSE_TASK
S  #error  "PROBE_RS232_PARSE_TASK            not #define'd in 'probe_com_cfg.h'     "
S  #error  "                           [MUST be  DEF_TRUE   Packet parsed in task   ]"
S  #error  "                           [     ||  DEF_FALSE  Packet parsed in ISR    ]"
S
S#elif    ((PROBE_RS232_PARSE_TASK != DEF_TRUE ) && \
S          (PROBE_RS232_PARSE_TASK != DEF_FALSE))
X#elif    ((1 != 1 ) &&           (1 != 0))
S  #error  "PROBE_RS232_PARSE_TASK      illegally #define'd in 'probe_com_cfg.h'     "
S  #error  "                           [MUST be  DEF_TRUE   Packet parsed in task   ]"
S  #error  "                           [     ||  DEF_FALSE  Packet parsed in ISR    ]"
S
N#elif     (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#elif     (1 == 1)
N
N#ifndef    PROBE_RS232_TASK_PRIO
S  #error  "PROBE_RS232_TASK_PRIO             not #define'd in 'probe_com_cfg.h'     "
N#endif
N
N#ifndef    PROBE_RS232_TASK_STK_SIZE
S  #error  "PROBE_RS232_TASK_STK_SIZE         not #define'd in 'probe_com_cfg.h'     "
N#endif
N
N#endif
N
N
N
N#ifndef    PROBE_RS232_RX_BUF_SIZE
S  #error  "PROBE_RS232_RX_BUF_SIZE           not #define'd in 'probe_com_cfg.h'     "
N#endif
N
N
N
N#ifndef    PROBE_RS232_TX_BUF_SIZE
S  #error  "PROBE_RS232_TX_BUF_SIZE           not #define'd in 'probe_com_cfg.h'     "
N#endif
N
N
N#ifndef    PROBE_RS232_COMM_SEL
S  #error  "PROBE_RS232_COMM_SEL              not #define'd in 'probe_com_cfg.h'     "
N#endif
N
N
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                              MODULE END
N*
N* Note(s) : See 'MODULE  Note #1'.
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of PROBE_COM_RS232 module include (see Note #1). */
L 40 "..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c" 2
N
N#if (PROBE_COM_METHOD_RS232 == DEF_ENABLED)
X#if (1 == 1)
N
N/*
N*********************************************************************************************************
N*                                              LOCAL DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                          RS-232 PACKET FORMAT
N*
N* Note(s):  (1) All packets include the following parts:
N*
N*                   (A)  4 1-byte start delimiters, forming the ASCII representation of "uCPr".  These
N*                        are the constants PROBE_RS232_PROTOCOL_RX_SD0-PROBE_RS232_PROTOCOL_?X_SD4;
N*                   (B)  1 2-byte length, the length of the data segment;
N*                   (C)  1 2-byte padding, unused;
N*                   (D)  n   bytes of data; and
N*                   (E)  1 1-byte checksum; and
N*                   (F)  1 1-byte end delimiter, the character '/', which is the constant PROBE_RS232_PROTOCOL_?X_ED.
N*
N*                                       +-------------------+-------------------+
N*                                       |   'u'   |   'C'   |   'P'   |   'r'   |
N*                                       +-------------------+-------------------+
N*                                       |       Length      |     Padding       |
N*                                       +-------------------+-------------------+
N*                                       |                  Data                 |   The data segment does not need to end on
N*                                       |                   .                   |   a four-byte boundary, as might be inferred
N*                                       |                   .                   |   from this diagram.
N*                                       |                   .                   |
N*                                       +-------------------+-------------------+
N*                                       | Checksum|   '/'   |
N*                                       +-------------------+
N*********************************************************************************************************
N*/
N
N                                                                /* ------------- INBOUND PACKET DELIMITERS ------------ */
N#define  PROBE_RS232_PROTOCOL_RX_SD0                    0x75    /* Start delimiters.                                    */
N#define  PROBE_RS232_PROTOCOL_RX_SD1                    0x43
N#define  PROBE_RS232_PROTOCOL_RX_SD2                    0x50
N#define  PROBE_RS232_PROTOCOL_RX_SD3                    0x72
N#define  PROBE_RS232_PROTOCOL_RX_ED                     0x2F    /* End   delimiter.                                     */
N
N                                                                /* ------------ OUTBOUND PACKET DELIMITERS ------------ */
N#define  PROBE_RS232_PROTOCOL_TX_SD0                    0x75    /* Start delimiters.                                    */
N#define  PROBE_RS232_PROTOCOL_TX_SD1                    0x43
N#define  PROBE_RS232_PROTOCOL_TX_SD2                    0x50
N#define  PROBE_RS232_PROTOCOL_TX_SD3                    0x72
N#define  PROBE_RS232_PROTOCOL_TX_ED                     0x2F    /* End   delimiter.                                     */
N
N                                                                /* ----------- RECEIVE STATE MACHINE STATES ----------- */
N#define  PROBE_RS232_RX_STATE_SD0                          0    /* Waiting for start first  start delimiter (SD0).      */
N#define  PROBE_RS232_RX_STATE_SD1                          1    /* Waiting for start second start delimiter (SD1).      */
N#define  PROBE_RS232_RX_STATE_SD2                          2    /* Waiting for start third  start delimiter (SD2).      */
N#define  PROBE_RS232_RX_STATE_SD3                          3    /* Waiting for start fourth start delimiter (SD3).      */
N#define  PROBE_RS232_RX_STATE_LEN1                         4    /* Waiting for length,  first  byte.                    */
N#define  PROBE_RS232_RX_STATE_LEN2                         5    /* Waiting for length,  second byte.                    */
N#define  PROBE_RS232_RX_STATE_PAD1                         6    /* Waiting for padding, first  byte.                    */
N#define  PROBE_RS232_RX_STATE_PAD2                         7    /* Waiting for padding, second byte.                    */
N#define  PROBE_RS232_RX_STATE_DATA                         8    /* Waiting for data.                                    */
N#define  PROBE_RS232_RX_STATE_CHKSUM                       9    /* Waiting for checksum.                                */
N#define  PROBE_RS232_RX_STATE_ED                          10    /* Waiting for end delimiter.                           */
N
N                                                                /* ---------- TRANSMIT STATE MACHINE STATES ----------- */
N#define  PROBE_RS232_TX_STATE_SD0                          0    /* Waiting to send start first  start delim. (SD0).     */
N#define  PROBE_RS232_TX_STATE_SD1                          1    /* Waiting to send start second start delim. (SD1).     */
N#define  PROBE_RS232_TX_STATE_SD2                          2    /* Waiting to send start third  start delim. (SD2).     */
N#define  PROBE_RS232_TX_STATE_SD3                          3    /* Waiting to send start fourth start delim. (SD3).     */
N#define  PROBE_RS232_TX_STATE_LEN1                         4    /* Waiting to send length,  first  byte.                */
N#define  PROBE_RS232_TX_STATE_LEN2                         5    /* Waiting to send length,  second byte.                */
N#define  PROBE_RS232_TX_STATE_PAD1                         6    /* Waiting to send padding, first  byte.                */
N#define  PROBE_RS232_TX_STATE_PAD2                         7    /* Waiting to send padding, second byte.                */
N#define  PROBE_RS232_TX_STATE_DATA                         8    /* Waiting to send data.                                */
N#define  PROBE_RS232_TX_STATE_CHKSUM                       9    /* Waiting to send checksum.                            */
N#define  PROBE_RS232_TX_STATE_ED                          10    /* Waiting to send end delimiter.                       */
N
N#define  PROBE_RS232_USE_CHECKSUM                  DEF_FALSE    /* DO NOT CHANGE                                        */
N
N/*
N*********************************************************************************************************
N*                                             LOCAL CONSTANTS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            LOCAL DATA TYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                              LOCAL TABLES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                         LOCAL GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N                                                                /* ---------------- RX STATE VARIABLES ---------------- */
Nstatic  CPU_INT08U   ProbeRS232_RxState;                        /* Current state of RX state machine.                   */
Nstatic  CPU_INT16U   ProbeRS232_RxRemainLen;                    /* Remaining bytes of data to read.                     */
N
N                                                                /* ----------------- RX PKT VARIABLES ----------------- */
Nstatic  CPU_INT16U   ProbeRS232_RxLen;                          /* Length  of data in current pkt.                      */
Nstatic  CPU_INT08U   ProbeRS232_RxBuf[PROBE_RS232_RX_BUF_SIZE]; /* Data    of current pkt.                              */
Xstatic  CPU_INT08U   ProbeRS232_RxBuf[128];  
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT08U   ProbeRS232_RxChkSum;                       /* Checksum of current pkt.                             */
N#endif
N
N                                                                /* --------------- RX DATA BUF VARIABLE --------------- */
Nstatic  CPU_INT16U   ProbeRS232_RxBufWrIx;                      /* Index of next write; also number of bytes in buf.    */
N
N                                                                /* ---------------- TX STATE VARIABLES ---------------- */
Nstatic  CPU_INT08U   ProbeRS232_TxState;                        /* Current state of TX state machine.                   */
Nstatic  CPU_BOOLEAN  ProbeRS232_TxActiveFlag;                   /* Indicates TX is currently active.                    */
N
N                                                                /* ----------------- TX PKT VARIABLES ----------------- */
Nstatic  CPU_INT16U   ProbeRS232_TxLen;                          /* Length  of data in current pkt.                      */
Nstatic  CPU_INT08U   ProbeRS232_TxBuf[PROBE_RS232_TX_BUF_SIZE]; /* Data    of current pkt.                              */
Xstatic  CPU_INT08U   ProbeRS232_TxBuf[128];  
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
Sstatic  CPU_INT08U   ProbeRS232_TxChkSum;                       /* Checksum of current pkt.                             */
N#endif
N
N                                                                /* --------------- TX DATA BUF VARIABLES -------------- */
Nstatic  CPU_BOOLEAN  ProbeRS232_TxBufInUse;                     /* Indicates TX buf currently holds a pkt.              */
Nstatic  CPU_INT16U   ProbeRS232_TxBufRdIx;                      /* Index of next read.                                  */
N
N
N
N/*
N*********************************************************************************************************
N*                                        LOCAL FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeRS232_ParseRxPkt(void);
N
Nstatic  void        ProbeRS232_RxPkt     (void);
N
Nstatic  void        ProbeRS232_RxStoINT8U(CPU_INT08U  rx_data);
N
Nstatic  void        ProbeRS232_RxBufClr  (void);
N
Nstatic  void        ProbeRS232_TxStart   (void);
N
N
N/*
N*********************************************************************************************************
N*                                       LOCAL CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            ProbeRS232_Init()
N*
N* Description : Initialize the RS-232 communication module.
N*
N* Argument(s) : baud_rate       The RS-232 baud rate which will be passed to the hardware initialization.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  ProbeRS232_Init (CPU_INT32U baud_rate)
N{
N    ProbeRS232_RxState      = PROBE_RS232_RX_STATE_SD0;         /* Setup Rx and Tx state machines.                      */
X    ProbeRS232_RxState      = 0;          
N    ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
X    ProbeRS232_TxState      = 0;
N
N    ProbeRS232_TxLen        = 0;
N    ProbeRS232_TxActiveFlag = DEF_FALSE;
X    ProbeRS232_TxActiveFlag = 0;
N    ProbeRS232_TxBufInUse   = DEF_FALSE;
X    ProbeRS232_TxBufInUse   = 0;
N
N#if (PROBE_COM_STAT_EN     == DEF_ENABLED)
X#if (1     == 1)
N    ProbeRS232_RxCtr        = 0;
N    ProbeRS232_TxCtr        = 0;
N#endif
N
N#if (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#if (1 == 1)
N    ProbeRS232_OS_Init();
N#endif
N
N    ProbeRS232_InitTarget(baud_rate);                           /* Initialize target specific code.                     */
N}
N
N
N/*
N*********************************************************************************************************
N*                                            ProbeRS232_Task()
N*
N* Description : The task which parses the received packet, forms a response, and begins transmission.
N*
N* Argument(s) : p_arg           The argument passed to 'ProbeRS232_Task()' by  'ProbeRS232_OS_Task()'.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : ProbeRS232_OS_Task().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#if (1 == 1)
Nvoid  ProbeRS232_Task (void *p_arg)
N{
N    CPU_INT16U  len;
N
N
N    (void)p_arg;
N
N    while (DEF_TRUE) {
X    while (1) {
N        ProbeRS232_OS_Pend();                                   /* Wait for a packet to be received.                    */
N
N        len = ProbeRS232_ParseRxPkt();                          /* Parse packet and formulate a response.               */
N
N        if (len > 0) {                                          /* If we have a response.                               */
N            ProbeRS232_TxLen = len;
N            ProbeRS232_TxStart();
N        }
N    }
N}
N#endif
N
N
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N*                                            RX & TX HANDLERS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                         ProbeRS232_RxHandler()
N*
N* Description : Handle a received byte.
N*
N* Argument(s) : rx_data         Received data byte.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Rx ISR.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  ProbeRS232_RxHandler (CPU_INT08U rx_data)
N{
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    ProbeRS232_RxCtr++;
N#endif
N
N    switch (ProbeRS232_RxState) {
N        case PROBE_RS232_RX_STATE_SD0:                          /* Rx'd the start 1st start delimiter (SD0).            */
X        case 0:                           
N             if (rx_data == PROBE_RS232_PROTOCOL_RX_SD0) {
X             if (rx_data == 0x75) {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD1;
X                 ProbeRS232_RxState = 1;
N                 ProbeRS232_RxBufClr();
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_SD1:                          /* Rx'd the start 2nd start delimiter (SD1).            */
X        case 1:                           
N             if (rx_data == PROBE_RS232_PROTOCOL_RX_SD1) {
X             if (rx_data == 0x43) {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD2;
X                 ProbeRS232_RxState = 2;
N             } else {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
X                 ProbeRS232_RxState = 0;
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_SD2:                          /* Rx'd the start 3rd start delimiter (SD2).            */
X        case 2:                           
N             if (rx_data == PROBE_RS232_PROTOCOL_RX_SD2) {
X             if (rx_data == 0x50) {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD3;
X                 ProbeRS232_RxState = 3;
N             } else {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
X                 ProbeRS232_RxState = 0;
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_SD3:                          /* Rx'd the start 4th start delimiter (SD3).            */
X        case 3:                           
N             if (rx_data == PROBE_RS232_PROTOCOL_RX_SD3) {
X             if (rx_data == 0x72) {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_LEN1;
X                 ProbeRS232_RxState = 4;
N             } else {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
X                 ProbeRS232_RxState = 0;
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_LEN1:                         /* Rx'd the 1st len byte.                               */
X        case 4:                          
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_RxChkSum    = rx_data;
N#endif
N             ProbeRS232_RxRemainLen = rx_data;
N             ProbeRS232_RxState     = PROBE_RS232_RX_STATE_LEN2;
X             ProbeRS232_RxState     = 5;
N             break;
N
N
N        case PROBE_RS232_RX_STATE_LEN2:                         /* Rx'd the 2nd len byte.                               */
X        case 5:                          
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_RxChkSum    += rx_data;
N#endif
N             ProbeRS232_RxRemainLen |= rx_data << 8;
N
N                                                                /* Chk len.                                             */
N             if ((ProbeRS232_RxRemainLen == 0) || (ProbeRS232_RxRemainLen > PROBE_RS232_RX_BUF_SIZE)) {
X             if ((ProbeRS232_RxRemainLen == 0) || (ProbeRS232_RxRemainLen > 128)) {
N                 ProbeRS232_RxState  = PROBE_RS232_RX_STATE_SD0;
X                 ProbeRS232_RxState  = 0;
N             } else {
N                 ProbeRS232_RxLen    = ProbeRS232_RxRemainLen;
N                 ProbeRS232_RxState  = PROBE_RS232_RX_STATE_PAD1;
X                 ProbeRS232_RxState  = 6;
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_PAD1:                         /* Rx'd the 1st padding byte.                           */
X        case 6:                          
N             ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD2;
X             ProbeRS232_RxState = 7;
N             break;
N
N
N        case PROBE_RS232_RX_STATE_PAD2:                         /* Rx'd the 2nd  padding byte.                          */
X        case 7:                          
N             ProbeRS232_RxState = PROBE_RS232_RX_STATE_DATA;
X             ProbeRS232_RxState = 8;
N             break;
N
N
N        case PROBE_RS232_RX_STATE_DATA:                         /* Rx'd data.                                           */
X        case 8:                          
N             ProbeRS232_RxStoINT8U(rx_data);
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_RxChkSum += rx_data;
N#endif
N             if (--ProbeRS232_RxRemainLen == 0) {
N                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_CHKSUM;
X                 ProbeRS232_RxState = 9;
N             }
N             break;
N
N
N        case PROBE_RS232_RX_STATE_CHKSUM:                       /* Rx'd the checksum.                                   */
X        case 9:                        
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_RxChkSum += rx_data;
S             if ((ProbeRS232_RxChkSum & 0xFF) == 0x00) {
S                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
S             } else {
S                 ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
S             }
N#else
N             ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
X             ProbeRS232_RxState = 10;
N#endif
N             break;
N
N
N        case PROBE_RS232_RX_STATE_ED:                           /* Rx'd the end delimiter.                              */
X        case 10:                            
N             if (rx_data == PROBE_RS232_PROTOCOL_RX_ED) {
X             if (rx_data == 0x2F) {
N                 ProbeRS232_RxPkt();                            /* Parse rx'd pkt.                                      */
N             }
N             ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
X             ProbeRS232_RxState = 0;
N             break;
N
N
N        default:
N             ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
X             ProbeRS232_RxState = 0;
N             break;
N    }
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeRS232_TxHandler()
N*
N* Description : Handle a byte transmission.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Tx ISR.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  ProbeRS232_TxHandler (void)
N{
N    CPU_INT08U  tx_data;
N
N
N#if (PROBE_COM_STAT_EN == DEF_ENABLED)
X#if (1 == 1)
N    if ((ProbeRS232_TxState != PROBE_RS232_TX_STATE_SD0) ||
X    if ((ProbeRS232_TxState != 0) ||
N        (ProbeRS232_TxLen    > 0                       )) {
N        ProbeRS232_TxCtr++;
N    }
N#endif
N
N    switch (ProbeRS232_TxState) {
N        case PROBE_RS232_TX_STATE_SD0:
X        case 0:
N             if (ProbeRS232_TxLen > 0) {                        /* If pkt is waiting to be sent ...                     */
N                 ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD0);   /*  ... tx start 1st start delimiter (SD0).             */
X                 ProbeRS232_Tx1(0x75);    
N                 ProbeRS232_TxActiveFlag = DEF_TRUE;
X                 ProbeRS232_TxActiveFlag = 1;
N                 ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD1;
X                 ProbeRS232_TxState      = 1;
N                 ProbeRS232_TxBufRdIx    = 0;
N
N             } else {                                           /* If no pkt is waiting to be sent ...                  */
N                 ProbeRS232_TxActiveFlag = DEF_FALSE;
X                 ProbeRS232_TxActiveFlag = 0;
N                 ProbeRS232_TxIntDis();                         /*  ... dis tx int's.                                   */
N             }
N             break;
N
N
N        case PROBE_RS232_TX_STATE_SD1:                          /* Tx start 2nd start delimiter (SD1).                  */
X        case 1:                           
N             ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD1);
X             ProbeRS232_Tx1(0x43);
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD2;
X             ProbeRS232_TxState = 2;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_SD2:                          /* Tx start 3rd start delimiter (SD2).                  */
X        case 2:                           
N             ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD2);
X             ProbeRS232_Tx1(0x50);
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD3;
X             ProbeRS232_TxState = 3;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_SD3:                          /* Tx start 4th start delimiter (SD3).                  */
X        case 3:                           
N             ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD3);
X             ProbeRS232_Tx1(0x72);
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_LEN1;
X             ProbeRS232_TxState = 4;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_LEN1:                         /* Tx 1st len byte.                                     */
X        case 4:                          
N             tx_data             = ProbeRS232_TxLen & 0xFF;
N             ProbeRS232_Tx1(tx_data);
N             ProbeRS232_TxState  = PROBE_RS232_TX_STATE_LEN2;
X             ProbeRS232_TxState  = 5;
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_TxChkSum = tx_data;
N#endif
N             break;
N
N
N        case PROBE_RS232_TX_STATE_LEN2:                         /* Tx 2nd len byte.                                     */
X        case 5:                          
N             tx_data              = ProbeRS232_TxLen >> 8;
N             ProbeRS232_Tx1(tx_data);
N             ProbeRS232_TxState   = PROBE_RS232_TX_STATE_PAD1;
X             ProbeRS232_TxState   = 6;
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_TxChkSum += tx_data;
N#endif
N             break;
N
N
N        case PROBE_RS232_TX_STATE_PAD1:                         /* Tx 1st padding byte.                                 */
X        case 6:                          
N             ProbeRS232_Tx1(0);
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_PAD2;
X             ProbeRS232_TxState = 7;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_PAD2:                         /* Tx 2nd padding byte.                                 */
X        case 7:                          
N             ProbeRS232_Tx1(0);
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_DATA;
X             ProbeRS232_TxState = 8;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_DATA:                         /* Tx data.                                             */
X        case 8:                          
N             tx_data = ProbeRS232_TxBuf[ProbeRS232_TxBufRdIx];
N             ProbeRS232_Tx1(tx_data);
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_TxChkSum += tx_data;
N#endif
N             ProbeRS232_TxBufRdIx++;
N             if (ProbeRS232_TxBufRdIx >= ProbeRS232_TxLen) {
N                 ProbeRS232_TxState = PROBE_RS232_TX_STATE_CHKSUM;
X                 ProbeRS232_TxState = 9;
N                 ProbeRS232_TxLen   = 0;
N             }
N             break;
N
N
N        case PROBE_RS232_TX_STATE_CHKSUM:                       /* Tx checksum.                                         */
X        case 9:                        
N#if (PROBE_RS232_USE_CHECKSUM == DEF_TRUE)
X#if (0 == 1)
S             ProbeRS232_Tx1(ProbeRS232_TxChkSum);
N#else
N             ProbeRS232_Tx1(0);
N#endif
N             ProbeRS232_TxState = PROBE_RS232_TX_STATE_ED;
X             ProbeRS232_TxState = 10;
N             break;
N
N
N        case PROBE_RS232_TX_STATE_ED:                           /* Tx end delimiter.                                    */
X        case 10:                            
N             ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_ED);
X             ProbeRS232_Tx1(0x2F);
N             ProbeRS232_TxState    = PROBE_RS232_TX_STATE_SD0;
X             ProbeRS232_TxState    = 0;
N             ProbeRS232_TxBufInUse = DEF_FALSE;
X             ProbeRS232_TxBufInUse = 0;
N             break;
N
N
N        default:
N             ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
X             ProbeRS232_TxState      = 0;
N             ProbeRS232_TxActiveFlag = DEF_FALSE;
X             ProbeRS232_TxActiveFlag = 0;
N             ProbeRS232_TxIntDis();                             /* No more data to send, dis tx int's.                  */
N             break;
N    }
N}
N
N
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N*                                             LOCAL FUNCTIONS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                         ProbeRS232_ParseRxPkt()
N*
N* Description : Parse a received packet & formulate a response.
N*
N* Argument(s) : none.
N*
N* Return(s)   : The number of bytes in the data segment of the packet to transmit in response.
N*
N* Caller(s)   : ProbeRS232_Task(),
N*               ProbeRS232_RxPkt().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  CPU_INT16U  ProbeRS232_ParseRxPkt (void)
N{
N    CPU_INT16U  tx_len;
N
N
N    if (ProbeRS232_TxBufInUse == DEF_TRUE) {                    /* Do cmds only if Tx buffer is free.                   */
X    if (ProbeRS232_TxBufInUse == 1) {                     
N        return (0);
N    }
N
N    ProbeRS232_TxBufInUse = DEF_TRUE;
X    ProbeRS232_TxBufInUse = 1;
N    tx_len                = ProbeCom_ParseRxPkt((void     *)ProbeRS232_RxBuf,
N                                                (void     *)ProbeRS232_TxBuf,
N                                                (CPU_INT16U)ProbeRS232_RxLen,
N                                                (CPU_INT16U)PROBE_RS232_TX_BUF_SIZE);
X                                                (CPU_INT16U)128);
N
N    return (tx_len);
N}
N
N
N/*
N*********************************************************************************************************
N*                                           ProbeRS232_RxPkt()
N*
N* Description : Handle a received packet.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : ProbeRS232_RxHandler().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  void  ProbeRS232_RxPkt (void)
N{
N#if (PROBE_RS232_PARSE_TASK == DEF_TRUE)
X#if (1 == 1)
N    ProbeRS232_OS_Post();                                       /* We have a whole packet, signal task to parse it.     */
N
N
N
N#else
S
S
S
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR      cpu_sr = 0;
S#endif
S    CPU_INT16U  len;
S
S
S    len = ProbeRS232_ParseRxPkt();                              /* We have a whole packet, parse it.                    */
S    if (len > 0) {
S        CPU_CRITICAL_ENTER();
S        ProbeRS232_TxLen = len;
S        ProbeRS232_TxStart();
S        CPU_CRITICAL_EXIT();
S    }
N#endif
N}
N
N
N/*
N*********************************************************************************************************
N*                                         ProbeRS232_RxStoINT8U()
N*
N* Description : Store a byte in the receive buffer.
N*
N* Argument(s) : rx_data     Byte of data to store in the buffer.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : ProbeRS232_RxHandler().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  void  ProbeRS232_RxStoINT8U (CPU_INT08U rx_data)
N{
N    if (ProbeRS232_RxBufWrIx < PROBE_RS232_RX_BUF_SIZE) {
X    if (ProbeRS232_RxBufWrIx < 128) {
N        ProbeRS232_RxBuf[ProbeRS232_RxBufWrIx++] = rx_data;
N    }
N}
N
N
N/*
N*********************************************************************************************************
N*                                          ProbeRS232_RxBufClr()
N*
N* Description : Clear the data segment buffer write index.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : ProbeRS232_RxHandler().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  void  ProbeRS232_RxBufClr (void)
N{
N    ProbeRS232_RxBufWrIx = 0;
N}
N
N
N/*
N*********************************************************************************************************
N*                                          ProbeRS232_TxStart()
N*
N* Description : Cause transmission to begin.
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : ProbeRS232_Task(),
N*               ProbeRS232_RxPkt().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nstatic  void  ProbeRS232_TxStart (void)
N{
N    if (ProbeRS232_TxActiveFlag == DEF_FALSE) {                 /* If no other transmission is in progress ...          */
X    if (ProbeRS232_TxActiveFlag == 0) {                  
N        ProbeRS232_TxHandler();                                 /*  ... Handle transmit                    ...          */
N        ProbeRS232_TxIntEn();                                   /*  ... Enable transmit interrupts.                     */
N    }
N}
N
N
N#endif
