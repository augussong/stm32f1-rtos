; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\os_sem.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\os_sem.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\os_sem.crf ..\..\..\..\..\uCOS-II\Source\os_sem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSSemAccept PROC
;;;48     #if OS_SEM_ACCEPT_EN > 0
;;;49     INT16U  OSSemAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         INT16U     cnt;
;;;52     #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;53         OS_CPU_SR  cpu_sr = 0;
;;;54     #endif
;;;55     
;;;56     
;;;57     
;;;58     #if OS_ARG_CHK_EN > 0
;;;59         if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;60             return (0);
;;;61         }
;;;62     #endif
;;;63         if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000004  7820              LDRB     r0,[r4,#0]
000006  2803              CMP      r0,#3
000008  d001              BEQ      |L1.14|
;;;64             return (0);
00000a  2000              MOVS     r0,#0
;;;65         }
;;;66         OS_ENTER_CRITICAL();
;;;67         cnt = pevent->OSEventCnt;
;;;68         if (cnt > 0) {                                    /* See if resource is available                  */
;;;69             pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
;;;70         }
;;;71         OS_EXIT_CRITICAL();
;;;72         return (cnt);                                     /* Return semaphore count                        */
;;;73     }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  8925              LDRH     r5,[r4,#8]            ;67
000014  b10d              CBZ      r5,|L1.26|
000016  1e69              SUBS     r1,r5,#1              ;69
000018  8121              STRH     r1,[r4,#8]            ;69
                  |L1.26|
00001a  f7fffffe          BL       OS_CPU_SR_Restore
00001e  4628              MOV      r0,r5                 ;72
000020  bd70              POP      {r4-r6,pc}
;;;74     #endif
                          ENDP

                  OSSemCreate PROC
;;;93     
;;;94     OS_EVENT  *OSSemCreate (INT16U cnt)
000022  b570              PUSH     {r4-r6,lr}
;;;95     {
000024  4605              MOV      r5,r0
;;;96         OS_EVENT  *pevent;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR  cpu_sr = 0;
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
000026  48c2              LDR      r0,|L1.816|
000028  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00002a  2800              CMP      r0,#0
00002c  d001              BEQ      |L1.50|
;;;104            return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
00002e  2000              MOVS     r0,#0
;;;105        }
;;;106        OS_ENTER_CRITICAL();
;;;107        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;108        if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
;;;109            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;110        }
;;;111        OS_EXIT_CRITICAL();
;;;112        if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
;;;113            pevent->OSEventType    = OS_EVENT_TYPE_SEM;
;;;114            pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
;;;115            pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
;;;116    #if OS_EVENT_NAME_SIZE > 1
;;;117            pevent->OSEventName[0] = '?';                      /* Unknown name                             */
;;;118            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;119    #endif
;;;120            OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
;;;121        }
;;;122        return (pevent);
;;;123    }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  f7fffffe          BL       OS_CPU_SR_Save
000036  4601              MOV      r1,r0                 ;106
000038  48be              LDR      r0,|L1.820|
00003a  6804              LDR      r4,[r0,#0]            ;107  ; OSEventFreeList
00003c  b10c              CBZ      r4,|L1.66|
00003e  6862              LDR      r2,[r4,#4]            ;109
000040  6002              STR      r2,[r0,#0]            ;109  ; OSEventFreeList
                  |L1.66|
000042  4608              MOV      r0,r1                 ;111
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  b154              CBZ      r4,|L1.96|
00004a  2003              MOVS     r0,#3                 ;113
00004c  7020              STRB     r0,[r4,#0]            ;113
00004e  8125              STRH     r5,[r4,#8]            ;114
000050  2000              MOVS     r0,#0                 ;115
000052  6060              STR      r0,[r4,#4]            ;115
000054  213f              MOVS     r1,#0x3f              ;117
000056  73e1              STRB     r1,[r4,#0xf]          ;117
000058  7420              STRB     r0,[r4,#0x10]         ;118
00005a  4620              MOV      r0,r4                 ;120
00005c  f7fffffe          BL       OS_EventWaitListInit
                  |L1.96|
000060  4620              MOV      r0,r4                 ;122
000062  bd70              POP      {r4-r6,pc}
;;;124    
                          ENDP

                  OSSemDel PROC
;;;163    #if OS_SEM_DEL_EN > 0
;;;164    OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000064  e92d5ff0          PUSH     {r4-r12,lr}
;;;165    {
000068  4604              MOV      r4,r0
00006a  468b              MOV      r11,r1
00006c  4615              MOV      r5,r2
;;;166        BOOLEAN    tasks_waiting;
;;;167        OS_EVENT  *pevent_return;
;;;168    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;169        OS_CPU_SR  cpu_sr = 0;
;;;170    #endif
;;;171    
;;;172    
;;;173    
;;;174    #if OS_ARG_CHK_EN > 0
;;;175        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;176            return (pevent);
;;;177        }
;;;178        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;179            *perr = OS_ERR_PEVENT_NULL;
;;;180            return (pevent);
;;;181        }
;;;182    #endif
;;;183        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
00006e  7820              LDRB     r0,[r4,#0]
000070  2803              CMP      r0,#3
000072  d004              BEQ      |L1.126|
;;;184            *perr = OS_ERR_EVENT_TYPE;
000074  2001              MOVS     r0,#1
000076  7028              STRB     r0,[r5,#0]
;;;185            return (pevent);
000078  4620              MOV      r0,r4
;;;186        }
;;;187        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;188            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;189            return (pevent);
;;;190        }
;;;191        OS_ENTER_CRITICAL();
;;;192        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
;;;193            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;194        } else {
;;;195            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;196        }
;;;197        switch (opt) {
;;;198            case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
;;;199                 if (tasks_waiting == OS_FALSE) {
;;;200    #if OS_EVENT_NAME_SIZE > 1
;;;201                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;202                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;203    #endif
;;;204                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;205                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;206                     pevent->OSEventCnt     = 0;
;;;207                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;208                     OS_EXIT_CRITICAL();
;;;209                     *perr                  = OS_ERR_NONE;
;;;210                     pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
;;;211                 } else {
;;;212                     OS_EXIT_CRITICAL();
;;;213                     *perr                  = OS_ERR_TASK_WAITING;
;;;214                     pevent_return          = pevent;
;;;215                 }
;;;216                 break;
;;;217    
;;;218            case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
;;;219                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
;;;220                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;221                 }
;;;222    #if OS_EVENT_NAME_SIZE > 1
;;;223                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;224                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;225    #endif
;;;226                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;227                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;228                 pevent->OSEventCnt     = 0;
;;;229                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;230                 OS_EXIT_CRITICAL();
;;;231                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;232                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;233                 }
;;;234                 *perr                  = OS_ERR_NONE;
;;;235                 pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
;;;236                 break;
;;;237    
;;;238            default:
;;;239                 OS_EXIT_CRITICAL();
;;;240                 *perr                  = OS_ERR_INVALID_OPT;
;;;241                 pevent_return          = pevent;
;;;242                 break;
;;;243        }
;;;244        return (pevent_return);
;;;245    }
00007a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.126|
00007e  48ac              LDR      r0,|L1.816|
000080  7800              LDRB     r0,[r0,#0]            ;187  ; OSIntNesting
000082  b120              CBZ      r0,|L1.142|
000084  200f              MOVS     r0,#0xf               ;188
000086  7028              STRB     r0,[r5,#0]            ;188
000088  4620              MOV      r0,r4                 ;189
00008a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.142|
00008e  f7fffffe          BL       OS_CPU_SR_Save
000092  4682              MOV      r10,r0                ;191
000094  7aa0              LDRB     r0,[r4,#0xa]          ;192
000096  b108              CBZ      r0,|L1.156|
000098  2601              MOVS     r6,#1                 ;193
00009a  e000              B        |L1.158|
                  |L1.156|
00009c  2600              MOVS     r6,#0                 ;195
                  |L1.158|
00009e  f8df8294          LDR      r8,|L1.820|
0000a2  2700              MOVS     r7,#0                 ;205
0000a4  f04f093f          MOV      r9,#0x3f              ;201
0000a8  f1bb0f00          CMP      r11,#0                ;197
0000ac  d00a              BEQ      |L1.196|
0000ae  f1bb0f01          CMP      r11,#1                ;197
0000b2  d021              BEQ      |L1.248|
0000b4  4650              MOV      r0,r10                ;239
0000b6  f7fffffe          BL       OS_CPU_SR_Restore
0000ba  2007              MOVS     r0,#7                 ;240
0000bc  7028              STRB     r0,[r5,#0]            ;240
0000be  4620              MOV      r0,r4                 ;241
0000c0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.196|
0000c4  b13e              CBZ      r6,|L1.214|
0000c6  4650              MOV      r0,r10                ;212
0000c8  f7fffffe          BL       OS_CPU_SR_Restore
0000cc  2049              MOVS     r0,#0x49              ;213
0000ce  7028              STRB     r0,[r5,#0]            ;213
0000d0  4620              MOV      r0,r4                 ;214
0000d2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.214|
0000d6  f884900f          STRB     r9,[r4,#0xf]          ;201
0000da  7427              STRB     r7,[r4,#0x10]         ;202
0000dc  7027              STRB     r7,[r4,#0]            ;204
0000de  f8d80000          LDR      r0,[r8,#0]            ;205  ; OSEventFreeList
0000e2  6060              STR      r0,[r4,#4]            ;205
0000e4  8127              STRH     r7,[r4,#8]            ;206
0000e6  f8c84000          STR      r4,[r8,#0]            ;207  ; OSEventFreeList
0000ea  4650              MOV      r0,r10                ;208
0000ec  f7fffffe          BL       OS_CPU_SR_Restore
0000f0  702f              STRB     r7,[r5,#0]            ;209
0000f2  2000              MOVS     r0,#0                 ;210
0000f4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.248|
0000f8  b140              CBZ      r0,|L1.268|
                  |L1.250|
0000fa  2300              MOVS     r3,#0                 ;220
0000fc  2201              MOVS     r2,#1                 ;220
0000fe  4619              MOV      r1,r3                 ;220
000100  4620              MOV      r0,r4                 ;220
000102  f7fffffe          BL       OS_EventTaskRdy
000106  7aa0              LDRB     r0,[r4,#0xa]          ;219
000108  2800              CMP      r0,#0                 ;219
00010a  d1f6              BNE      |L1.250|
                  |L1.268|
00010c  f884900f          STRB     r9,[r4,#0xf]          ;223
000110  7427              STRB     r7,[r4,#0x10]         ;224
000112  7027              STRB     r7,[r4,#0]            ;226
000114  f8d80000          LDR      r0,[r8,#0]            ;227  ; OSEventFreeList
000118  6060              STR      r0,[r4,#4]            ;227
00011a  8127              STRH     r7,[r4,#8]            ;228
00011c  f8c84000          STR      r4,[r8,#0]            ;229  ; OSEventFreeList
000120  4650              MOV      r0,r10                ;230
000122  f7fffffe          BL       OS_CPU_SR_Restore
000126  2e01              CMP      r6,#1                 ;231
000128  d101              BNE      |L1.302|
00012a  f7fffffe          BL       OS_Sched
                  |L1.302|
00012e  702f              STRB     r7,[r5,#0]            ;234
000130  2000              MOVS     r0,#0                 ;235
000132  e8bd9ff0          POP      {r4-r12,pc}
;;;246    #endif
                          ENDP

                  OSSemPend PROC
;;;280    /*$PAGE*/
;;;281    void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000136  e92d47f0          PUSH     {r4-r10,lr}
;;;282    {
00013a  4605              MOV      r5,r0
00013c  4688              MOV      r8,r1
00013e  4614              MOV      r4,r2
;;;283    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;284        OS_CPU_SR  cpu_sr = 0;
;;;285    #endif
;;;286    
;;;287    
;;;288    
;;;289    #if OS_ARG_CHK_EN > 0
;;;290        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;291            return;
;;;292        }
;;;293        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;294            *perr = OS_ERR_PEVENT_NULL;
;;;295            return;
;;;296        }
;;;297    #endif
;;;298        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000140  7828              LDRB     r0,[r5,#0]
000142  2803              CMP      r0,#3
000144  d003              BEQ      |L1.334|
;;;299            *perr = OS_ERR_EVENT_TYPE;
000146  2001              MOVS     r0,#1
000148  7020              STRB     r0,[r4,#0]
;;;300            return;
;;;301        }
;;;302        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;303            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;304            return;
;;;305        }
;;;306        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;307            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;308            return;
;;;309        }
;;;310        OS_ENTER_CRITICAL();
;;;311        if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
;;;312            pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
;;;313            OS_EXIT_CRITICAL();
;;;314            *perr = OS_ERR_NONE;
;;;315            return;
;;;316        }
;;;317                                                          /* Otherwise, must wait until event occurs       */
;;;318        OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
;;;319        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;320        OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
;;;321        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;322        OS_EXIT_CRITICAL();
;;;323        OS_Sched();                                       /* Find next highest priority task ready         */
;;;324        OS_ENTER_CRITICAL();
;;;325        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;326            case OS_STAT_PEND_OK:
;;;327                 *perr = OS_ERR_NONE;
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_ABORT:
;;;331                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;332                 break;
;;;333    
;;;334            case OS_STAT_PEND_TO:
;;;335            default:        
;;;336                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;337                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;338                 break;
;;;339        }
;;;340        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;341        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;342        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;343    #if (OS_EVENT_MULTI_EN > 0)
;;;344        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;345    #endif
;;;346        OS_EXIT_CRITICAL();
;;;347    }
00014a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.334|
00014e  4878              LDR      r0,|L1.816|
000150  7800              LDRB     r0,[r0,#0]            ;302  ; OSIntNesting
000152  b118              CBZ      r0,|L1.348|
000154  2002              MOVS     r0,#2                 ;303
000156  7020              STRB     r0,[r4,#0]            ;303
000158  e8bd87f0          POP      {r4-r10,pc}
                  |L1.348|
00015c  4876              LDR      r0,|L1.824|
00015e  7800              LDRB     r0,[r0,#0]            ;306  ; OSLockNesting
000160  b118              CBZ      r0,|L1.362|
000162  200d              MOVS     r0,#0xd               ;307
000164  7020              STRB     r0,[r4,#0]            ;307
000166  e8bd87f0          POP      {r4-r10,pc}
                  |L1.362|
00016a  f7fffffe          BL       OS_CPU_SR_Save
00016e  4681              MOV      r9,r0                 ;310
000170  8928              LDRH     r0,[r5,#8]            ;311
000172  2600              MOVS     r6,#0                 ;311
000174  b138              CBZ      r0,|L1.390|
000176  1e40              SUBS     r0,r0,#1              ;312
000178  8128              STRH     r0,[r5,#8]            ;312
00017a  4648              MOV      r0,r9                 ;313
00017c  f7fffffe          BL       OS_CPU_SR_Restore
000180  7026              STRB     r6,[r4,#0]            ;314
000182  e8bd87f0          POP      {r4-r10,pc}
                  |L1.390|
000186  4f6d              LDR      r7,|L1.828|
000188  683a              LDR      r2,[r7,#0]            ;318  ; OSTCBCur
00018a  f8920030          LDRB     r0,[r2,#0x30]         ;318
00018e  f0400001          ORR      r0,r0,#1              ;318
000192  f8820030          STRB     r0,[r2,#0x30]         ;318
000196  f8826031          STRB     r6,[r2,#0x31]         ;319
00019a  f8a2802e          STRH     r8,[r2,#0x2e]         ;320
00019e  4628              MOV      r0,r5                 ;321
0001a0  f7fffffe          BL       OS_EventTaskWait
0001a4  4648              MOV      r0,r9                 ;322
0001a6  f7fffffe          BL       OS_CPU_SR_Restore
0001aa  f7fffffe          BL       OS_Sched
0001ae  f7fffffe          BL       OS_CPU_SR_Save
0001b2  4680              MOV      r8,r0                 ;324
0001b4  6838              LDR      r0,[r7,#0]            ;325  ; OSTCBCur
0001b6  f8901031          LDRB     r1,[r0,#0x31]         ;325
0001ba  b191              CBZ      r1,|L1.482|
0001bc  2902              CMP      r1,#2                 ;325
0001be  d012              BEQ      |L1.486|
0001c0  4629              MOV      r1,r5                 ;336
0001c2  f7fffffe          BL       OS_EventTaskRemove
0001c6  200a              MOVS     r0,#0xa               ;337
0001c8  7020              STRB     r0,[r4,#0]            ;337
                  |L1.458|
0001ca  6838              LDR      r0,[r7,#0]            ;340  ; OSTCBCur
0001cc  f8806030          STRB     r6,[r0,#0x30]         ;340
0001d0  f8806031          STRB     r6,[r0,#0x31]         ;341
0001d4  61c6              STR      r6,[r0,#0x1c]         ;342
0001d6  6206              STR      r6,[r0,#0x20]         ;344
0001d8  4640              MOV      r0,r8                 ;346
0001da  e8bd47f0          POP      {r4-r10,lr}           ;346
0001de  f7ffbffe          B.W      OS_CPU_SR_Restore
                  |L1.482|
0001e2  7026              STRB     r6,[r4,#0]            ;327
0001e4  e7f1              B        |L1.458|
                  |L1.486|
0001e6  200e              MOVS     r0,#0xe               ;331
0001e8  7020              STRB     r0,[r4,#0]            ;331
0001ea  e7ee              B        |L1.458|
;;;348    
                          ENDP

                  OSSemPendAbort PROC
;;;383    #if OS_SEM_PEND_ABORT_EN > 0
;;;384    INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
0001ec  e92d41f0          PUSH     {r4-r8,lr}
;;;385    {
0001f0  4605              MOV      r5,r0
0001f2  4688              MOV      r8,r1
0001f4  4616              MOV      r6,r2
;;;386        INT8U      nbr_tasks;
;;;387    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;388        OS_CPU_SR  cpu_sr = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392    
;;;393    #if OS_ARG_CHK_EN > 0
;;;394        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;395            return (0);
;;;396        }
;;;397        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;398            *perr = OS_ERR_PEVENT_NULL;
;;;399            return (0);
;;;400        }
;;;401    #endif
;;;402        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
0001f6  7829              LDRB     r1,[r5,#0]
;;;403            *perr = OS_ERR_EVENT_TYPE;
0001f8  2001              MOVS     r0,#1
0001fa  2903              CMP      r1,#3                 ;402
0001fc  d003              BEQ      |L1.518|
0001fe  7030              STRB     r0,[r6,#0]
;;;404            return (0);
000200  2000              MOVS     r0,#0
;;;405        }
;;;406        OS_ENTER_CRITICAL();
;;;407        if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
;;;408            nbr_tasks = 0;
;;;409            switch (opt) {
;;;410                case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
;;;411                     while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
;;;412                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;413                         nbr_tasks++;
;;;414                     }
;;;415                     break;
;;;416                     
;;;417                case OS_PEND_OPT_NONE:
;;;418                default:                                  /* No,  ready HPT       waiting on semaphore     */
;;;419                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;420                     nbr_tasks++;
;;;421                     break;
;;;422            }
;;;423            OS_EXIT_CRITICAL();
;;;424            OS_Sched();                                   /* Find HPT ready to run                         */
;;;425            *perr = OS_ERR_PEND_ABORT;
;;;426            return (nbr_tasks);
;;;427        }
;;;428        OS_EXIT_CRITICAL();
;;;429        *perr = OS_ERR_NONE;
;;;430        return (0);                                       /* No tasks waiting on semaphore                 */
;;;431    }
000202  e8bd81f0          POP      {r4-r8,pc}
                  |L1.518|
000206  f7fffffe          BL       OS_CPU_SR_Save
00020a  4607              MOV      r7,r0                 ;406
00020c  7aa8              LDRB     r0,[r5,#0xa]          ;407
00020e  b300              CBZ      r0,|L1.594|
000210  2400              MOVS     r4,#0                 ;408
000212  f1b80f01          CMP      r8,#1                 ;409
000216  d010              BEQ      |L1.570|
000218  2302              MOVS     r3,#2                 ;419
00021a  2201              MOVS     r2,#1                 ;419
00021c  2100              MOVS     r1,#0                 ;419
00021e  4628              MOV      r0,r5                 ;419
000220  f7fffffe          BL       OS_EventTaskRdy
000224  2401              MOVS     r4,#1                 ;420
                  |L1.550|
000226  4638              MOV      r0,r7                 ;423
000228  f7fffffe          BL       OS_CPU_SR_Restore
00022c  f7fffffe          BL       OS_Sched
000230  200e              MOVS     r0,#0xe               ;425
000232  7030              STRB     r0,[r6,#0]            ;425
000234  4620              MOV      r0,r4                 ;426
000236  e8bd81f0          POP      {r4-r8,pc}
                  |L1.570|
00023a  2302              MOVS     r3,#2                 ;412
00023c  2201              MOVS     r2,#1                 ;412
00023e  2100              MOVS     r1,#0                 ;412
000240  4628              MOV      r0,r5                 ;412
000242  f7fffffe          BL       OS_EventTaskRdy
000246  1c60              ADDS     r0,r4,#1              ;413
000248  b2c4              UXTB     r4,r0                 ;413
00024a  7aa8              LDRB     r0,[r5,#0xa]          ;411
00024c  2800              CMP      r0,#0                 ;411
00024e  d1f4              BNE      |L1.570|
000250  e7e9              B        |L1.550|
                  |L1.594|
000252  4638              MOV      r0,r7                 ;428
000254  f7fffffe          BL       OS_CPU_SR_Restore
000258  2000              MOVS     r0,#0                 ;429
00025a  7030              STRB     r0,[r6,#0]            ;429
00025c  e8bd81f0          POP      {r4-r8,pc}
;;;432    #endif
                          ENDP

                  OSSemPost PROC
;;;452    
;;;453    INT8U  OSSemPost (OS_EVENT *pevent)
000260  b570              PUSH     {r4-r6,lr}
;;;454    {
000262  4604              MOV      r4,r0
;;;455    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;456        OS_CPU_SR  cpu_sr = 0;
;;;457    #endif
;;;458    
;;;459    
;;;460    
;;;461    #if OS_ARG_CHK_EN > 0
;;;462        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;463            return (OS_ERR_PEVENT_NULL);
;;;464        }
;;;465    #endif
;;;466        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000264  7820              LDRB     r0,[r4,#0]
000266  2803              CMP      r0,#3
000268  d001              BEQ      |L1.622|
;;;467            return (OS_ERR_EVENT_TYPE);
00026a  2001              MOVS     r0,#1
;;;468        }
;;;469        OS_ENTER_CRITICAL();
;;;470        if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
;;;471                                                          /* Ready HPT waiting on event                    */
;;;472            (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;473            OS_EXIT_CRITICAL();
;;;474            OS_Sched();                                   /* Find HPT ready to run                         */
;;;475            return (OS_ERR_NONE);
;;;476        }
;;;477        if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
;;;478            pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
;;;479            OS_EXIT_CRITICAL();
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
;;;483        return (OS_ERR_SEM_OVF);
;;;484    }
00026c  bd70              POP      {r4-r6,pc}
                  |L1.622|
00026e  f7fffffe          BL       OS_CPU_SR_Save
000272  4605              MOV      r5,r0                 ;469
000274  7aa0              LDRB     r0,[r4,#0xa]          ;470
000276  b160              CBZ      r0,|L1.658|
000278  2300              MOVS     r3,#0                 ;472
00027a  2201              MOVS     r2,#1                 ;472
00027c  4619              MOV      r1,r3                 ;472
00027e  4620              MOV      r0,r4                 ;472
000280  f7fffffe          BL       OS_EventTaskRdy
000284  4628              MOV      r0,r5                 ;473
000286  f7fffffe          BL       OS_CPU_SR_Restore
00028a  f7fffffe          BL       OS_Sched
00028e  2000              MOVS     r0,#0                 ;475
000290  bd70              POP      {r4-r6,pc}
                  |L1.658|
000292  8920              LDRH     r0,[r4,#8]            ;477
000294  f64f71ff          MOV      r1,#0xffff            ;477
000298  4288              CMP      r0,r1                 ;477
00029a  d206              BCS      |L1.682|
00029c  1c40              ADDS     r0,r0,#1              ;478
00029e  8120              STRH     r0,[r4,#8]            ;478
0002a0  4628              MOV      r0,r5                 ;479
0002a2  f7fffffe          BL       OS_CPU_SR_Restore
0002a6  2000              MOVS     r0,#0                 ;480
0002a8  bd70              POP      {r4-r6,pc}
                  |L1.682|
0002aa  4628              MOV      r0,r5                 ;482
0002ac  f7fffffe          BL       OS_CPU_SR_Restore
0002b0  2032              MOVS     r0,#0x32              ;483
0002b2  bd70              POP      {r4-r6,pc}
;;;485    
                          ENDP

                  OSSemQuery PROC
;;;506    #if OS_SEM_QUERY_EN > 0
;;;507    INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
0002b4  b570              PUSH     {r4-r6,lr}
;;;508    {
0002b6  4604              MOV      r4,r0
0002b8  460d              MOV      r5,r1
;;;509    #if OS_LOWEST_PRIO <= 63
;;;510        INT8U     *psrc;
;;;511        INT8U     *pdest;
;;;512    #else
;;;513        INT16U    *psrc;
;;;514        INT16U    *pdest;
;;;515    #endif
;;;516        INT8U      i;
;;;517    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;518        OS_CPU_SR  cpu_sr = 0;
;;;519    #endif
;;;520    
;;;521    
;;;522    
;;;523    #if OS_ARG_CHK_EN > 0
;;;524        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;525            return (OS_ERR_PEVENT_NULL);
;;;526        }
;;;527        if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
;;;528            return (OS_ERR_PDATA_NULL);
;;;529        }
;;;530    #endif
;;;531        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
0002ba  7820              LDRB     r0,[r4,#0]
0002bc  2803              CMP      r0,#3
0002be  d001              BEQ      |L1.708|
;;;532            return (OS_ERR_EVENT_TYPE);
0002c0  2001              MOVS     r0,#1
;;;533        }
;;;534        OS_ENTER_CRITICAL();
;;;535        p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
;;;536        psrc                   = &pevent->OSEventTbl[0];
;;;537        pdest                  = &p_sem_data->OSEventTbl[0];
;;;538        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;539            *pdest++ = *psrc++;
;;;540        }
;;;541        p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
;;;542        OS_EXIT_CRITICAL();
;;;543        return (OS_ERR_NONE);
;;;544    }
0002c2  bd70              POP      {r4-r6,pc}
                  |L1.708|
0002c4  f7fffffe          BL       OS_CPU_SR_Save
0002c8  7aa1              LDRB     r1,[r4,#0xa]          ;535
0002ca  71a9              STRB     r1,[r5,#6]            ;535
0002cc  f104020b          ADD      r2,r4,#0xb            ;536
0002d0  1cab              ADDS     r3,r5,#2              ;537
0002d2  f04f0c00          MOV      r12,#0                ;538
                  |L1.726|
0002d6  f8121b01          LDRB     r1,[r2],#1            ;539
0002da  f8031b01          STRB     r1,[r3],#1            ;539
0002de  f10c0101          ADD      r1,r12,#1             ;538
0002e2  f0010cff          AND      r12,r1,#0xff          ;538
0002e6  f1bc0f04          CMP      r12,#4                ;538
0002ea  d3f4              BCC      |L1.726|
0002ec  8921              LDRH     r1,[r4,#8]            ;541
0002ee  8029              STRH     r1,[r5,#0]            ;541
0002f0  f7fffffe          BL       OS_CPU_SR_Restore
0002f4  2000              MOVS     r0,#0                 ;543
0002f6  bd70              POP      {r4-r6,pc}
;;;545    #endif                                                     /* OS_SEM_QUERY_EN                          */
                          ENDP

                  OSSemSet PROC
;;;572    #if OS_SEM_SET_EN > 0
;;;573    void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
0002f8  b570              PUSH     {r4-r6,lr}
;;;574    {
0002fa  4604              MOV      r4,r0
0002fc  460e              MOV      r6,r1
0002fe  4615              MOV      r5,r2
;;;575    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;576        OS_CPU_SR  cpu_sr = 0;
;;;577    #endif
;;;578    
;;;579    
;;;580    
;;;581    #if OS_ARG_CHK_EN > 0
;;;582        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;583            return;
;;;584        }
;;;585        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;586            *perr = OS_ERR_PEVENT_NULL;
;;;587            return;
;;;588        }
;;;589    #endif
;;;590        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000300  7820              LDRB     r0,[r4,#0]
000302  2803              CMP      r0,#3
000304  d002              BEQ      |L1.780|
;;;591            *perr = OS_ERR_EVENT_TYPE;
000306  2001              MOVS     r0,#1
000308  7028              STRB     r0,[r5,#0]
;;;592            return;
;;;593        }
;;;594        OS_ENTER_CRITICAL();
;;;595        *perr = OS_ERR_NONE;
;;;596        if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
;;;597            pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
;;;598        } else {                                          /* No                                            */
;;;599            if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
;;;600                pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
;;;601            } else {
;;;602                *perr              = OS_ERR_TASK_WAITING;
;;;603            }
;;;604        }
;;;605        OS_EXIT_CRITICAL();
;;;606    }
00030a  bd70              POP      {r4-r6,pc}
                  |L1.780|
00030c  f7fffffe          BL       OS_CPU_SR_Save
000310  2100              MOVS     r1,#0                 ;595
000312  7029              STRB     r1,[r5,#0]            ;595
000314  8921              LDRH     r1,[r4,#8]            ;596
000316  b109              CBZ      r1,|L1.796|
000318  8126              STRH     r6,[r4,#8]            ;597
00031a  e003              B        |L1.804|
                  |L1.796|
00031c  7aa1              LDRB     r1,[r4,#0xa]          ;599
00031e  b129              CBZ      r1,|L1.812|
000320  2149              MOVS     r1,#0x49              ;602
000322  7029              STRB     r1,[r5,#0]            ;602
                  |L1.804|
000324  e8bd4070          POP      {r4-r6,lr}            ;605
000328  f7ffbffe          B.W      OS_CPU_SR_Restore
                  |L1.812|
00032c  8126              STRH     r6,[r4,#8]            ;600
00032e  e7f9              B        |L1.804|
;;;607    #endif
                          ENDP

                  |L1.816|
                          DCD      OSIntNesting
                  |L1.820|
                          DCD      OSEventFreeList
                  |L1.824|
                          DCD      OSLockNesting
                  |L1.828|
                          DCD      OSTCBCur
