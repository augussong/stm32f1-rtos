; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\os_task.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\os_task.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\os_task.crf ..\..\..\..\..\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0
;;;51     INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;52     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;53     #if (OS_EVENT_EN)
;;;54         OS_EVENT  *pevent;
;;;55     #if (OS_EVENT_MULTI_EN > 0)
;;;56         OS_EVENT **pevents;
;;;57     #endif
;;;58     #endif
;;;59         OS_TCB    *ptcb;
;;;60         INT8U      y_new;
;;;61         INT8U      x_new;
;;;62         INT8U      y_old;
;;;63     #if OS_LOWEST_PRIO <= 63
;;;64         INT8U      bity_new;
;;;65         INT8U      bitx_new;
;;;66         INT8U      bity_old;
;;;67         INT8U      bitx_old;
;;;68     #else
;;;69         INT16U     bity_new;
;;;70         INT16U     bitx_new;
;;;71         INT16U     bity_old;
;;;72         INT16U     bitx_old;
;;;73     #endif
;;;74     #if OS_CRITICAL_METHOD == 3
;;;75         OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
;;;76     #endif
;;;77     
;;;78     
;;;79     /*$PAGE*/
;;;80     #if OS_ARG_CHK_EN > 0
;;;81         if (oldprio >= OS_LOWEST_PRIO) {
;;;82             if (oldprio != OS_PRIO_SELF) {
;;;83                 return (OS_ERR_PRIO_INVALID);
;;;84             }
;;;85         }
;;;86         if (newprio >= OS_LOWEST_PRIO) {
;;;87             return (OS_ERR_PRIO_INVALID);
;;;88         }
;;;89     #endif
;;;90         OS_ENTER_CRITICAL();
000008  f7fffffe          BL       OS_CPU_SR_Save
;;;91         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
00000c  4af8              LDR      r2,|L1.1008|
00000e  f8521027          LDR      r1,[r2,r7,LSL #2]
000012  b121              CBZ      r1,|L1.30|
;;;92             OS_EXIT_CRITICAL();
000014  f7fffffe          BL       OS_CPU_SR_Restore
;;;93             return (OS_ERR_PRIO_EXIST);
000018  2028              MOVS     r0,#0x28
;;;94         }
;;;95         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;96             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;97         }
;;;98         ptcb = OSTCBPrioTbl[oldprio];
;;;99         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_PRIO);
;;;102        }
;;;103        if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;104            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;105            return (OS_ERR_TASK_NOT_EXIST);
;;;106        }
;;;107    #if OS_LOWEST_PRIO <= 63
;;;108        y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
;;;109        x_new                 = (INT8U)(newprio & 0x07);
;;;110        bity_new              = (INT8U)(1 << y_new);
;;;111        bitx_new              = (INT8U)(1 << x_new);
;;;112    #else
;;;113        y_new                 = (INT8U)((newprio >> 4) & 0x0F);
;;;114        x_new                 = (INT8U)( newprio & 0x0F);
;;;115        bity_new              = (INT16U)(1 << y_new);
;;;116        bitx_new              = (INT16U)(1 << x_new);
;;;117    #endif
;;;118    
;;;119        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;120        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;121        y_old                 =  ptcb->OSTCBY;
;;;122        bity_old              =  ptcb->OSTCBBitY;
;;;123        bitx_old              =  ptcb->OSTCBBitX;
;;;124        if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
;;;125             OSRdyTbl[y_old] &= ~bitx_old;
;;;126             if (OSRdyTbl[y_old] == 0) {
;;;127                 OSRdyGrp &= ~bity_old;
;;;128             }
;;;129             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;130             OSRdyTbl[y_new] |= bitx_new;
;;;131        }
;;;132    
;;;133    #if (OS_EVENT_EN)
;;;134        pevent = ptcb->OSTCBEventPtr;
;;;135        if (pevent != (OS_EVENT *)0) {
;;;136            pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
;;;137            if (pevent->OSEventTbl[y_old] == 0) {
;;;138                pevent->OSEventGrp    &= ~bity_old;
;;;139            }
;;;140            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;141            pevent->OSEventTbl[y_new] |= bitx_new;
;;;142        }
;;;143    #if (OS_EVENT_MULTI_EN > 0)
;;;144        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;145            pevents =  ptcb->OSTCBEventMultiPtr;
;;;146            pevent  = *pevents;
;;;147            while (pevent != (OS_EVENT *)0) {
;;;148                pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
;;;149                if (pevent->OSEventTbl[y_old] == 0) {
;;;150                    pevent->OSEventGrp    &= ~bity_old;
;;;151                }
;;;152                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;153                pevent->OSEventTbl[y_new] |= bitx_new;
;;;154                pevents++;
;;;155                pevent                     = *pevents;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #endif
;;;160    
;;;161        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;162        ptcb->OSTCBY    = y_new;
;;;163        ptcb->OSTCBX    = x_new;
;;;164        ptcb->OSTCBBitY = bity_new;
;;;165        ptcb->OSTCBBitX = bitx_new;
;;;166        OS_EXIT_CRITICAL();
;;;167        if (OSRunning == OS_TRUE) {
;;;168            OS_Sched();                                         /* Find new highest priority task          */
;;;169        }
;;;170        return (OS_ERR_NONE);
;;;171    }
00001a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.30|
00001e  2cff              CMP      r4,#0xff              ;95
000020  d103              BNE      |L1.42|
000022  49f4              LDR      r1,|L1.1012|
000024  6809              LDR      r1,[r1,#0]            ;96  ; OSTCBCur
000026  f8914032          LDRB     r4,[r1,#0x32]         ;96
                  |L1.42|
00002a  f8523024          LDR      r3,[r2,r4,LSL #2]     ;98
00002e  b31b              CBZ      r3,|L1.120|
000030  2b01              CMP      r3,#1                 ;103
000032  d026              BEQ      |L1.130|
000034  ea4f0cd7          LSR      r12,r7,#3             ;108
000038  f0070b07          AND      r11,r7,#7             ;109
00003c  2101              MOVS     r1,#1                 ;110
00003e  fa01f50c          LSL      r5,r1,r12             ;110
000042  b2ee              UXTB     r6,r5                 ;110
000044  fa01f10b          LSL      r1,r1,r11             ;111
000048  b2c9              UXTB     r1,r1                 ;111
00004a  2500              MOVS     r5,#0                 ;119
00004c  f8425024          STR      r5,[r2,r4,LSL #2]     ;119
000050  f8423027          STR      r3,[r2,r7,LSL #2]     ;120
000054  f8935034          LDRB     r5,[r3,#0x34]         ;121
000058  f893a036          LDRB     r10,[r3,#0x36]        ;122
00005c  f8938035          LDRB     r8,[r3,#0x35]         ;123
000060  4ce5              LDR      r4,|L1.1016|
000062  5d62              LDRB     r2,[r4,r5]            ;124
000064  ea120f08          TST      r2,r8                 ;124
000068  d020              BEQ      |L1.172|
00006a  ea220208          BIC      r2,r2,r8              ;125
00006e  5562              STRB     r2,[r4,r5]            ;125
000070  f8df9388          LDR      r9,|L1.1020|
000074  b152              CBZ      r2,|L1.140|
000076  e00f              B        |L1.152|
                  |L1.120|
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2029              MOVS     r0,#0x29              ;101
00007e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.130|
000082  f7fffffe          BL       OS_CPU_SR_Restore
000086  2043              MOVS     r0,#0x43              ;105
000088  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.140|
00008c  f8992000          LDRB     r2,[r9,#0]            ;127  ; OSRdyGrp
000090  ea22020a          BIC      r2,r2,r10             ;127
000094  f8892000          STRB     r2,[r9,#0]            ;127
                  |L1.152|
000098  f8992000          LDRB     r2,[r9,#0]            ;129  ; OSRdyGrp
00009c  4332              ORRS     r2,r2,r6              ;129
00009e  f8892000          STRB     r2,[r9,#0]            ;129
0000a2  f814200c          LDRB     r2,[r4,r12]           ;130
0000a6  430a              ORRS     r2,r2,r1              ;130
0000a8  f804200c          STRB     r2,[r4,r12]           ;130
                  |L1.172|
0000ac  69da              LDR      r2,[r3,#0x1c]         ;134
0000ae  b1a2              CBZ      r2,|L1.218|
0000b0  1954              ADDS     r4,r2,r5              ;136
0000b2  f894900b          LDRB     r9,[r4,#0xb]          ;136
0000b6  ea290908          BIC      r9,r9,r8              ;136
0000ba  f884900b          STRB     r9,[r4,#0xb]          ;136
0000be  f1b90f00          CMP      r9,#0                 ;137
0000c2  d103              BNE      |L1.204|
0000c4  7a94              LDRB     r4,[r2,#0xa]          ;138
0000c6  ea24040a          BIC      r4,r4,r10             ;138
0000ca  7294              STRB     r4,[r2,#0xa]          ;138
                  |L1.204|
0000cc  7a94              LDRB     r4,[r2,#0xa]          ;140
0000ce  4334              ORRS     r4,r4,r6              ;140
0000d0  7294              STRB     r4,[r2,#0xa]          ;140
0000d2  4462              ADD      r2,r2,r12             ;141
0000d4  7ad4              LDRB     r4,[r2,#0xb]          ;141
0000d6  430c              ORRS     r4,r4,r1              ;141
0000d8  72d4              STRB     r4,[r2,#0xb]          ;141
                  |L1.218|
0000da  6a1c              LDR      r4,[r3,#0x20]         ;144
0000dc  b31c              CBZ      r4,|L1.294|
0000de  6822              LDR      r2,[r4,#0]            ;146
0000e0  b30a              CBZ      r2,|L1.294|
                  |L1.226|
0000e2  eb020905          ADD      r9,r2,r5              ;148
0000e6  f899e00b          LDRB     lr,[r9,#0xb]          ;148
0000ea  ea2e0e08          BIC      lr,lr,r8              ;148
0000ee  f889e00b          STRB     lr,[r9,#0xb]          ;148
0000f2  f1be0f00          CMP      lr,#0                 ;149
0000f6  d105              BNE      |L1.260|
0000f8  f892900a          LDRB     r9,[r2,#0xa]          ;150
0000fc  ea29090a          BIC      r9,r9,r10             ;150
000100  f882900a          STRB     r9,[r2,#0xa]          ;150
                  |L1.260|
000104  f892900a          LDRB     r9,[r2,#0xa]          ;152
000108  ea490906          ORR      r9,r9,r6              ;152
00010c  f882900a          STRB     r9,[r2,#0xa]          ;152
000110  4462              ADD      r2,r2,r12             ;153
000112  f892900b          LDRB     r9,[r2,#0xb]          ;153
000116  ea490901          ORR      r9,r9,r1              ;153
00011a  f882900b          STRB     r9,[r2,#0xb]          ;153
00011e  1d24              ADDS     r4,r4,#4              ;154
000120  6822              LDR      r2,[r4,#0]            ;155
000122  2a00              CMP      r2,#0                 ;147
000124  d1dd              BNE      |L1.226|
                  |L1.294|
000126  f8837032          STRB     r7,[r3,#0x32]         ;161
00012a  f883c034          STRB     r12,[r3,#0x34]        ;162
00012e  f883b033          STRB     r11,[r3,#0x33]        ;163
000132  f8836036          STRB     r6,[r3,#0x36]         ;164
000136  f8831035          STRB     r1,[r3,#0x35]         ;165
00013a  f7fffffe          BL       OS_CPU_SR_Restore
00013e  48b0              LDR      r0,|L1.1024|
000140  7800              LDRB     r0,[r0,#0]            ;167  ; OSRunning
000142  2801              CMP      r0,#1                 ;167
000144  d101              BNE      |L1.330|
000146  f7fffffe          BL       OS_Sched
                  |L1.330|
00014a  2000              MOVS     r0,#0                 ;170
00014c  e8bd9ff0          POP      {r4-r12,pc}
;;;172    #endif
                          ENDP

                  OSTaskCreate PROC
;;;214    #if OS_TASK_CREATE_EN > 0
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
000150  e92d41f0          PUSH     {r4-r8,lr}
;;;216    {
000154  b084              SUB      sp,sp,#0x10
000156  4605              MOV      r5,r0
000158  460e              MOV      r6,r1
00015a  4690              MOV      r8,r2
00015c  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;227            return (OS_ERR_PRIO_INVALID);
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
00015e  f7fffffe          BL       OS_CPU_SR_Save
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
000162  49a8              LDR      r1,|L1.1028|
000164  7809              LDRB     r1,[r1,#0]  ; OSIntNesting
000166  b129              CBZ      r1,|L1.372|
;;;232            OS_EXIT_CRITICAL();
000168  f7fffffe          BL       OS_CPU_SR_Restore
;;;233            return (OS_ERR_TASK_CREATE_ISR);
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
00016c  b004              ADD      sp,sp,#0x10
00016e  203c              MOVS     r0,#0x3c              ;233
000170  e8bd81f0          POP      {r4-r8,pc}
                  |L1.372|
000174  4f9e              LDR      r7,|L1.1008|
000176  f8571024          LDR      r1,[r7,r4,LSL #2]     ;235
00017a  b129              CBZ      r1,|L1.392|
00017c  f7fffffe          BL       OS_CPU_SR_Restore
000180  b004              ADD      sp,sp,#0x10
000182  2028              MOVS     r0,#0x28              ;253
000184  e8bd81f0          POP      {r4-r8,pc}
                  |L1.392|
000188  2101              MOVS     r1,#1                 ;236
00018a  f8471024          STR      r1,[r7,r4,LSL #2]     ;236
00018e  f7fffffe          BL       OS_CPU_SR_Restore
000192  2300              MOVS     r3,#0                 ;239
000194  4642              MOV      r2,r8                 ;239
000196  4631              MOV      r1,r6                 ;239
000198  4628              MOV      r0,r5                 ;239
00019a  f7fffffe          BL       OSTaskStkInit
00019e  2600              MOVS     r6,#0                 ;240
0001a0  4601              MOV      r1,r0                 ;240
0001a2  9600              STR      r6,[sp,#0]            ;240
0001a4  9601              STR      r6,[sp,#4]            ;240
0001a6  4633              MOV      r3,r6                 ;240
0001a8  4632              MOV      r2,r6                 ;240
0001aa  4620              MOV      r0,r4                 ;240
0001ac  9602              STR      r6,[sp,#8]            ;240
0001ae  f7fffffe          BL       OS_TCBInit
0001b2  4605              MOV      r5,r0                 ;240
0001b4  b14d              CBZ      r5,|L1.458|
0001b6  f7fffffe          BL       OS_CPU_SR_Save
0001ba  f8476024          STR      r6,[r7,r4,LSL #2]     ;247
0001be  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.450|
0001c2  b004              ADD      sp,sp,#0x10
0001c4  4628              MOV      r0,r5                 ;250
0001c6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.458|
0001ca  488d              LDR      r0,|L1.1024|
0001cc  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
0001ce  2801              CMP      r0,#1                 ;242
0001d0  d1f7              BNE      |L1.450|
0001d2  f7fffffe          BL       OS_Sched
0001d6  e7f4              B        |L1.450|
;;;255    #endif
                          ENDP

                  OS_TaskStkClr PROC
;;;1075   #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;1076   void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
0001d8  f0120f01          TST      r2,#1
;;;1077   {
0001dc  d00a              BEQ      |L1.500|
;;;1078       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
;;;1079           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
0001de  f0120f02          TST      r2,#2
0001e2  d007              BEQ      |L1.500|
;;;1080   #if OS_STK_GROWTH == 1
;;;1081               while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
0001e4  2900              CMP      r1,#0
0001e6  d005              BEQ      |L1.500|
0001e8  2200              MOVS     r2,#0
                  |L1.490|
;;;1082                   size--;
0001ea  1e49              SUBS     r1,r1,#1
;;;1083                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
0001ec  f8402b04          STR      r2,[r0],#4
0001f0  2900              CMP      r1,#0                 ;1081
0001f2  d1fa              BNE      |L1.490|
                  |L1.500|
;;;1084               }
;;;1085   #else
;;;1086               while (size > 0) {                         /* Stack grows from LOW to HIGH memory          */
;;;1087                   size--;
;;;1088                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1089               }
;;;1090   #endif
;;;1091           }
;;;1092       }
;;;1093   }
0001f4  4770              BX       lr
;;;1094   
                          ENDP

                  OSTaskCreateExt PROC
;;;327    #if OS_TASK_CREATE_EXT_EN > 0
;;;328    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
0001f6  e92d4fff          PUSH     {r0-r11,lr}
;;;329                            void    *p_arg,
;;;330                            OS_STK  *ptos,
;;;331                            INT8U    prio,
;;;332                            INT16U   id,
;;;333                            OS_STK  *pbos,
;;;334                            INT32U   stk_size,
;;;335                            void    *pext,
;;;336                            INT16U   opt)
;;;337    {
0001fa  b083              SUB      sp,sp,#0xc
0001fc  4683              MOV      r11,r0
0001fe  461c              MOV      r4,r3
000200  f8dda040          LDR      r10,[sp,#0x40]
000204  f8dd9044          LDR      r9,[sp,#0x44]
000208  9f13              LDR      r7,[sp,#0x4c]
00020a  9e12              LDR      r6,[sp,#0x48]
00020c  9d14              LDR      r5,[sp,#0x50]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;348            return (OS_ERR_PRIO_INVALID);
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
00020e  f7fffffe          BL       OS_CPU_SR_Save
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
000212  497c              LDR      r1,|L1.1028|
000214  7809              LDRB     r1,[r1,#0]  ; OSIntNesting
000216  b129              CBZ      r1,|L1.548|
;;;353            OS_EXIT_CRITICAL();
000218  f7fffffe          BL       OS_CPU_SR_Restore
;;;354            return (OS_ERR_TASK_CREATE_ISR);
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
00021c  b007              ADD      sp,sp,#0x1c
00021e  203c              MOVS     r0,#0x3c              ;354
000220  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.548|
000224  f8df81c8          LDR      r8,|L1.1008|
000228  f8581024          LDR      r1,[r8,r4,LSL #2]     ;356
00022c  b129              CBZ      r1,|L1.570|
00022e  f7fffffe          BL       OS_CPU_SR_Restore
000232  b007              ADD      sp,sp,#0x1c
000234  2028              MOVS     r0,#0x28              ;379
000236  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.570|
00023a  2101              MOVS     r1,#1                 ;357
00023c  f8481024          STR      r1,[r8,r4,LSL #2]     ;357
000240  f7fffffe          BL       OS_CPU_SR_Restore
000244  462a              MOV      r2,r5                 ;362
000246  4631              MOV      r1,r6                 ;362
000248  4648              MOV      r0,r9                 ;362
00024a  f7fffffe          BL       OS_TaskStkClr
00024e  462b              MOV      r3,r5                 ;365
000250  4658              MOV      r0,r11                ;365
000252  9a05              LDR      r2,[sp,#0x14]         ;365
000254  9904              LDR      r1,[sp,#0x10]         ;365
000256  f7fffffe          BL       OSTaskStkInit
00025a  4601              MOV      r1,r0                 ;366
00025c  4653              MOV      r3,r10                ;366
00025e  464a              MOV      r2,r9                 ;366
000260  4620              MOV      r0,r4                 ;366
000262  9701              STR      r7,[sp,#4]            ;366
000264  9600              STR      r6,[sp,#0]            ;366
000266  9502              STR      r5,[sp,#8]            ;366
000268  f7fffffe          BL       OS_TCBInit
00026c  4605              MOV      r5,r0                 ;366
00026e  b155              CBZ      r5,|L1.646|
000270  f7fffffe          BL       OS_CPU_SR_Save
000274  2100              MOVS     r1,#0                 ;373
000276  f8481024          STR      r1,[r8,r4,LSL #2]     ;373
00027a  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.638|
00027e  b007              ADD      sp,sp,#0x1c
000280  4628              MOV      r0,r5                 ;376
000282  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.646|
000286  485e              LDR      r0,|L1.1024|
000288  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
00028a  2801              CMP      r0,#1                 ;368
00028c  d1f7              BNE      |L1.638|
00028e  f7fffffe          BL       OS_Sched
000292  e7f4              B        |L1.638|
;;;381    #endif
                          ENDP

                  OSTaskDel PROC
;;;419    #if OS_TASK_DEL_EN > 0
;;;420    INT8U  OSTaskDel (INT8U prio)
000294  e92d47f0          PUSH     {r4-r10,lr}
;;;421    {
000298  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
00029a  485a              LDR      r0,|L1.1028|
00029c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00029e  2800              CMP      r0,#0
0002a0  d002              BEQ      |L1.680|
;;;433            return (OS_ERR_TASK_DEL_ISR);
0002a2  2040              MOVS     r0,#0x40
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
0002a4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.680|
0002a8  2d1f              CMP      r5,#0x1f              ;435
0002aa  d005              BEQ      |L1.696|
0002ac  f7fffffe          BL       OS_CPU_SR_Save
0002b0  4607              MOV      r7,r0                 ;447
0002b2  2dff              CMP      r5,#0xff              ;448
0002b4  d003              BEQ      |L1.702|
0002b6  e006              B        |L1.710|
                  |L1.696|
0002b8  203e              MOVS     r0,#0x3e              ;436
0002ba  e8bd87f0          POP      {r4-r10,pc}
                  |L1.702|
0002be  484d              LDR      r0,|L1.1012|
0002c0  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
0002c2  f8905032          LDRB     r5,[r0,#0x32]         ;449
                  |L1.710|
0002c6  4e4a              LDR      r6,|L1.1008|
0002c8  f8564025          LDR      r4,[r6,r5,LSL #2]     ;451
0002cc  b15c              CBZ      r4,|L1.742|
0002ce  2c01              CMP      r4,#1                 ;456
0002d0  d00f              BEQ      |L1.754|
0002d2  f8940034          LDRB     r0,[r4,#0x34]         ;461
0002d6  4a48              LDR      r2,|L1.1016|
0002d8  f8943035          LDRB     r3,[r4,#0x35]         ;461
0002dc  5c11              LDRB     r1,[r2,r0]            ;461
0002de  4399              BICS     r1,r1,r3              ;461
0002e0  5411              STRB     r1,[r2,r0]            ;461
0002e2  b161              CBZ      r1,|L1.766|
0002e4  e012              B        |L1.780|
                  |L1.742|
0002e6  4638              MOV      r0,r7                 ;453
0002e8  f7fffffe          BL       OS_CPU_SR_Restore
0002ec  2043              MOVS     r0,#0x43              ;454
0002ee  e8bd87f0          POP      {r4-r10,pc}
                  |L1.754|
0002f2  4638              MOV      r0,r7                 ;457
0002f4  f7fffffe          BL       OS_CPU_SR_Restore
0002f8  203d              MOVS     r0,#0x3d              ;458
0002fa  e8bd87f0          POP      {r4-r10,pc}
                  |L1.766|
0002fe  483f              LDR      r0,|L1.1020|
000300  f8941036          LDRB     r1,[r4,#0x36]         ;463
000304  7802              LDRB     r2,[r0,#0]            ;463  ; OSRdyGrp
000306  ea220101          BIC      r1,r2,r1              ;463
00030a  7001              STRB     r1,[r0,#0]            ;463
                  |L1.780|
00030c  69e1              LDR      r1,[r4,#0x1c]         ;467
00030e  b111              CBZ      r1,|L1.790|
000310  4620              MOV      r0,r4                 ;468
000312  f7fffffe          BL       OS_EventTaskRemove
                  |L1.790|
000316  6a21              LDR      r1,[r4,#0x20]         ;471
000318  b111              CBZ      r1,|L1.800|
00031a  4620              MOV      r0,r4                 ;472
00031c  f7fffffe          BL       OS_EventTaskRemoveMulti
                  |L1.800|
000320  6aa0              LDR      r0,[r4,#0x28]         ;478
000322  b108              CBZ      r0,|L1.808|
000324  f7fffffe          BL       OS_FlagUnlink
                  |L1.808|
000328  f04f0800          MOV      r8,#0                 ;484
00032c  f8a4802e          STRH     r8,[r4,#0x2e]         ;484
000330  f8848030          STRB     r8,[r4,#0x30]         ;485
000334  f8848031          STRB     r8,[r4,#0x31]         ;486
000338  f8df90cc          LDR      r9,|L1.1032|
00033c  f8990000          LDRB     r0,[r9,#0]            ;487  ; OSLockNesting
000340  28ff              CMP      r0,#0xff              ;487
000342  d202              BCS      |L1.842|
000344  1c40              ADDS     r0,r0,#1              ;488
000346  f8890000          STRB     r0,[r9,#0]            ;488
                  |L1.842|
00034a  4638              MOV      r0,r7                 ;490
00034c  f7fffffe          BL       OS_CPU_SR_Restore
000350  f7fffffe          BL       OS_Dummy
000354  f7fffffe          BL       OS_CPU_SR_Save
000358  4607              MOV      r7,r0                 ;492
00035a  f8990000          LDRB     r0,[r9,#0]            ;493  ; OSLockNesting
00035e  b110              CBZ      r0,|L1.870|
000360  1e40              SUBS     r0,r0,#1              ;494
000362  f8890000          STRB     r0,[r9,#0]            ;494
                  |L1.870|
000366  4620              MOV      r0,r4                 ;496
000368  f7fffffe          BL       OSTaskDelHook
00036c  4827              LDR      r0,|L1.1036|
00036e  7801              LDRB     r1,[r0,#0]            ;497  ; OSTaskCtr
000370  1e49              SUBS     r1,r1,#1              ;497
000372  7001              STRB     r1,[r0,#0]            ;497
000374  f8468025          STR      r8,[r6,r5,LSL #2]     ;498
000378  69a0              LDR      r0,[r4,#0x18]         ;499
00037a  b1a8              CBZ      r0,|L1.936|
00037c  6961              LDR      r1,[r4,#0x14]         ;503
00037e  6141              STR      r1,[r0,#0x14]         ;503
000380  6961              LDR      r1,[r4,#0x14]         ;504
000382  69a0              LDR      r0,[r4,#0x18]         ;504
000384  6188              STR      r0,[r1,#0x18]         ;504
                  |L1.902|
000386  4822              LDR      r0,|L1.1040|
000388  6801              LDR      r1,[r0,#0]            ;506  ; OSTCBFreeList
00038a  6161              STR      r1,[r4,#0x14]         ;506
00038c  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
00038e  203f              MOVS     r0,#0x3f              ;509
000390  f884004c          STRB     r0,[r4,#0x4c]         ;509
000394  f884804d          STRB     r8,[r4,#0x4d]         ;510
000398  4638              MOV      r0,r7                 ;512
00039a  f7fffffe          BL       OS_CPU_SR_Restore
00039e  4818              LDR      r0,|L1.1024|
0003a0  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
0003a2  2801              CMP      r0,#1                 ;513
0003a4  d007              BEQ      |L1.950|
0003a6  e008              B        |L1.954|
                  |L1.936|
0003a8  6960              LDR      r0,[r4,#0x14]         ;500
0003aa  f8c08018          STR      r8,[r0,#0x18]         ;500
0003ae  4919              LDR      r1,|L1.1044|
0003b0  6960              LDR      r0,[r4,#0x14]         ;501
0003b2  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
0003b4  e7e7              B        |L1.902|
                  |L1.950|
0003b6  f7fffffe          BL       OS_Sched
                  |L1.954|
0003ba  2000              MOVS     r0,#0                 ;516
0003bc  e8bd87f0          POP      {r4-r10,pc}
;;;518    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;566    #if OS_TASK_DEL_EN > 0
;;;567    INT8U  OSTaskDelReq (INT8U prio)
0003c0  b510              PUSH     {r4,lr}
;;;568    {
0003c2  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
0003c4  2c1f              CMP      r4,#0x1f
0003c6  d027              BEQ      |L1.1048|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
0003c8  2cff              CMP      r4,#0xff
0003ca  d027              BEQ      |L1.1052|
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
0003cc  f7fffffe          BL       OS_CPU_SR_Save
0003d0  4601              MOV      r1,r0
;;;594        ptcb = OSTCBPrioTbl[prio];
0003d2  4807              LDR      r0,|L1.1008|
0003d4  f8500024          LDR      r0,[r0,r4,LSL #2]
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
0003d8  b350              CBZ      r0,|L1.1072|
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
0003da  2801              CMP      r0,#1
0003dc  d02d              BEQ      |L1.1082|
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
0003de  223f              MOVS     r2,#0x3f
0003e0  f8802037          STRB     r2,[r0,#0x37]
;;;604        OS_EXIT_CRITICAL();
0003e4  4608              MOV      r0,r1
0003e6  f7fffffe          BL       OS_CPU_SR_Restore
;;;605        return (OS_ERR_NONE);
0003ea  2000              MOVS     r0,#0
                  |L1.1004|
;;;606    }
0003ec  bd10              POP      {r4,pc}
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      OSTCBPrioTbl
                  |L1.1012|
                          DCD      OSTCBCur
                  |L1.1016|
                          DCD      OSRdyTbl
                  |L1.1020|
                          DCD      OSRdyGrp
                  |L1.1024|
                          DCD      OSRunning
                  |L1.1028|
                          DCD      OSIntNesting
                  |L1.1032|
                          DCD      OSLockNesting
                  |L1.1036|
                          DCD      OSTaskCtr
                  |L1.1040|
                          DCD      OSTCBFreeList
                  |L1.1044|
                          DCD      OSTCBList
                  |L1.1048|
000418  203e              MOVS     r0,#0x3e              ;578
00041a  e7e7              B        |L1.1004|
                  |L1.1052|
00041c  f7fffffe          BL       OS_CPU_SR_Save
000420  49c2              LDR      r1,|L1.1836|
000422  6809              LDR      r1,[r1,#0]            ;589  ; OSTCBCur
000424  f8914037          LDRB     r4,[r1,#0x37]         ;589
000428  f7fffffe          BL       OS_CPU_SR_Restore
00042c  4620              MOV      r0,r4                 ;591
00042e  e7dd              B        |L1.1004|
                  |L1.1072|
000430  4608              MOV      r0,r1                 ;596
000432  f7fffffe          BL       OS_CPU_SR_Restore
000436  2043              MOVS     r0,#0x43              ;597
000438  e7d8              B        |L1.1004|
                  |L1.1082|
00043a  4608              MOV      r0,r1                 ;600
00043c  f7fffffe          BL       OS_CPU_SR_Restore
000440  203d              MOVS     r0,#0x3d              ;601
000442  e7d3              B        |L1.1004|
;;;607    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;634    #if OS_TASK_NAME_SIZE > 1
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
000444  e92d41f0          PUSH     {r4-r8,lr}
;;;636    {
000448  4605              MOV      r5,r0
00044a  460e              MOV      r6,r1
00044c  4614              MOV      r4,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
;;;647            return (0);
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
00044e  48b8              LDR      r0,|L1.1840|
000450  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000452  2800              CMP      r0,#0
000454  d004              BEQ      |L1.1120|
;;;661            *perr = OS_ERR_NAME_GET_ISR;
000456  2011              MOVS     r0,#0x11
000458  7020              STRB     r0,[r4,#0]
;;;662            return (0);
00045a  2000              MOVS     r0,#0
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
00045c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1120|
000460  f7fffffe          BL       OS_CPU_SR_Save
000464  4607              MOV      r7,r0                 ;664
000466  2dff              CMP      r5,#0xff              ;665
000468  d103              BNE      |L1.1138|
00046a  48b0              LDR      r0,|L1.1836|
00046c  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
00046e  f8905032          LDRB     r5,[r0,#0x32]         ;666
                  |L1.1138|
000472  48b0              LDR      r0,|L1.1844|
000474  f8500025          LDR      r0,[r0,r5,LSL #2]     ;668
000478  2543              MOVS     r5,#0x43              ;671
00047a  b178              CBZ      r0,|L1.1180|
00047c  2801              CMP      r0,#1                 ;674
00047e  d014              BEQ      |L1.1194|
000480  f100014c          ADD      r1,r0,#0x4c           ;679
000484  4630              MOV      r0,r6                 ;679
000486  f7fffffe          BL       OS_StrCopy
00048a  4605              MOV      r5,r0                 ;679
00048c  4638              MOV      r0,r7                 ;680
00048e  f7fffffe          BL       OS_CPU_SR_Restore
000492  2000              MOVS     r0,#0                 ;681
000494  7020              STRB     r0,[r4,#0]            ;681
000496  4628              MOV      r0,r5                 ;682
000498  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1180|
00049c  4638              MOV      r0,r7                 ;670
00049e  f7fffffe          BL       OS_CPU_SR_Restore
0004a2  7025              STRB     r5,[r4,#0]            ;671
0004a4  2000              MOVS     r0,#0                 ;672
0004a6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1194|
0004aa  4638              MOV      r0,r7                 ;675
0004ac  f7fffffe          BL       OS_CPU_SR_Restore
0004b0  7025              STRB     r5,[r4,#0]            ;676
0004b2  2000              MOVS     r0,#0                 ;677
0004b4  e8bd81f0          POP      {r4-r8,pc}
;;;684    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;713    #if OS_TASK_NAME_SIZE > 1
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
0004b8  e92d41f0          PUSH     {r4-r8,lr}
;;;715    {
0004bc  4605              MOV      r5,r0
0004be  460f              MOV      r7,r1
0004c0  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
0004c2  489b              LDR      r0,|L1.1840|
0004c4  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0004c6  2800              CMP      r0,#0
0004c8  d003              BEQ      |L1.1234|
;;;740            *perr = OS_ERR_NAME_SET_ISR;
0004ca  2012              MOVS     r0,#0x12
0004cc  7020              STRB     r0,[r4,#0]
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
0004ce  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1234|
0004d2  f7fffffe          BL       OS_CPU_SR_Save
0004d6  4680              MOV      r8,r0                 ;743
0004d8  2dff              CMP      r5,#0xff              ;744
0004da  d103              BNE      |L1.1252|
0004dc  4893              LDR      r0,|L1.1836|
0004de  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
0004e0  f8905032          LDRB     r5,[r0,#0x32]         ;745
                  |L1.1252|
0004e4  4893              LDR      r0,|L1.1844|
0004e6  f8505025          LDR      r5,[r0,r5,LSL #2]     ;747
0004ea  2643              MOVS     r6,#0x43              ;750
0004ec  b16d              CBZ      r5,|L1.1290|
0004ee  2d01              CMP      r5,#1                 ;753
0004f0  d011              BEQ      |L1.1302|
0004f2  4638              MOV      r0,r7                 ;758
0004f4  f7fffffe          BL       OS_StrLen
0004f8  280f              CMP      r0,#0xf               ;759
0004fa  d912              BLS      |L1.1314|
0004fc  4640              MOV      r0,r8                 ;760
0004fe  f7fffffe          BL       OS_CPU_SR_Restore
000502  2041              MOVS     r0,#0x41              ;761
000504  7020              STRB     r0,[r4,#0]            ;761
000506  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1290|
00050a  4640              MOV      r0,r8                 ;749
00050c  f7fffffe          BL       OS_CPU_SR_Restore
000510  7026              STRB     r6,[r4,#0]            ;750
000512  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1302|
000516  4640              MOV      r0,r8                 ;754
000518  f7fffffe          BL       OS_CPU_SR_Restore
00051c  7026              STRB     r6,[r4,#0]            ;755
00051e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1314|
000522  4639              MOV      r1,r7                 ;764
000524  f105004c          ADD      r0,r5,#0x4c           ;764
000528  f7fffffe          BL       OS_StrCopy
00052c  4640              MOV      r0,r8                 ;765
00052e  f7fffffe          BL       OS_CPU_SR_Restore
000532  2000              MOVS     r0,#0                 ;766
000534  7020              STRB     r0,[r4,#0]            ;766
000536  e8bd81f0          POP      {r4-r8,pc}
;;;768    #endif
                          ENDP

                  OSTaskResume PROC
;;;789    #if OS_TASK_SUSPEND_EN > 0
;;;790    INT8U  OSTaskResume (INT8U prio)
00053a  b510              PUSH     {r4,lr}
;;;791    {
00053c  4604              MOV      r4,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;801            return (OS_ERR_PRIO_INVALID);
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
00053e  f7fffffe          BL       OS_CPU_SR_Save
000542  4603              MOV      r3,r0
;;;805        ptcb = OSTCBPrioTbl[prio];
000544  487b              LDR      r0,|L1.1844|
000546  f8500024          LDR      r0,[r0,r4,LSL #2]
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
00054a  b180              CBZ      r0,|L1.1390|
;;;807            OS_EXIT_CRITICAL();
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
00054c  2801              CMP      r0,#1
00054e  d013              BEQ      |L1.1400|
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
000550  f8901030          LDRB     r1,[r0,#0x30]
000554  f0110f08          TST      r1,#8
000558  d035              BEQ      |L1.1478|
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
00055a  f0210108          BIC      r1,r1,#8
00055e  f8801030          STRB     r1,[r0,#0x30]
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
000562  b171              CBZ      r1,|L1.1410|
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
000564  4618              MOV      r0,r3
000566  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1386|
;;;829            }
;;;830            return (OS_ERR_NONE);
00056a  2000              MOVS     r0,#0
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
00056c  bd10              POP      {r4,pc}
                  |L1.1390|
00056e  4618              MOV      r0,r3                 ;807
000570  f7fffffe          BL       OS_CPU_SR_Restore
000574  2046              MOVS     r0,#0x46              ;808
000576  bd10              POP      {r4,pc}
                  |L1.1400|
000578  4618              MOV      r0,r3                 ;811
00057a  f7fffffe          BL       OS_CPU_SR_Restore
00057e  2043              MOVS     r0,#0x43              ;812
000580  bd10              POP      {r4,pc}
                  |L1.1410|
000582  8dc1              LDRH     r1,[r0,#0x2e]         ;817
000584  b119              CBZ      r1,|L1.1422|
000586  4618              MOV      r0,r3                 ;825
000588  f7fffffe          BL       OS_CPU_SR_Restore
00058c  e7ed              B        |L1.1386|
                  |L1.1422|
00058e  496a              LDR      r1,|L1.1848|
000590  f8902036          LDRB     r2,[r0,#0x36]         ;818
000594  f891c000          LDRB     r12,[r1,#0]           ;818  ; OSRdyGrp
000598  ea42020c          ORR      r2,r2,r12             ;818
00059c  700a              STRB     r2,[r1,#0]            ;818
00059e  f8901034          LDRB     r1,[r0,#0x34]         ;819
0005a2  4a66              LDR      r2,|L1.1852|
0005a4  f8900035          LDRB     r0,[r0,#0x35]         ;819
0005a8  f812c001          LDRB     r12,[r2,r1]           ;819
0005ac  ea4c0000          ORR      r0,r12,r0             ;819
0005b0  5450              STRB     r0,[r2,r1]            ;819
0005b2  4618              MOV      r0,r3                 ;820
0005b4  f7fffffe          BL       OS_CPU_SR_Restore
0005b8  4861              LDR      r0,|L1.1856|
0005ba  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
0005bc  2801              CMP      r0,#1                 ;821
0005be  d1d4              BNE      |L1.1386|
0005c0  f7fffffe          BL       OS_Sched
0005c4  e7d1              B        |L1.1386|
                  |L1.1478|
0005c6  4618              MOV      r0,r3                 ;832
0005c8  f7fffffe          BL       OS_CPU_SR_Restore
0005cc  2044              MOVS     r0,#0x44              ;833
0005ce  bd10              POP      {r4,pc}
;;;835    #endif
                          ENDP

                  OSTaskStkChk PROC
;;;856    #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;857    INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
0005d0  e92d41f0          PUSH     {r4-r8,lr}
;;;858    {
0005d4  4604              MOV      r4,r0
0005d6  460d              MOV      r5,r1
;;;859        OS_TCB    *ptcb;
;;;860        OS_STK    *pchk;
;;;861        INT32U     nfree;
;;;862        INT32U     size;
;;;863    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;864        OS_CPU_SR  cpu_sr = 0;
;;;865    #endif
;;;866    
;;;867    
;;;868    
;;;869    #if OS_ARG_CHK_EN > 0
;;;870        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;871            if (prio != OS_PRIO_SELF) {
;;;872                return (OS_ERR_PRIO_INVALID);
;;;873            }
;;;874        }
;;;875        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;876            return (OS_ERR_PDATA_NULL);
;;;877        }
;;;878    #endif
;;;879        p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
0005d8  2000              MOVS     r0,#0
0005da  6028              STR      r0,[r5,#0]
;;;880        p_stk_data->OSUsed = 0;
0005dc  6068              STR      r0,[r5,#4]
;;;881        OS_ENTER_CRITICAL();
0005de  f7fffffe          BL       OS_CPU_SR_Save
0005e2  4601              MOV      r1,r0
;;;882        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
0005e4  2cff              CMP      r4,#0xff
0005e6  d103              BNE      |L1.1520|
;;;883            prio = OSTCBCur->OSTCBPrio;
0005e8  4850              LDR      r0,|L1.1836|
0005ea  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0005ec  f8904032          LDRB     r4,[r0,#0x32]
                  |L1.1520|
;;;884        }
;;;885        ptcb = OSTCBPrioTbl[prio];
0005f0  4850              LDR      r0,|L1.1844|
0005f2  f8500024          LDR      r0,[r0,r4,LSL #2]
;;;886        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
0005f6  b178              CBZ      r0,|L1.1560|
;;;887            OS_EXIT_CRITICAL();
;;;888            return (OS_ERR_TASK_NOT_EXIST);
;;;889        }
;;;890        if (ptcb == OS_TCB_RESERVED) {
0005f8  2801              CMP      r0,#1
0005fa  d013              BEQ      |L1.1572|
;;;891            OS_EXIT_CRITICAL();
;;;892            return (OS_ERR_TASK_NOT_EXIST);
;;;893        }
;;;894        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
0005fc  7c02              LDRB     r2,[r0,#0x10]
0005fe  f0120f01          TST      r2,#1
000602  d015              BEQ      |L1.1584|
;;;895            OS_EXIT_CRITICAL();
;;;896            return (OS_ERR_TASK_OPT);
;;;897        }
;;;898        nfree = 0;
000604  2400              MOVS     r4,#0
;;;899        size  = ptcb->OSTCBStkSize;
000606  68c6              LDR      r6,[r0,#0xc]
;;;900        pchk  = ptcb->OSTCBStkBottom;
000608  6887              LDR      r7,[r0,#8]
;;;901        OS_EXIT_CRITICAL();
00060a  4608              MOV      r0,r1
00060c  f7fffffe          BL       OS_CPU_SR_Restore
;;;902    #if OS_STK_GROWTH == 1
;;;903        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
000610  6839              LDR      r1,[r7,#0]
000612  1d38              ADDS     r0,r7,#4
000614  b191              CBZ      r1,|L1.1596|
000616  e016              B        |L1.1606|
                  |L1.1560|
000618  4608              MOV      r0,r1                 ;887
00061a  f7fffffe          BL       OS_CPU_SR_Restore
00061e  2043              MOVS     r0,#0x43              ;888
;;;904            nfree++;
;;;905        }
;;;906    #else
;;;907        while (*pchk-- == (OS_STK)0) {
;;;908            nfree++;
;;;909        }
;;;910    #endif
;;;911        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;912        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;913        return (OS_ERR_NONE);
;;;914    }
000620  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1572|
000624  4608              MOV      r0,r1                 ;891
000626  f7fffffe          BL       OS_CPU_SR_Restore
00062a  2043              MOVS     r0,#0x43              ;892
00062c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1584|
000630  4608              MOV      r0,r1                 ;895
000632  f7fffffe          BL       OS_CPU_SR_Restore
000636  2045              MOVS     r0,#0x45              ;896
000638  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1596|
00063c  1c64              ADDS     r4,r4,#1              ;904
00063e  f8501b04          LDR      r1,[r0],#4            ;903
000642  2900              CMP      r1,#0                 ;903
000644  d0fa              BEQ      |L1.1596|
                  |L1.1606|
000646  00a0              LSLS     r0,r4,#2              ;911
000648  6028              STR      r0,[r5,#0]            ;911
00064a  1b30              SUBS     r0,r6,r4              ;912
00064c  0080              LSLS     r0,r0,#2              ;912
00064e  6068              STR      r0,[r5,#4]            ;912
000650  2000              MOVS     r0,#0                 ;913
000652  e8bd81f0          POP      {r4-r8,pc}
;;;915    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;940    #if OS_TASK_SUSPEND_EN > 0
;;;941    INT8U  OSTaskSuspend (INT8U prio)
000656  b570              PUSH     {r4-r6,lr}
;;;942    {
000658  4604              MOV      r4,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
00065a  f7fffffe          BL       OS_CPU_SR_Save
00065e  4684              MOV      r12,r0
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
;;;964            prio = OSTCBCur->OSTCBPrio;
000660  4832              LDR      r0,|L1.1836|
000662  2cff              CMP      r4,#0xff              ;963
000664  d006              BEQ      |L1.1652|
;;;965            self = OS_TRUE;
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
000666  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000668  f8900032          LDRB     r0,[r0,#0x32]
00066c  42a0              CMP      r0,r4
00066e  d106              BNE      |L1.1662|
;;;967            self = OS_TRUE;
000670  2501              MOVS     r5,#1
000672  e005              B        |L1.1664|
                  |L1.1652|
000674  6800              LDR      r0,[r0,#0]            ;964  ; OSTCBCur
000676  f8904032          LDRB     r4,[r0,#0x32]         ;964
00067a  2501              MOVS     r5,#1                 ;965
00067c  e000              B        |L1.1664|
                  |L1.1662|
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
00067e  2500              MOVS     r5,#0
                  |L1.1664|
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
000680  482c              LDR      r0,|L1.1844|
000682  f8500024          LDR      r0,[r0,r4,LSL #2]
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000686  b158              CBZ      r0,|L1.1696|
;;;973            OS_EXIT_CRITICAL();
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
000688  2801              CMP      r0,#1
00068a  d00e              BEQ      |L1.1706|
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
00068c  f8901034          LDRB     r1,[r0,#0x34]
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
000690  4b2a              LDR      r3,|L1.1852|
000692  f8904035          LDRB     r4,[r0,#0x35]
000696  5c5a              LDRB     r2,[r3,r1]
000698  43a2              BICS     r2,r2,r4
00069a  545a              STRB     r2,[r3,r1]
;;;982        if (OSRdyTbl[y] == 0) {
00069c  b152              CBZ      r2,|L1.1716|
00069e  e010              B        |L1.1730|
                  |L1.1696|
0006a0  4660              MOV      r0,r12                ;973
0006a2  f7fffffe          BL       OS_CPU_SR_Restore
0006a6  2048              MOVS     r0,#0x48              ;974
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
0006a8  bd70              POP      {r4-r6,pc}
                  |L1.1706|
0006aa  4660              MOV      r0,r12                ;977
0006ac  f7fffffe          BL       OS_CPU_SR_Restore
0006b0  2043              MOVS     r0,#0x43              ;978
0006b2  bd70              POP      {r4-r6,pc}
                  |L1.1716|
0006b4  4920              LDR      r1,|L1.1848|
0006b6  f8902036          LDRB     r2,[r0,#0x36]         ;983
0006ba  780b              LDRB     r3,[r1,#0]            ;983  ; OSRdyGrp
0006bc  ea230202          BIC      r2,r3,r2              ;983
0006c0  700a              STRB     r2,[r1,#0]            ;983
                  |L1.1730|
0006c2  f8901030          LDRB     r1,[r0,#0x30]         ;985
0006c6  f0410108          ORR      r1,r1,#8              ;985
0006ca  f8801030          STRB     r1,[r0,#0x30]         ;985
0006ce  4660              MOV      r0,r12                ;986
0006d0  f7fffffe          BL       OS_CPU_SR_Restore
0006d4  2d01              CMP      r5,#1                 ;987
0006d6  d101              BNE      |L1.1756|
0006d8  f7fffffe          BL       OS_Sched
                  |L1.1756|
0006dc  2000              MOVS     r0,#0                 ;990
0006de  bd70              POP      {r4-r6,pc}
;;;992    #endif
                          ENDP

                  OSTaskQuery PROC
;;;1013   #if OS_TASK_QUERY_EN > 0
;;;1014   INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
0006e0  b570              PUSH     {r4-r6,lr}
;;;1015   {
0006e2  4604              MOV      r4,r0
0006e4  460d              MOV      r5,r1
;;;1016       OS_TCB    *ptcb;
;;;1017   #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;1018       OS_CPU_SR  cpu_sr = 0;
;;;1019   #endif
;;;1020   
;;;1021   
;;;1022   
;;;1023   #if OS_ARG_CHK_EN > 0
;;;1024       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1025           if (prio != OS_PRIO_SELF) {
;;;1026               return (OS_ERR_PRIO_INVALID);
;;;1027           }
;;;1028       }
;;;1029       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1030           return (OS_ERR_PDATA_NULL);
;;;1031       }
;;;1032   #endif
;;;1033       OS_ENTER_CRITICAL();
0006e6  f7fffffe          BL       OS_CPU_SR_Save
0006ea  4606              MOV      r6,r0
;;;1034       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
0006ec  2cff              CMP      r4,#0xff
0006ee  d103              BNE      |L1.1784|
;;;1035           prio = OSTCBCur->OSTCBPrio;
0006f0  480e              LDR      r0,|L1.1836|
0006f2  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0006f4  f8904032          LDRB     r4,[r0,#0x32]
                  |L1.1784|
;;;1036       }
;;;1037       ptcb = OSTCBPrioTbl[prio];
0006f8  480e              LDR      r0,|L1.1844|
0006fa  f8501024          LDR      r1,[r0,r4,LSL #2]
;;;1038       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
0006fe  b151              CBZ      r1,|L1.1814|
;;;1039           OS_EXIT_CRITICAL();
;;;1040           return (OS_ERR_PRIO);
;;;1041       }
;;;1042       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
000700  2901              CMP      r1,#1
000702  d00d              BEQ      |L1.1824|
;;;1043           OS_EXIT_CRITICAL();
;;;1044           return (OS_ERR_TASK_NOT_EXIST);
;;;1045       }
;;;1046                                                    /* Copy TCB into user storage area                    */
;;;1047       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
000704  225c              MOVS     r2,#0x5c
000706  4628              MOV      r0,r5
000708  f7fffffe          BL       OS_MemCopy
;;;1048       OS_EXIT_CRITICAL();
00070c  4630              MOV      r0,r6
00070e  f7fffffe          BL       OS_CPU_SR_Restore
;;;1049       return (OS_ERR_NONE);
000712  2000              MOVS     r0,#0
;;;1050   }
000714  bd70              POP      {r4-r6,pc}
                  |L1.1814|
000716  4630              MOV      r0,r6                 ;1039
000718  f7fffffe          BL       OS_CPU_SR_Restore
00071c  2029              MOVS     r0,#0x29              ;1040
00071e  bd70              POP      {r4-r6,pc}
                  |L1.1824|
000720  4630              MOV      r0,r6                 ;1043
000722  f7fffffe          BL       OS_CPU_SR_Restore
000726  2043              MOVS     r0,#0x43              ;1044
000728  bd70              POP      {r4-r6,pc}
;;;1051   #endif
                          ENDP

00072a  0000              DCW      0x0000
                  |L1.1836|
                          DCD      OSTCBCur
                  |L1.1840|
                          DCD      OSIntNesting
                  |L1.1844|
                          DCD      OSTCBPrioTbl
                  |L1.1848|
                          DCD      OSRdyGrp
                  |L1.1852|
                          DCD      OSRdyTbl
                  |L1.1856|
                          DCD      OSRunning
