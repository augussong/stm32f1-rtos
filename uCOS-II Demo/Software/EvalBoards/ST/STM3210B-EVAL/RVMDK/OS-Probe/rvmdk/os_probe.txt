; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\os_probe.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\os_probe.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\os_probe.crf ..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\os_probe.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSProbe_Task PROC
;;;435    #if (OS_PROBE_TASK > 0)
;;;436    static  void  OSProbe_Task (void *p_arg)
000000  b082              SUB      sp,sp,#8
;;;437    {
;;;438                OS_TCB  *ptcb;
;;;439                INT16U   i;
;;;440                INT32U   cycles_tot;
;;;441        static  INT32U   cycles_dif[OS_MAX_TASKS];
;;;442        static  INT32U   cycles_tot_last[OS_MAX_TASKS];
;;;443    #if (OS_PROBE_USE_FP == 0)
;;;444                INT32U   max;
;;;445    #endif
;;;446    
;;;447    
;;;448        (void)p_arg;
;;;449    
;;;450                                                                    /* Initialize stored CyclesTot values.                  */
;;;451        for (i = 0; i < OS_MAX_TASKS; i++) {
000002  2000              MOVS     r0,#0
;;;452            cycles_tot_last[i]      = 0;
000004  f8df9184          LDR      r9,|L1.396|
000008  4682              MOV      r10,r0
;;;453            OSProbe_TaskStkUsage[i] = 0;
00000a  f10907a0          ADD      r7,r9,#0xa0
;;;454            OSProbe_TaskCPUUsage[i] = 0;
00000e  f1a70150          SUB      r1,r7,#0x50
                  |L1.18|
000012  f849a020          STR      r10,[r9,r0,LSL #2]    ;452
000016  f847a020          STR      r10,[r7,r0,LSL #2]    ;453
00001a  f841a020          STR      r10,[r1,r0,LSL #2]
00001e  1c40              ADDS     r0,r0,#1              ;451
000020  b280              UXTH     r0,r0                 ;451
000022  2814              CMP      r0,#0x14              ;451
000024  d3f5              BCC      |L1.18|
;;;455        }
;;;456    
;;;457        while (1) {
;;;458            OSTimeDlyHMSM(0, 0, 0, OSProbe_Delay);
;;;459            if (OSProbe_CallbackFnct != (void (*)(void))0) {
;;;460                OSProbe_CallbackFnct();
;;;461            }
;;;462    
;;;463                                                                    /* Update task CPU usage                                */
;;;464            i          = 0;
;;;465            cycles_tot = 0;
;;;466            ptcb       = &OSTCBTbl[0];                              /*  ... Get pointer to first TCB ...                    */
;;;467    
;;;468            while ((i    < OS_MAX_TASKS) &&
;;;469                   (ptcb != (OS_TCB *)0) &&
;;;470                   (ptcb != (OS_TCB *)1)) {
;;;471                                                                    /*  ... Calculate new CyclesDif, the number of cycles   */
;;;472                                                                    /*  ... used by the task since the last reading.  Half  */
;;;473                                                                    /*  ... the previous value is added to provide some     */
;;;474                                                                    /*  ... hysteresis, thereby reducing the natural        */
;;;475                                                                    /*  ... "jitter" in the data.                           */
;;;476                cycles_dif[i]       = (ptcb->OSTCBCyclesTot - cycles_tot_last[i]) / 2 + (cycles_dif[i] / 2);
000026  f8df8168          LDR      r8,|L1.400|
00002a  f8dfb168          LDR      r11,|L1.404|
00002e  e043              B        |L1.184|
                  |L1.48|
000030  4780              BLX      r0                    ;460
                  |L1.50|
000032  2500              MOVS     r5,#0                 ;464
000034  2600              MOVS     r6,#0                 ;465
000036  4c58              LDR      r4,|L1.408|
000038  e024              B        |L1.132|
                  |L1.58|
00003a  f8591025          LDR      r1,[r9,r5,LSL #2]
00003e  6be0              LDR      r0,[r4,#0x3c]
000040  1a40              SUBS     r0,r0,r1
000042  f8581025          LDR      r1,[r8,r5,LSL #2]
000046  0840              LSRS     r0,r0,#1
000048  eb000051          ADD      r0,r0,r1,LSR #1
00004c  f8480025          STR      r0,[r8,r5,LSL #2]
;;;477                cycles_tot_last[i]  = ptcb->OSTCBCyclesTot;
000050  6be1              LDR      r1,[r4,#0x3c]
000052  f8491025          STR      r1,[r9,r5,LSL #2]
;;;478                cycles_tot         += cycles_dif[i];
000056  4406              ADD      r6,r6,r0
;;;479    
;;;480                if (ptcb->OSTCBStkSize == 0) {
000058  68e0              LDR      r0,[r4,#0xc]
00005a  2800              CMP      r0,#0
00005c  d038              BEQ      |L1.208|
;;;481                    OSProbe_TaskStkUsage[i] = 0;
;;;482                } else {
;;;483    #if (OS_PROBE_USE_FP > 0)
;;;484    #if (OS_STK_GROWTH == 1)
;;;485                    OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  * 100)
00005e  0080              LSLS     r0,r0,#2
000060  f7fffffe          BL       __aeabi_ui2f
000064  9001              STR      r0,[sp,#4]
000066  6821              LDR      r1,[r4,#0]
000068  6c60              LDR      r0,[r4,#0x44]
00006a  1a40              SUBS     r0,r0,r1
00006c  2164              MOVS     r1,#0x64
00006e  4348              MULS     r0,r1,r0
000070  f7fffffe          BL       __aeabi_ui2f
000074  9901              LDR      r1,[sp,#4]
000076  f7fffffe          BL       __aeabi_fdiv
00007a  f8470025          STR      r0,[r7,r5,LSL #2]
                  |L1.126|
;;;486                                            / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
;;;487    #else
;;;488                    OSProbe_TaskStkUsage[i] = (FP32)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) * 100)
;;;489                                            / ((ptcb->OSTCBStkSize) * sizeof (OS_STK));
;;;490    #endif
;;;491    #else
;;;492                    max = ((ptcb->OSTCBStkSize) * sizeof (OS_STK)) / 100L;
;;;493    
;;;494    #if (OS_STK_GROWTH == 1)
;;;495                    OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkBase) - (INT32U)(ptcb->OSTCBStkPtr))  / max);
;;;496    #else
;;;497                    OSProbe_TaskStkUsage[i] = (INT16U)(((INT32U)(ptcb->OSTCBStkPtr)  - (INT32U)(ptcb->OSTCBStkBase)) / max);
;;;498    #endif
;;;499    #endif
;;;500                }
;;;501    
;;;502                ptcb = ptcb->OSTCBPrev;
00007e  69a4              LDR      r4,[r4,#0x18]
;;;503    
;;;504                i++;
000080  1c68              ADDS     r0,r5,#1
000082  b285              UXTH     r5,r0
                  |L1.132|
000084  2d14              CMP      r5,#0x14              ;468
000086  d202              BCS      |L1.142|
000088  b10c              CBZ      r4,|L1.142|
00008a  2c01              CMP      r4,#1                 ;470
00008c  d1d5              BNE      |L1.58|
                  |L1.142|
;;;505            }
;;;506    
;;;507    #if (OS_PROBE_USE_FP == 0)
;;;508            max = cycles_tot / 100L;
;;;509    #endif
;;;510                                                                    /*  ... For each task, calculate percent CPU usage.     */
;;;511            for (i = 0; i < OS_MAX_TASKS; i++) {
00008e  2400              MOVS     r4,#0
000090  4d42              LDR      r5,|L1.412|
000092  4630              MOV      r0,r6                 ;440
;;;512    #if (OS_PROBE_USE_FP > 0)
;;;513                OSProbe_TaskCPUUsage[i] = (FP32)(cycles_dif[i] * 100) / cycles_tot;
000094  f7fffffe          BL       __aeabi_ui2f
000098  4606              MOV      r6,r0
                  |L1.154|
00009a  f8580024          LDR      r0,[r8,r4,LSL #2]
00009e  2164              MOVS     r1,#0x64
0000a0  4348              MULS     r0,r1,r0
0000a2  f7fffffe          BL       __aeabi_ui2f
0000a6  4631              MOV      r1,r6
0000a8  f7fffffe          BL       __aeabi_fdiv
0000ac  f8450024          STR      r0,[r5,r4,LSL #2]
0000b0  1c60              ADDS     r0,r4,#1              ;511
0000b2  b284              UXTH     r4,r0                 ;511
0000b4  2c14              CMP      r4,#0x14              ;511
0000b6  d3f0              BCC      |L1.154|
                  |L1.184|
0000b8  2200              MOVS     r2,#0                 ;458
0000ba  f8bb3000          LDRH     r3,[r11,#0]           ;458  ; OSProbe_Delay
0000be  4611              MOV      r1,r2                 ;458
0000c0  4610              MOV      r0,r2                 ;458
0000c2  f7fffffe          BL       OSTimeDlyHMSM
0000c6  f8db0004          LDR      r0,[r11,#4]           ;457  ; OSProbe_CallbackFnct
0000ca  2800              CMP      r0,#0                 ;457
0000cc  d0b1              BEQ      |L1.50|
0000ce  e7af              B        |L1.48|
                  |L1.208|
0000d0  f847a025          STR      r10,[r7,r5,LSL #2]    ;481
0000d4  e7d3              B        |L1.126|
;;;514    #else
;;;515                OSProbe_TaskCPUUsage[i] = (INT16U)(cycles_dif[i] / max);
;;;516    #endif
;;;517            }
;;;518        }
;;;519    }
;;;520    #endif
                          ENDP

                  OSProbe_InitOS PROC
;;;367    #if (OS_PROBE_TASK > 0)
;;;368    static  void  OSProbe_InitOS (void)
0000d6  b500              PUSH     {lr}
;;;369    {
0000d8  b087              SUB      sp,sp,#0x1c
;;;370        INT8U  err;
;;;371    
;;;372    
;;;373    #if (OS_TASK_CREATE_EXT_EN > 0)
;;;374        #if (OS_STK_GROWTH == 1)
;;;375        err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
0000da  2103              MOVS     r1,#3
0000dc  9104              STR      r1,[sp,#0x10]
0000de  2200              MOVS     r2,#0
0000e0  2380              MOVS     r3,#0x80
0000e2  482f              LDR      r0,|L1.416|
0000e4  211c              MOVS     r1,#0x1c
0000e6  9302              STR      r3,[sp,#8]
0000e8  9203              STR      r2,[sp,#0xc]
0000ea  9001              STR      r0,[sp,#4]
0000ec  460b              MOV      r3,r1
0000ee  f50072fe          ADD      r2,r0,#0x1fc
0000f2  9100              STR      r1,[sp,#0]
0000f4  2100              MOVS     r1,#0
0000f6  482b              LDR      r0,|L1.420|
0000f8  f7fffffe          BL       OSTaskCreateExt
0000fc  9006              STR      r0,[sp,#0x18]
;;;376                              (void          * ) 0,
;;;377                              (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;378                              (INT8U           ) OS_PROBE_TASK_PRIO,
;;;379                              (INT16U          ) OS_PROBE_TASK_PRIO,
;;;380                              (OS_STK        * )&OSProbe_TaskStk[0],
;;;381                              (INT32U          ) OS_PROBE_TASK_STK_SIZE,
;;;382                              (void          * ) 0,
;;;383                              (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;384        #else
;;;385        err = OSTaskCreateExt((void (*)(void *)) OSProbe_Task,
;;;386                              (void          * ) 0,
;;;387                              (OS_STK        * )&OSProbe_TaskStk[0],
;;;388                              (INT8U           ) OS_PROBE_TASK_PRIO,
;;;389                              (INT16U          ) OS_PROBE_TASK_PRIO,
;;;390                              (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;391                              (INT32U          ) OS_PROBE_TASK_STK_SIZE,
;;;392                              (void          * ) 0,
;;;393                              (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;394        #endif
;;;395    #else
;;;396        #if (OS_STK_GROWTH == 1)
;;;397        err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
;;;398                           (void          * ) 0,
;;;399                           (OS_STK        * )&OSProbe_TaskStk[OS_PROBE_TASK_STK_SIZE - 1],
;;;400                           (INT8U           ) OS_PROBE_TASK_PRIO);
;;;401        #else
;;;402        err = OSTaskCreate((void (*)(void *)) OSProbe_Task,
;;;403                           (void          * ) 0,
;;;404                           (OS_STK        * )&OSProbe_TaskStk[0],
;;;405                           (INT8U           ) OS_PROBE_TASK_PRIO);
;;;406        #endif
;;;407    #endif
;;;408    
;;;409    #if (OS_TASK_NAME_SIZE > 15)
;;;410        OSTaskNameSet(OS_PROBE_TASK_PRIO, (INT8U *)"Probe OS PlugIn", &err);
0000fe  aa06              ADD      r2,sp,#0x18
000100  a129              ADR      r1,|L1.424|
000102  201c              MOVS     r0,#0x1c
000104  f7fffffe          BL       OSTaskNameSet
;;;411    #endif
;;;412    
;;;413        (void)&err;
;;;414    }
000108  b007              ADD      sp,sp,#0x1c
00010a  bd00              POP      {pc}
;;;415    #endif
                          ENDP

                  OSProbe_SetCallback PROC
;;;137    #if (OS_PROBE_TASK > 0)
;;;138    void  OSProbe_SetCallback (void (*call_back)(void))
00010c  4921              LDR      r1,|L1.404|
;;;139    {
;;;140        OSProbe_CallbackFnct = call_back;
00010e  6048              STR      r0,[r1,#4]  ; OSProbe_CallbackFnct
;;;141    }
000110  4770              BX       lr
;;;142    #endif
                          ENDP

                  OSProbe_SetDelay PROC
;;;161    #if (OS_PROBE_TASK > 0)
;;;162    void  OSProbe_SetDelay (INT16U  delay)
000112  4920              LDR      r1,|L1.404|
;;;163    {
;;;164        OSProbe_Delay = delay;
000114  8008              STRH     r0,[r1,#0]
;;;165    }
000116  4770              BX       lr
;;;166    #endif
                          ENDP

                  OSProbe_Init PROC
;;;103    
;;;104    void  OSProbe_Init (void)
000118  b510              PUSH     {r4,lr}
;;;105    {
;;;106    #if (OS_PROBE_TASK > 0)
;;;107        OSProbe_SetDelay(100);
00011a  2064              MOVS     r0,#0x64
00011c  f7fffffe          BL       OSProbe_SetDelay
;;;108        OSProbe_SetCallback((void (*)(void))0);                     /* Force terminal callback function to 'nothing'.       */
000120  2000              MOVS     r0,#0
000122  f7fffffe          BL       OSProbe_SetCallback
;;;109    
;;;110        OSProbe_InitOS();
000126  f7fffffe          BL       OSProbe_InitOS
;;;111    #endif
;;;112    
;;;113    #if (OS_PROBE_HOOKS_EN > 0)
;;;114        OSProbe_TmrInit();
00012a  f7fffffe          BL       OSProbe_TmrInit
;;;115    
;;;116        OSProbe_CyclesCtr   = 0;
00012e  4819              LDR      r0,|L1.404|
000130  2100              MOVS     r1,#0
000132  6081              STR      r1,[r0,#8]  ; OSProbe_CyclesCtr
;;;117        OSProbe_TmrCntsPrev = 0;
000134  8041              STRH     r1,[r0,#2]
;;;118    #endif
;;;119    }
000136  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  OSProbe_TimeGetCycles PROC
;;;210    #if (OS_PROBE_HOOKS_EN > 0)
;;;211    INT32U  OSProbe_TimeGetCycles (void)
000138  b570              PUSH     {r4-r6,lr}
;;;212    {
;;;213        INT32U     cycles;
;;;214    #if (OS_PROBE_TMR_32_BITS > 0)
;;;215        INT32U     cnts32;
;;;216        INT32U     cnts32_delta;
;;;217    #else
;;;218        INT16U     cnts16;
;;;219        INT16U     cnts16_delta;
;;;220    #endif
;;;221    #if (OS_CRITICAL_METHOD == 3)                                   /* Allocate storage for CPU status register.            */
;;;222        OS_CPU_SR  cpu_sr = 0;
;;;223    #endif
;;;224    
;;;225    
;;;226        OS_ENTER_CRITICAL();
00013a  f7fffffe          BL       OS_CPU_SR_Save
00013e  4605              MOV      r5,r0
;;;227    #if (OS_PROBE_TMR_32_BITS > 0)
;;;228        cnts32               = OSProbe_TmrRd();                     /* Read current counts of the free running counter.     */
;;;229        cnts32_delta         = cnts32 - OSProbe_TmrCntsPrev;
;;;230        OSProbe_TmrCntsPrev  = cnts32;                              /* Save current counts for next time.                   */
;;;231        OSProbe_CyclesCtr   += cnts32_delta;
;;;232    #else
;;;233        cnts16               = (INT16U)OSProbe_TmrRd();             /* Read current counts of the free running counter.     */
000140  f7fffffe          BL       OSProbe_TmrRd
;;;234        cnts16_delta         = cnts16 - OSProbe_TmrCntsPrev;
000144  4913              LDR      r1,|L1.404|
000146  884a              LDRH     r2,[r1,#2]  ; OSProbe_TmrCntsPrev
000148  1a82              SUBS     r2,r0,r2
00014a  b292              UXTH     r2,r2
;;;235        OSProbe_TmrCntsPrev  = cnts16;                              /* Save current counts for next time.                   */
00014c  8048              STRH     r0,[r1,#2]
;;;236        OSProbe_CyclesCtr   += (INT32U)cnts16_delta;
00014e  6888              LDR      r0,[r1,#8]  ; OSProbe_CyclesCtr
000150  1884              ADDS     r4,r0,r2
000152  608c              STR      r4,[r1,#8]  ; OSProbe_CyclesCtr
;;;237    #endif
;;;238        cycles               = OSProbe_CyclesCtr;
;;;239        OS_EXIT_CRITICAL();
000154  4628              MOV      r0,r5
000156  f7fffffe          BL       OS_CPU_SR_Restore
;;;240    
;;;241        return (cycles);
00015a  4620              MOV      r0,r4
;;;242    }
00015c  bd70              POP      {r4-r6,pc}
;;;243    #endif
                          ENDP

                  OSProbe_TaskCreateHook PROC
;;;272    #if (OS_PROBE_HOOKS_EN > 0)
;;;273    void  OSProbe_TaskCreateHook (OS_TCB *ptcb)
00015e  b510              PUSH     {r4,lr}
;;;274    {
000160  4604              MOV      r4,r0
;;;275        ptcb->OSTCBCyclesStart = OSProbe_TimeGetCycles();           /* Get the current start time for this task.            */
000162  f7fffffe          BL       OSProbe_TimeGetCycles
000166  6420              STR      r0,[r4,#0x40]
;;;276        ptcb->OSTCBCyclesTot   = 0;                                 /* Update the task's total execution time.              */
000168  2000              MOVS     r0,#0
00016a  63e0              STR      r0,[r4,#0x3c]
;;;277    }
00016c  bd10              POP      {r4,pc}
;;;278    #endif
                          ENDP

                  OSProbe_TaskSwHook PROC
;;;303    #if (OS_PROBE_HOOKS_EN > 0)
;;;304    void  OSProbe_TaskSwHook (void)
00016e  b510              PUSH     {r4,lr}
;;;305    {
;;;306        INT32U  cycles;
;;;307    
;;;308    
;;;309        cycles                         = OSProbe_TimeGetCycles();   /* This task is done.                                   */
000170  f7fffffe          BL       OSProbe_TimeGetCycles
;;;310        OSTCBCur->OSTCBCyclesTot      += cycles - OSTCBCur->OSTCBCyclesStart;
000174  4910              LDR      r1,|L1.440|
000176  6809              LDR      r1,[r1,#0]  ; OSTCBCur
000178  6c0b              LDR      r3,[r1,#0x40]
00017a  6bca              LDR      r2,[r1,#0x3c]
00017c  1ac3              SUBS     r3,r0,r3
00017e  441a              ADD      r2,r2,r3
000180  63ca              STR      r2,[r1,#0x3c]
;;;311        OSTCBHighRdy->OSTCBCyclesStart = cycles;                    /* Save absolute #cycles at task activation.            */
000182  490e              LDR      r1,|L1.444|
000184  6809              LDR      r1,[r1,#0]  ; OSTCBHighRdy
000186  6408              STR      r0,[r1,#0x40]
;;;312    }
000188  bd10              POP      {r4,pc}
;;;313    #endif
                          ENDP

                  OSProbe_TickHook PROC
;;;334    #if (OS_PROBE_HOOKS_EN > 0)
;;;335    void  OSProbe_TickHook (void)
00018a  e7fe              B        OSProbe_TimeGetCycles
;;;336    {
;;;337        (void)OSProbe_TimeGetCycles();
;;;338    }
;;;339    #endif
                          ENDP

                  |L1.396|
                          DCD      ||.bss||+0x50
                  |L1.400|
                          DCD      ||.bss||
                  |L1.404|
                          DCD      ||.data||
                  |L1.408|
                          DCD      OSTCBTbl
                  |L1.412|
                          DCD      ||.bss||+0xa0
                  |L1.416|
                          DCD      ||.bss||+0x140
                  |L1.420|
                          DCD      OSProbe_Task
                  |L1.424|
0001a8  50726f62          DCB      "Probe OS PlugIn",0
0001ac  65204f53
0001b0  20506c75
0001b4  67496e00
                  |L1.440|
                          DCD      OSTCBCur
                  |L1.444|
                          DCD      OSTCBHighRdy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cycles_dif
                          %        80
                  cycles_tot_last
                          %        80
                  OSProbe_TaskCPUUsage
                          %        80
                  OSProbe_TaskStkUsage
                          %        80
                  OSProbe_TaskStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  OSProbe_Delay
000000  0000              DCB      0x00,0x00
                  OSProbe_TmrCntsPrev
000002  0000              DCB      0x00,0x00
                  OSProbe_CallbackFnct
                          DCD      0x00000000
                  OSProbe_CyclesCtr
                          DCD      0x00000000
