; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\os_flag.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\os_flag.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\os_flag.crf ..\..\..\..\..\uCOS-II\Source\os_flag.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSFlagAccept PROC
;;;91     #if OS_FLAG_ACCEPT_EN > 0
;;;92     OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;94         OS_FLAGS      flags_rdy;
;;;95         INT8U         result;
;;;96         BOOLEAN       consume;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR     cpu_sr = 0;
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0
;;;104        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;105            return ((OS_FLAGS)0);
;;;106        }
;;;107        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;108            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;109            return ((OS_FLAGS)0);
;;;110        }
;;;111    #endif
;;;112        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2805              CMP      r0,#5
000010  d004              BEQ      |L1.28|
;;;113            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7030              STRB     r0,[r6,#0]
;;;114            return ((OS_FLAGS)0);
000016  2000              MOVS     r0,#0
;;;115        }
;;;116        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;117        if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
;;;118            wait_type &= ~OS_FLAG_CONSUME;
;;;119            consume    = OS_TRUE;
;;;120        } else {
;;;121            consume    = OS_FALSE;
;;;122        }
;;;123    /*$PAGE*/
;;;124        *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
;;;125        OS_ENTER_CRITICAL();
;;;126        switch (wait_type) {
;;;127            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;128                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;129                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;130                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;131                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;132                     }
;;;133                 } else {
;;;134                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;135                 }
;;;136                 OS_EXIT_CRITICAL();
;;;137                 break;
;;;138    
;;;139            case OS_FLAG_WAIT_SET_ANY:
;;;140                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;141                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;142                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;143                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;144                     }
;;;145                 } else {
;;;146                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;147                 }
;;;148                 OS_EXIT_CRITICAL();
;;;149                 break;
;;;150    
;;;151    #if OS_FLAG_WAIT_CLR_EN > 0
;;;152            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;153                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;154                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;155                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;156                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;157                     }
;;;158                 } else {
;;;159                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;160                 }
;;;161                 OS_EXIT_CRITICAL();
;;;162                 break;
;;;163    
;;;164            case OS_FLAG_WAIT_CLR_ANY:
;;;165                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;166                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;167                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;168                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;169                     }
;;;170                 } else {
;;;171                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;172                 }
;;;173                 OS_EXIT_CRITICAL();
;;;174                 break;
;;;175    #endif
;;;176    
;;;177            default:
;;;178                 OS_EXIT_CRITICAL();
;;;179                 flags_rdy = (OS_FLAGS)0;
;;;180                 *perr     = OS_ERR_FLAG_WAIT_TYPE;
;;;181                 break;
;;;182        }
;;;183        return (flags_rdy);
;;;184    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  f0040080          AND      r0,r4,#0x80           ;116
000020  b120              CBZ      r0,|L1.44|
000022  f0240480          BIC      r4,r4,#0x80           ;118
000026  f04f0801          MOV      r8,#1                 ;119
00002a  e001              B        |L1.48|
                  |L1.44|
00002c  f04f0800          MOV      r8,#0                 ;121
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;124
000032  7030              STRB     r0,[r6,#0]            ;124
000034  f7fffffe          BL       OS_CPU_SR_Save
000038  4602              MOV      r2,r0                 ;125
00003a  2170              MOVS     r1,#0x70              ;134
00003c  b36c              CBZ      r4,|L1.154|
00003e  2c01              CMP      r4,#1                 ;126
000040  d03b              BEQ      |L1.186|
000042  2c02              CMP      r4,#2                 ;126
000044  d00a              BEQ      |L1.92|
000046  2c03              CMP      r4,#3                 ;126
000048  d018              BEQ      |L1.124|
00004a  4610              MOV      r0,r2                 ;178
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2400              MOVS     r4,#0                 ;179
000052  206f              MOVS     r0,#0x6f              ;180
000054  7030              STRB     r0,[r6,#0]            ;180
                  |L1.86|
000056  4620              MOV      r0,r4                 ;183
000058  e8bd81f0          POP      {r4-r8,pc}
                  |L1.92|
00005c  8928              LDRH     r0,[r5,#8]            ;128
00005e  ea000407          AND      r4,r0,r7              ;128
000062  42bc              CMP      r4,r7                 ;129
000064  d105              BNE      |L1.114|
000066  f1b80f01          CMP      r8,#1                 ;130
00006a  d103              BNE      |L1.116|
00006c  43a0              BICS     r0,r0,r4              ;131
00006e  8128              STRH     r0,[r5,#8]            ;131
000070  e000              B        |L1.116|
                  |L1.114|
000072  7031              STRB     r1,[r6,#0]            ;134
                  |L1.116|
000074  4610              MOV      r0,r2                 ;136
000076  f7fffffe          BL       OS_CPU_SR_Restore
00007a  e7ec              B        |L1.86|
                  |L1.124|
00007c  8928              LDRH     r0,[r5,#8]            ;140
00007e  ea000407          AND      r4,r0,r7              ;140
000082  b12c              CBZ      r4,|L1.144|
000084  f1b80f01          CMP      r8,#1                 ;142
000088  d103              BNE      |L1.146|
00008a  43a0              BICS     r0,r0,r4              ;143
00008c  8128              STRH     r0,[r5,#8]            ;143
00008e  e000              B        |L1.146|
                  |L1.144|
000090  7031              STRB     r1,[r6,#0]            ;146
                  |L1.146|
000092  4610              MOV      r0,r2                 ;148
000094  f7fffffe          BL       OS_CPU_SR_Restore
000098  e7dd              B        |L1.86|
                  |L1.154|
00009a  8928              LDRH     r0,[r5,#8]            ;153
00009c  ea270400          BIC      r4,r7,r0              ;153
0000a0  42bc              CMP      r4,r7                 ;154
0000a2  d105              BNE      |L1.176|
0000a4  f1b80f01          CMP      r8,#1                 ;155
0000a8  d103              BNE      |L1.178|
0000aa  4320              ORRS     r0,r0,r4              ;156
0000ac  8128              STRH     r0,[r5,#8]            ;156
0000ae  e000              B        |L1.178|
                  |L1.176|
0000b0  7031              STRB     r1,[r6,#0]            ;159
                  |L1.178|
0000b2  4610              MOV      r0,r2                 ;161
0000b4  f7fffffe          BL       OS_CPU_SR_Restore
0000b8  e7cd              B        |L1.86|
                  |L1.186|
0000ba  8928              LDRH     r0,[r5,#8]            ;165
0000bc  ea270400          BIC      r4,r7,r0              ;165
0000c0  b12c              CBZ      r4,|L1.206|
0000c2  f1b80f01          CMP      r8,#1                 ;167
0000c6  d103              BNE      |L1.208|
0000c8  4320              ORRS     r0,r0,r4              ;168
0000ca  8128              STRH     r0,[r5,#8]            ;168
0000cc  e000              B        |L1.208|
                  |L1.206|
0000ce  7031              STRB     r1,[r6,#0]            ;171
                  |L1.208|
0000d0  4610              MOV      r0,r2                 ;173
0000d2  f7fffffe          BL       OS_CPU_SR_Restore
0000d6  e7be              B        |L1.86|
;;;185    #endif
                          ENDP

                  OSFlagCreate PROC
;;;207    
;;;208    OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
0000d8  b570              PUSH     {r4-r6,lr}
;;;209    {
0000da  4606              MOV      r6,r0
0000dc  460d              MOV      r5,r1
;;;210        OS_FLAG_GRP *pgrp;
;;;211    #if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
;;;212        OS_CPU_SR    cpu_sr = 0;
;;;213    #endif
;;;214    
;;;215    
;;;216    
;;;217    #if OS_ARG_CHK_EN > 0
;;;218        if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
;;;219            return ((OS_FLAG_GRP *)0);
;;;220        }
;;;221    #endif
;;;222        if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
0000de  48fe              LDR      r0,|L1.1240|
0000e0  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0000e2  2800              CMP      r0,#0
0000e4  d003              BEQ      |L1.238|
;;;223            *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
0000e6  2010              MOVS     r0,#0x10
0000e8  7028              STRB     r0,[r5,#0]
;;;224            return ((OS_FLAG_GRP *)0);
0000ea  2000              MOVS     r0,#0
;;;225        }
;;;226        OS_ENTER_CRITICAL();
;;;227        pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
;;;228        if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
;;;229                                                        /* Adjust free list                                */
;;;230            OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
;;;231            pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
;;;232            pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
;;;233            pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
;;;234    #if OS_FLAG_NAME_SIZE > 1
;;;235            pgrp->OSFlagName[0]  = '?';
;;;236            pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;237    #endif
;;;238            OS_EXIT_CRITICAL();
;;;239            *perr                = OS_ERR_NONE;
;;;240        } else {
;;;241            OS_EXIT_CRITICAL();
;;;242            *perr                = OS_ERR_FLAG_GRP_DEPLETED;
;;;243        }
;;;244        return (pgrp);                                  /* Return pointer to event flag group              */
;;;245    }
0000ec  bd70              POP      {r4-r6,pc}
                  |L1.238|
0000ee  f7fffffe          BL       OS_CPU_SR_Save
0000f2  4601              MOV      r1,r0                 ;226
0000f4  48f9              LDR      r0,|L1.1244|
0000f6  6804              LDR      r4,[r0,#0]            ;227  ; OSFlagFreeList
0000f8  b174              CBZ      r4,|L1.280|
0000fa  6862              LDR      r2,[r4,#4]            ;230
0000fc  6002              STR      r2,[r0,#0]            ;230  ; OSFlagFreeList
0000fe  2005              MOVS     r0,#5                 ;231
000100  7020              STRB     r0,[r4,#0]            ;231
000102  8126              STRH     r6,[r4,#8]            ;232
000104  2600              MOVS     r6,#0                 ;233
000106  6066              STR      r6,[r4,#4]            ;233
000108  203f              MOVS     r0,#0x3f              ;235
00010a  72a0              STRB     r0,[r4,#0xa]          ;235
00010c  72e6              STRB     r6,[r4,#0xb]          ;236
00010e  4608              MOV      r0,r1                 ;238
000110  f7fffffe          BL       OS_CPU_SR_Restore
000114  702e              STRB     r6,[r5,#0]            ;239
000116  e004              B        |L1.290|
                  |L1.280|
000118  4608              MOV      r0,r1                 ;241
00011a  f7fffffe          BL       OS_CPU_SR_Restore
00011e  2072              MOVS     r0,#0x72              ;242
000120  7028              STRB     r0,[r5,#0]            ;242
                  |L1.290|
000122  4620              MOV      r0,r4                 ;244
000124  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP

                  OS_FlagUnlink PROC
;;;1144   
;;;1145   void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
000126  6842              LDR      r2,[r0,#4]
;;;1146   {
;;;1147   #if OS_TASK_DEL_EN > 0
;;;1148       OS_TCB       *ptcb;
;;;1149   #endif
;;;1150       OS_FLAG_GRP  *pgrp;
;;;1151       OS_FLAG_NODE *pnode_prev;
;;;1152       OS_FLAG_NODE *pnode_next;
;;;1153   
;;;1154   
;;;1155       pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
;;;1156       pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
000128  6801              LDR      r1,[r0,#0]
;;;1157       if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
00012a  2300              MOVS     r3,#0
00012c  2a00              CMP      r2,#0
00012e  d005              BEQ      |L1.316|
;;;1158           pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
;;;1159           pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
;;;1160           if (pnode_next != (OS_FLAG_NODE *)0) {
;;;1161               pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
;;;1162           }
;;;1163       } else {                                                    /* No,  A node somewhere in the list   */
;;;1164           pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
000130  6011              STR      r1,[r2,#0]
;;;1165           if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
000132  b101              CBZ      r1,|L1.310|
;;;1166               pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
000134  604a              STR      r2,[r1,#4]
                  |L1.310|
;;;1167           }
;;;1168       }
;;;1169   #if OS_TASK_DEL_EN > 0
;;;1170       ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
000136  6880              LDR      r0,[r0,#8]
;;;1171       ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
000138  6283              STR      r3,[r0,#0x28]
;;;1172   #endif
;;;1173   }
00013a  4770              BX       lr
                  |L1.316|
00013c  68c2              LDR      r2,[r0,#0xc]          ;1158
00013e  6051              STR      r1,[r2,#4]            ;1159
000140  2900              CMP      r1,#0                 ;1160
000142  d0f8              BEQ      |L1.310|
000144  604b              STR      r3,[r1,#4]            ;1161
000146  e7f6              B        |L1.310|
;;;1174   #endif
                          ENDP

                  OS_FlagTaskRdy PROC
;;;1100   
;;;1101   static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
000148  b510              PUSH     {r4,lr}
;;;1102   {
00014a  4603              MOV      r3,r0
;;;1103       OS_TCB   *ptcb;
;;;1104       BOOLEAN   sched;
;;;1105   
;;;1106   
;;;1107       ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
00014c  6898              LDR      r0,[r3,#8]
;;;1108       ptcb->OSTCBDly       = 0;
00014e  2200              MOVS     r2,#0
000150  85c2              STRH     r2,[r0,#0x2e]
;;;1109       ptcb->OSTCBFlagsRdy  = flags_rdy;
000152  8581              STRH     r1,[r0,#0x2c]
;;;1110       ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
000154  f8901030          LDRB     r1,[r0,#0x30]
000158  f0210120          BIC      r1,r1,#0x20
00015c  f8801030          STRB     r1,[r0,#0x30]
;;;1111       ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
000160  f8802031          STRB     r2,[r0,#0x31]
;;;1112       if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
000164  2900              CMP      r1,#0
000166  d005              BEQ      |L1.372|
;;;1113           OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
;;;1114           OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;1115           sched                   = OS_TRUE;
;;;1116       } else {
;;;1117           sched                   = OS_FALSE;
000168  2400              MOVS     r4,#0
                  |L1.362|
;;;1118       }
;;;1119       OS_FlagUnlink(pnode);
00016a  4618              MOV      r0,r3
00016c  f7fffffe          BL       OS_FlagUnlink
;;;1120       return (sched);
000170  4620              MOV      r0,r4
;;;1121   }
000172  bd10              POP      {r4,pc}
                  |L1.372|
000174  49da              LDR      r1,|L1.1248|
000176  f8902036          LDRB     r2,[r0,#0x36]         ;1113
00017a  f891c000          LDRB     r12,[r1,#0]           ;1113  ; OSRdyGrp
00017e  ea42020c          ORR      r2,r2,r12             ;1113
000182  700a              STRB     r2,[r1,#0]            ;1113
000184  f8901034          LDRB     r1,[r0,#0x34]         ;1114
000188  4ad6              LDR      r2,|L1.1252|
00018a  f8900035          LDRB     r0,[r0,#0x35]         ;1114
00018e  f812c001          LDRB     r12,[r2,r1]           ;1114
000192  ea4c0000          ORR      r0,r12,r0             ;1114
000196  5450              STRB     r0,[r2,r1]            ;1114
000198  2401              MOVS     r4,#1                 ;1115
00019a  e7e6              B        |L1.362|
;;;1122   
                          ENDP

                  OSFlagDel PROC
;;;284    #if OS_FLAG_DEL_EN > 0
;;;285    OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
00019c  e92d5ff0          PUSH     {r4-r12,lr}
;;;286    {
0001a0  4604              MOV      r4,r0
0001a2  4688              MOV      r8,r1
0001a4  4616              MOV      r6,r2
;;;287        BOOLEAN       tasks_waiting;
;;;288        OS_FLAG_NODE *pnode;
;;;289        OS_FLAG_GRP  *pgrp_return;
;;;290    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;291        OS_CPU_SR     cpu_sr = 0;
;;;292    #endif
;;;293    
;;;294    
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0
;;;297        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;298            return (pgrp);
;;;299        }
;;;300        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;301            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;302            return (pgrp);
;;;303        }
;;;304    #endif
;;;305        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
0001a6  48cc              LDR      r0,|L1.1240|
0001a8  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0001aa  2800              CMP      r0,#0
0001ac  d004              BEQ      |L1.440|
;;;306            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
0001ae  200f              MOVS     r0,#0xf
0001b0  7030              STRB     r0,[r6,#0]
;;;307            return (pgrp);
0001b2  4620              MOV      r0,r4
;;;308        }
;;;309        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
;;;310            *perr = OS_ERR_EVENT_TYPE;
;;;311            return (pgrp);
;;;312        }
;;;313        OS_ENTER_CRITICAL();
;;;314        if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
;;;315            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;316        } else {
;;;317            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;318        }
;;;319        switch (opt) {
;;;320            case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
;;;321                 if (tasks_waiting == OS_FALSE) {
;;;322    #if OS_FLAG_NAME_SIZE > 1
;;;323                     pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
;;;324                     pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;325    #endif
;;;326                     pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;327                     pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
;;;328                     pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;329                     OSFlagFreeList       = pgrp;
;;;330                     OS_EXIT_CRITICAL();
;;;331                     *perr                = OS_ERR_NONE;
;;;332                     pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
;;;333                 } else {
;;;334                     OS_EXIT_CRITICAL();
;;;335                     *perr                = OS_ERR_TASK_WAITING;
;;;336                     pgrp_return          = pgrp;
;;;337                 }
;;;338                 break;
;;;339    
;;;340            case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
;;;341                 pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;342                 while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
;;;343                     (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
;;;344                     pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
;;;345                 }
;;;346    #if OS_FLAG_NAME_SIZE > 1
;;;347                 pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
;;;348                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;349    #endif
;;;350                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;351                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
;;;352                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;353                 OSFlagFreeList       = pgrp;
;;;354                 OS_EXIT_CRITICAL();
;;;355                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;356                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;357                 }
;;;358                 *perr = OS_ERR_NONE;
;;;359                 pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
;;;360                 break;
;;;361    
;;;362            default:
;;;363                 OS_EXIT_CRITICAL();
;;;364                 *perr                = OS_ERR_INVALID_OPT;
;;;365                 pgrp_return          = pgrp;
;;;366                 break;
;;;367        }
;;;368        return (pgrp_return);
;;;369    }
0001b4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.440|
0001b8  7820              LDRB     r0,[r4,#0]            ;309
0001ba  2805              CMP      r0,#5                 ;309
0001bc  d004              BEQ      |L1.456|
0001be  2001              MOVS     r0,#1                 ;310
0001c0  7030              STRB     r0,[r6,#0]            ;310
0001c2  4620              MOV      r0,r4                 ;311
0001c4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.456|
0001c8  f7fffffe          BL       OS_CPU_SR_Save
0001cc  4683              MOV      r11,r0                ;313
0001ce  6865              LDR      r5,[r4,#4]            ;314
0001d0  b10d              CBZ      r5,|L1.470|
0001d2  2701              MOVS     r7,#1                 ;315
0001d4  e000              B        |L1.472|
                  |L1.470|
0001d6  2700              MOVS     r7,#0                 ;317
                  |L1.472|
0001d8  ea5f0108          MOVS     r1,r8                 ;319
0001dc  f8df92fc          LDR      r9,|L1.1244|
0001e0  f04f0a3f          MOV      r10,#0x3f             ;323
0001e4  f04f0800          MOV      r8,#0                 ;327
0001e8  d009              BEQ      |L1.510|
0001ea  2901              CMP      r1,#1                 ;319
0001ec  d025              BEQ      |L1.570|
0001ee  4658              MOV      r0,r11                ;363
0001f0  f7fffffe          BL       OS_CPU_SR_Restore
0001f4  2007              MOVS     r0,#7                 ;364
0001f6  7030              STRB     r0,[r6,#0]            ;364
0001f8  4620              MOV      r0,r4                 ;365
0001fa  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.510|
0001fe  b13f              CBZ      r7,|L1.528|
000200  4658              MOV      r0,r11                ;334
000202  f7fffffe          BL       OS_CPU_SR_Restore
000206  2049              MOVS     r0,#0x49              ;335
000208  7030              STRB     r0,[r6,#0]            ;335
00020a  4620              MOV      r0,r4                 ;336
00020c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.528|
000210  f884a00a          STRB     r10,[r4,#0xa]         ;323
000214  f884800b          STRB     r8,[r4,#0xb]          ;324
000218  f8848000          STRB     r8,[r4,#0]            ;326
00021c  f8d90000          LDR      r0,[r9,#0]            ;327  ; OSFlagFreeList
000220  6060              STR      r0,[r4,#4]            ;327
000222  f8a48008          STRH     r8,[r4,#8]            ;328
000226  f8c94000          STR      r4,[r9,#0]            ;329  ; OSFlagFreeList
00022a  4658              MOV      r0,r11                ;330
00022c  f7fffffe          BL       OS_CPU_SR_Restore
000230  f8868000          STRB     r8,[r6,#0]            ;331
000234  2000              MOVS     r0,#0                 ;332
000236  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.570|
00023a  b135              CBZ      r5,|L1.586|
                  |L1.572|
00023c  2100              MOVS     r1,#0                 ;343
00023e  4628              MOV      r0,r5                 ;343
000240  f7fffffe          BL       OS_FlagTaskRdy
000244  682d              LDR      r5,[r5,#0]            ;344
000246  2d00              CMP      r5,#0                 ;342
000248  d1f8              BNE      |L1.572|
                  |L1.586|
00024a  f884a00a          STRB     r10,[r4,#0xa]         ;347
00024e  f884800b          STRB     r8,[r4,#0xb]          ;348
000252  f8848000          STRB     r8,[r4,#0]            ;350
000256  f8d90000          LDR      r0,[r9,#0]            ;351  ; OSFlagFreeList
00025a  6060              STR      r0,[r4,#4]            ;351
00025c  f8a48008          STRH     r8,[r4,#8]            ;352
000260  f8c94000          STR      r4,[r9,#0]            ;353  ; OSFlagFreeList
000264  4658              MOV      r0,r11                ;354
000266  f7fffffe          BL       OS_CPU_SR_Restore
00026a  2f01              CMP      r7,#1                 ;355
00026c  d101              BNE      |L1.626|
00026e  f7fffffe          BL       OS_Sched
                  |L1.626|
000272  f8868000          STRB     r8,[r6,#0]            ;358
000276  2000              MOVS     r0,#0                 ;359
000278  e8bd9ff0          POP      {r4-r12,pc}
;;;370    #endif
                          ENDP

                  OSFlagNameGet PROC
;;;395    #if OS_FLAG_NAME_SIZE > 1
;;;396    INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
00027c  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
000280  4605              MOV      r5,r0
000282  460e              MOV      r6,r1
000284  4614              MOV      r4,r2
;;;398        INT8U      len;
;;;399    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;400        OS_CPU_SR  cpu_sr = 0;
;;;401    #endif
;;;402    
;;;403    
;;;404    
;;;405    #if OS_ARG_CHK_EN > 0
;;;406        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;407            return (0);
;;;408        }
;;;409        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;410            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;411            return (0);
;;;412        }
;;;413        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;414            *perr = OS_ERR_PNAME_NULL;
;;;415            return (0);
;;;416        }
;;;417    #endif
;;;418        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
000286  4894              LDR      r0,|L1.1240|
000288  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00028a  2800              CMP      r0,#0
00028c  d004              BEQ      |L1.664|
;;;419            *perr = OS_ERR_NAME_GET_ISR;
00028e  2011              MOVS     r0,#0x11
000290  7020              STRB     r0,[r4,#0]
;;;420            return (0);
000292  2000              MOVS     r0,#0
;;;421        }
;;;422        OS_ENTER_CRITICAL();
;;;423        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;424            OS_EXIT_CRITICAL();
;;;425            *perr = OS_ERR_EVENT_TYPE;
;;;426            return (0);
;;;427        }
;;;428        len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
;;;429        OS_EXIT_CRITICAL();
;;;430        *perr = OS_ERR_NONE;
;;;431        return (len);
;;;432    }
000294  e8bd81f0          POP      {r4-r8,pc}
                  |L1.664|
000298  f7fffffe          BL       OS_CPU_SR_Save
00029c  4607              MOV      r7,r0                 ;422
00029e  7828              LDRB     r0,[r5,#0]            ;423
0002a0  2805              CMP      r0,#5                 ;423
0002a2  d007              BEQ      |L1.692|
0002a4  4638              MOV      r0,r7                 ;424
0002a6  f7fffffe          BL       OS_CPU_SR_Restore
0002aa  2001              MOVS     r0,#1                 ;425
0002ac  7020              STRB     r0,[r4,#0]            ;425
0002ae  2000              MOVS     r0,#0                 ;426
0002b0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.692|
0002b4  f105010a          ADD      r1,r5,#0xa            ;428
0002b8  4630              MOV      r0,r6                 ;428
0002ba  f7fffffe          BL       OS_StrCopy
0002be  4605              MOV      r5,r0                 ;428
0002c0  4638              MOV      r0,r7                 ;429
0002c2  f7fffffe          BL       OS_CPU_SR_Restore
0002c6  2000              MOVS     r0,#0                 ;430
0002c8  7020              STRB     r0,[r4,#0]            ;430
0002ca  4628              MOV      r0,r5                 ;431
0002cc  e8bd81f0          POP      {r4-r8,pc}
;;;433    #endif
                          ENDP

                  OSFlagNameSet PROC
;;;459    #if OS_FLAG_NAME_SIZE > 1
;;;460    void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
0002d0  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
0002d4  4605              MOV      r5,r0
0002d6  460e              MOV      r6,r1
0002d8  4614              MOV      r4,r2
;;;462        INT8U      len;
;;;463    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;464        OS_CPU_SR  cpu_sr = 0;
;;;465    #endif
;;;466    
;;;467    
;;;468    
;;;469    #if OS_ARG_CHK_EN > 0
;;;470        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;471            return;
;;;472        }
;;;473        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;474            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;475            return;
;;;476        }
;;;477        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;478            *perr = OS_ERR_PNAME_NULL;
;;;479            return;
;;;480        }
;;;481    #endif
;;;482        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
0002da  487f              LDR      r0,|L1.1240|
0002dc  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0002de  2800              CMP      r0,#0
0002e0  d003              BEQ      |L1.746|
;;;483            *perr = OS_ERR_NAME_SET_ISR;
0002e2  2012              MOVS     r0,#0x12
0002e4  7020              STRB     r0,[r4,#0]
;;;484            return;
;;;485        }
;;;486        OS_ENTER_CRITICAL();
;;;487        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;488            OS_EXIT_CRITICAL();
;;;489            *perr = OS_ERR_EVENT_TYPE;
;;;490            return;
;;;491        }
;;;492        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;493        if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
;;;494            OS_EXIT_CRITICAL();
;;;495            *perr = OS_ERR_FLAG_NAME_TOO_LONG;
;;;496            return;
;;;497        }
;;;498        (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
;;;499        OS_EXIT_CRITICAL();
;;;500        *perr = OS_ERR_NONE;
;;;501        return;
;;;502    }
0002e6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.746|
0002ea  f7fffffe          BL       OS_CPU_SR_Save
0002ee  4607              MOV      r7,r0                 ;486
0002f0  7828              LDRB     r0,[r5,#0]            ;487
0002f2  2805              CMP      r0,#5                 ;487
0002f4  d006              BEQ      |L1.772|
0002f6  4638              MOV      r0,r7                 ;488
0002f8  f7fffffe          BL       OS_CPU_SR_Restore
0002fc  2001              MOVS     r0,#1                 ;489
0002fe  7020              STRB     r0,[r4,#0]            ;489
000300  e8bd81f0          POP      {r4-r8,pc}
                  |L1.772|
000304  4630              MOV      r0,r6                 ;492
000306  f7fffffe          BL       OS_StrLen
00030a  280f              CMP      r0,#0xf               ;493
00030c  d906              BLS      |L1.796|
00030e  4638              MOV      r0,r7                 ;494
000310  f7fffffe          BL       OS_CPU_SR_Restore
000314  2073              MOVS     r0,#0x73              ;495
000316  7020              STRB     r0,[r4,#0]            ;495
000318  e8bd81f0          POP      {r4-r8,pc}
                  |L1.796|
00031c  4631              MOV      r1,r6                 ;498
00031e  f105000a          ADD      r0,r5,#0xa            ;498
000322  f7fffffe          BL       OS_StrCopy
000326  4638              MOV      r0,r7                 ;499
000328  f7fffffe          BL       OS_CPU_SR_Restore
00032c  2000              MOVS     r0,#0                 ;500
00032e  7020              STRB     r0,[r4,#0]            ;500
000330  e8bd81f0          POP      {r4-r8,pc}
;;;503    #endif
                          ENDP

                  OS_FlagBlock PROC
;;;987    
;;;988    static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
000334  b470              PUSH     {r4-r6}
;;;989    {
000336  9c03              LDR      r4,[sp,#0xc]
;;;990        OS_FLAG_NODE  *pnode_next;
;;;991        INT8U          y;
;;;992    
;;;993    
;;;994        OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
000338  4d6b              LDR      r5,|L1.1256|
00033a  f8d5c000          LDR      r12,[r5,#0]  ; OSTCBCur
00033e  f89c6030          LDRB     r6,[r12,#0x30]
000342  f0460620          ORR      r6,r6,#0x20
000346  f88c6030          STRB     r6,[r12,#0x30]
;;;995        OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
00034a  2600              MOVS     r6,#0
00034c  f88c6031          STRB     r6,[r12,#0x31]
;;;996        OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
000350  f8ac402e          STRH     r4,[r12,#0x2e]
;;;997    #if OS_TASK_DEL_EN > 0
;;;998        OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
000354  f8cc1028          STR      r1,[r12,#0x28]
;;;999    #endif
;;;1000       pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
000358  820a              STRH     r2,[r1,#0x10]
;;;1001       pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
00035a  748b              STRB     r3,[r1,#0x12]
;;;1002       pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
00035c  f8c1c008          STR      r12,[r1,#8]
;;;1003       pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
000360  6842              LDR      r2,[r0,#4]
000362  600a              STR      r2,[r1,#0]
;;;1004       pnode->OSFlagNodePrev     = (void *)0;
000364  604e              STR      r6,[r1,#4]
;;;1005       pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
000366  60c8              STR      r0,[r1,#0xc]
;;;1006       pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
000368  6842              LDR      r2,[r0,#4]
;;;1007       if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
00036a  2a00              CMP      r2,#0
00036c  d000              BEQ      |L1.880|
;;;1008           pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
00036e  6051              STR      r1,[r2,#4]
                  |L1.880|
;;;1009       }
;;;1010       pgrp->OSFlagWaitList = (void *)pnode;
000370  6041              STR      r1,[r0,#4]
;;;1011   
;;;1012       y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
000372  6828              LDR      r0,[r5,#0]  ; OSTCBCur
000374  f8901034          LDRB     r1,[r0,#0x34]
;;;1013       OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
000378  4b5a              LDR      r3,|L1.1252|
00037a  f890c035          LDRB     r12,[r0,#0x35]
00037e  5c5a              LDRB     r2,[r3,r1]
000380  ea22020c          BIC      r2,r2,r12
000384  545a              STRB     r2,[r3,r1]
;;;1014       if (OSRdyTbl[y] == 0x00) {
000386  2a00              CMP      r2,#0
000388  d106              BNE      |L1.920|
;;;1015           OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
00038a  f8901036          LDRB     r1,[r0,#0x36]
00038e  4854              LDR      r0,|L1.1248|
000390  7802              LDRB     r2,[r0,#0]  ; OSRdyGrp
000392  ea220101          BIC      r1,r2,r1
000396  7001              STRB     r1,[r0,#0]
                  |L1.920|
;;;1016       }
;;;1017   }
000398  bc70              POP      {r4-r6}
00039a  4770              BX       lr
;;;1018   
                          ENDP

                  OSFlagPend PROC
;;;559    
;;;560    OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
00039c  e92d4ff0          PUSH     {r4-r11,lr}
;;;561    {
0003a0  b087              SUB      sp,sp,#0x1c
0003a2  4604              MOV      r4,r0
0003a4  9d10              LDR      r5,[sp,#0x40]
0003a6  460f              MOV      r7,r1
0003a8  4690              MOV      r8,r2
0003aa  469a              MOV      r10,r3
;;;562        OS_FLAG_NODE  node;
;;;563        OS_FLAGS      flags_rdy;
;;;564        INT8U         result;
;;;565        INT8U         pend_stat;
;;;566        BOOLEAN       consume;
;;;567    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;568        OS_CPU_SR     cpu_sr = 0;
;;;569    #endif
;;;570    
;;;571    
;;;572    
;;;573    #if OS_ARG_CHK_EN > 0
;;;574        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;575            return ((OS_FLAGS)0);
;;;576        }
;;;577        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;578            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;579            return ((OS_FLAGS)0);
;;;580        }
;;;581    #endif
;;;582        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
0003ac  484a              LDR      r0,|L1.1240|
0003ae  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0003b0  2800              CMP      r0,#0
0003b2  d005              BEQ      |L1.960|
;;;583            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
0003b4  2002              MOVS     r0,#2
0003b6  7028              STRB     r0,[r5,#0]
;;;584            return ((OS_FLAGS)0);
;;;585        }
;;;586        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;587            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;588            return ((OS_FLAGS)0);
;;;589        }
;;;590        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return ((OS_FLAGS)0);
;;;593        }
;;;594        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;595        if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
;;;596            wait_type &= ~(INT8U)OS_FLAG_CONSUME;
;;;597            consume    = OS_TRUE;
;;;598        } else {
;;;599            consume    = OS_FALSE;
;;;600        }
;;;601    /*$PAGE*/
;;;602        OS_ENTER_CRITICAL();
;;;603        switch (wait_type) {
;;;604            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;605                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
;;;606                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;607                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;608                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;609                     }
;;;610                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;611                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;612                     *perr                   = OS_ERR_NONE;
;;;613                     return (flags_rdy);
;;;614                 } else {                                      /* Block task until events occur or timeout */
;;;615                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;616                     OS_EXIT_CRITICAL();
;;;617                 }
;;;618                 break;
;;;619    
;;;620            case OS_FLAG_WAIT_SET_ANY:
;;;621                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
;;;622                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;623                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;624                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;625                     }
;;;626                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;627                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;628                     *perr                   = OS_ERR_NONE;
;;;629                     return (flags_rdy);
;;;630                 } else {                                      /* Block task until events occur or timeout */
;;;631                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;632                     OS_EXIT_CRITICAL();
;;;633                 }
;;;634                 break;
;;;635    
;;;636    #if OS_FLAG_WAIT_CLR_EN > 0
;;;637            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;638                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;639                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;640                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;641                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;642                     }
;;;643                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;644                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;645                     *perr                   = OS_ERR_NONE;
;;;646                     return (flags_rdy);
;;;647                 } else {                                      /* Block task until events occur or timeout */
;;;648                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;649                     OS_EXIT_CRITICAL();
;;;650                 }
;;;651                 break;
;;;652    
;;;653            case OS_FLAG_WAIT_CLR_ANY:
;;;654                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;655                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;656                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;657                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;658                     }
;;;659                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;660                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;661                     *perr                   = OS_ERR_NONE;
;;;662                     return (flags_rdy);
;;;663                 } else {                                      /* Block task until events occur or timeout */
;;;664                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;665                     OS_EXIT_CRITICAL();
;;;666                 }
;;;667                 break;
;;;668    #endif
;;;669    
;;;670            default:
;;;671                 OS_EXIT_CRITICAL();
;;;672                 flags_rdy = (OS_FLAGS)0;
;;;673                 *perr      = OS_ERR_FLAG_WAIT_TYPE;
;;;674                 return (flags_rdy);
;;;675        }
;;;676    /*$PAGE*/
;;;677        OS_Sched();                                            /* Find next HPT ready to run               */
;;;678        OS_ENTER_CRITICAL();
;;;679        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
;;;680            pend_stat                = OSTCBCur->OSTCBStatPend;
;;;681            OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;682            OS_FlagUnlink(&node);
;;;683            OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
;;;684            OS_EXIT_CRITICAL();
;;;685            flags_rdy                = (OS_FLAGS)0;
;;;686            switch (pend_stat) {
;;;687                case OS_STAT_PEND_ABORT:
;;;688                     *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
;;;689                     break;
;;;690    
;;;691                case OS_STAT_PEND_TO:
;;;692                default:
;;;693                     *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
;;;694                     break;
;;;695            }
;;;696            return (flags_rdy);
;;;697        }
;;;698        flags_rdy = OSTCBCur->OSTCBFlagsRdy;
;;;699        if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
;;;700            switch (wait_type) {
;;;701                case OS_FLAG_WAIT_SET_ALL:
;;;702                case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
;;;703                     pgrp->OSFlagFlags &= ~flags_rdy;
;;;704                     break;
;;;705    
;;;706    #if OS_FLAG_WAIT_CLR_EN > 0
;;;707                case OS_FLAG_WAIT_CLR_ALL:
;;;708                case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
;;;709                     pgrp->OSFlagFlags |=  flags_rdy;
;;;710                     break;
;;;711    #endif
;;;712                default:
;;;713                     OS_EXIT_CRITICAL();
;;;714                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;715                     return ((OS_FLAGS)0);
;;;716            }
;;;717        }
;;;718        OS_EXIT_CRITICAL();
;;;719        *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
;;;720        return (flags_rdy);
;;;721    }
0003b8  b007              ADD      sp,sp,#0x1c
0003ba  2000              MOVS     r0,#0                 ;584
0003bc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.960|
0003c0  484a              LDR      r0,|L1.1260|
0003c2  7800              LDRB     r0,[r0,#0]            ;586  ; OSLockNesting
0003c4  b128              CBZ      r0,|L1.978|
0003c6  200d              MOVS     r0,#0xd               ;587
0003c8  7028              STRB     r0,[r5,#0]            ;587
0003ca  b007              ADD      sp,sp,#0x1c
0003cc  2000              MOVS     r0,#0                 ;588
0003ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.978|
0003d2  7820              LDRB     r0,[r4,#0]            ;590
0003d4  2805              CMP      r0,#5                 ;590
0003d6  d005              BEQ      |L1.996|
0003d8  2001              MOVS     r0,#1                 ;591
0003da  7028              STRB     r0,[r5,#0]            ;591
0003dc  b007              ADD      sp,sp,#0x1c
0003de  2000              MOVS     r0,#0                 ;592
0003e0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.996|
0003e4  f0080080          AND      r0,r8,#0x80           ;594
0003e8  b118              CBZ      r0,|L1.1010|
0003ea  f0280880          BIC      r8,r8,#0x80           ;596
0003ee  2601              MOVS     r6,#1                 ;597
0003f0  e000              B        |L1.1012|
                  |L1.1010|
0003f2  2600              MOVS     r6,#0                 ;599
                  |L1.1012|
0003f4  f7fffffe          BL       OS_CPU_SR_Save
0003f8  9001              STR      r0,[sp,#4]            ;602
0003fa  f04f0900          MOV      r9,#0                 ;603
0003fe  f1b80f00          CMP      r8,#0                 ;603
000402  d058              BEQ      |L1.1206|
000404  f1b80f01          CMP      r8,#1                 ;603
000408  d065              BEQ      |L1.1238|
00040a  f1b80f02          CMP      r8,#2                 ;603
00040e  d00b              BEQ      |L1.1064|
000410  f1b80f03          CMP      r8,#3                 ;603
000414  d02b              BEQ      |L1.1134|
000416  9801              LDR      r0,[sp,#4]            ;671
000418  f7fffffe          BL       OS_CPU_SR_Restore
00041c  2000              MOVS     r0,#0                 ;672
00041e  216f              MOVS     r1,#0x6f              ;673
000420  7029              STRB     r1,[r5,#0]            ;673
000422  b007              ADD      sp,sp,#0x1c
000424  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1064|
000428  8920              LDRH     r0,[r4,#8]            ;605
00042a  ea000b07          AND      r11,r0,r7             ;605
00042e  45bb              CMP      r11,r7                ;606
000430  d111              BNE      |L1.1110|
000432  2e01              CMP      r6,#1                 ;607
000434  d102              BNE      |L1.1084|
000436  ea20000b          BIC      r0,r0,r11             ;608
00043a  8120              STRH     r0,[r4,#8]            ;608
                  |L1.1084|
00043c  482a              LDR      r0,|L1.1256|
00043e  6800              LDR      r0,[r0,#0]            ;610  ; OSTCBCur
000440  f8a0b02c          STRH     r11,[r0,#0x2c]        ;610
000444  9801              LDR      r0,[sp,#4]            ;611
000446  f7fffffe          BL       OS_CPU_SR_Restore
00044a  f8859000          STRB     r9,[r5,#0]            ;612
00044e  b007              ADD      sp,sp,#0x1c
000450  4658              MOV      r0,r11                ;613
000452  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1110|
000456  4643              MOV      r3,r8                 ;615
000458  463a              MOV      r2,r7                 ;615
00045a  a902              ADD      r1,sp,#8              ;615
00045c  4620              MOV      r0,r4                 ;615
00045e  f8cda000          STR      r10,[sp,#0]           ;615
000462  f7fffffe          BL       OS_FlagBlock
000466  9801              LDR      r0,[sp,#4]            ;616
000468  f7fffffe          BL       OS_CPU_SR_Restore
00046c  e077              B        |L1.1374|
                  |L1.1134|
00046e  8920              LDRH     r0,[r4,#8]            ;621
000470  ea000b07          AND      r11,r0,r7             ;621
000474  f1bb0f00          CMP      r11,#0                ;622
000478  d011              BEQ      |L1.1182|
00047a  2e01              CMP      r6,#1                 ;623
00047c  d102              BNE      |L1.1156|
00047e  ea20000b          BIC      r0,r0,r11             ;624
000482  8120              STRH     r0,[r4,#8]            ;624
                  |L1.1156|
000484  4818              LDR      r0,|L1.1256|
000486  6800              LDR      r0,[r0,#0]            ;626  ; OSTCBCur
000488  f8a0b02c          STRH     r11,[r0,#0x2c]        ;626
00048c  9801              LDR      r0,[sp,#4]            ;627
00048e  f7fffffe          BL       OS_CPU_SR_Restore
000492  f8859000          STRB     r9,[r5,#0]            ;628
000496  b007              ADD      sp,sp,#0x1c
000498  4658              MOV      r0,r11                ;629
00049a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1182|
00049e  4643              MOV      r3,r8                 ;631
0004a0  463a              MOV      r2,r7                 ;631
0004a2  a902              ADD      r1,sp,#8              ;631
0004a4  4620              MOV      r0,r4                 ;631
0004a6  f8cda000          STR      r10,[sp,#0]           ;631
0004aa  f7fffffe          BL       OS_FlagBlock
0004ae  9801              LDR      r0,[sp,#4]            ;632
0004b0  f7fffffe          BL       OS_CPU_SR_Restore
0004b4  e053              B        |L1.1374|
                  |L1.1206|
0004b6  8920              LDRH     r0,[r4,#8]            ;638
0004b8  ea270b00          BIC      r11,r7,r0             ;638
0004bc  45bb              CMP      r11,r7                ;639
0004be  d11f              BNE      |L1.1280|
0004c0  2e01              CMP      r6,#1                 ;640
0004c2  d102              BNE      |L1.1226|
0004c4  ea40000b          ORR      r0,r0,r11             ;641
0004c8  8120              STRH     r0,[r4,#8]            ;641
                  |L1.1226|
0004ca  4807              LDR      r0,|L1.1256|
0004cc  6800              LDR      r0,[r0,#0]            ;643  ; OSTCBCur
0004ce  f8a0b02c          STRH     r11,[r0,#0x2c]        ;643
0004d2  9801              LDR      r0,[sp,#4]            ;644
0004d4  e00c              B        |L1.1264|
                  |L1.1238|
0004d6  e01f              B        |L1.1304|
                  |L1.1240|
                          DCD      OSIntNesting
                  |L1.1244|
                          DCD      OSFlagFreeList
                  |L1.1248|
                          DCD      OSRdyGrp
                  |L1.1252|
                          DCD      OSRdyTbl
                  |L1.1256|
                          DCD      OSTCBCur
                  |L1.1260|
                          DCD      OSLockNesting
                  |L1.1264|
0004f0  f7fffffe          BL       OS_CPU_SR_Restore
0004f4  f8859000          STRB     r9,[r5,#0]            ;645
0004f8  b007              ADD      sp,sp,#0x1c
0004fa  4658              MOV      r0,r11                ;646
0004fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1280|
000500  4643              MOV      r3,r8                 ;648
000502  463a              MOV      r2,r7                 ;648
000504  a902              ADD      r1,sp,#8              ;648
000506  4620              MOV      r0,r4                 ;648
000508  f8cda000          STR      r10,[sp,#0]           ;648
00050c  f7fffffe          BL       OS_FlagBlock
000510  9801              LDR      r0,[sp,#4]            ;649
000512  f7fffffe          BL       OS_CPU_SR_Restore
000516  e022              B        |L1.1374|
                  |L1.1304|
000518  8920              LDRH     r0,[r4,#8]            ;654
00051a  ea270b00          BIC      r11,r7,r0             ;654
00051e  f1bb0f00          CMP      r11,#0                ;655
000522  d011              BEQ      |L1.1352|
000524  2e01              CMP      r6,#1                 ;656
000526  d102              BNE      |L1.1326|
000528  ea40000b          ORR      r0,r0,r11             ;657
00052c  8120              STRH     r0,[r4,#8]            ;657
                  |L1.1326|
00052e  488e              LDR      r0,|L1.1896|
000530  6800              LDR      r0,[r0,#0]            ;659  ; OSTCBCur
000532  f8a0b02c          STRH     r11,[r0,#0x2c]        ;659
000536  9801              LDR      r0,[sp,#4]            ;660
000538  f7fffffe          BL       OS_CPU_SR_Restore
00053c  f8859000          STRB     r9,[r5,#0]            ;661
000540  b007              ADD      sp,sp,#0x1c
000542  4658              MOV      r0,r11                ;662
000544  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1352|
000548  4643              MOV      r3,r8                 ;664
00054a  463a              MOV      r2,r7                 ;664
00054c  a902              ADD      r1,sp,#8              ;664
00054e  4620              MOV      r0,r4                 ;664
000550  f8cda000          STR      r10,[sp,#0]           ;664
000554  f7fffffe          BL       OS_FlagBlock
000558  9801              LDR      r0,[sp,#4]            ;665
00055a  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1374|
00055e  f7fffffe          BL       OS_Sched
000562  f7fffffe          BL       OS_CPU_SR_Save
000566  4682              MOV      r10,r0                ;678
000568  f8dfb1fc          LDR      r11,|L1.1896|
00056c  f8db0000          LDR      r0,[r11,#0]           ;679  ; OSTCBCur
000570  f8907031          LDRB     r7,[r0,#0x31]         ;679
000574  b1c7              CBZ      r7,|L1.1448|
000576  f8809031          STRB     r9,[r0,#0x31]         ;681
00057a  a802              ADD      r0,sp,#8              ;682
00057c  f7fffffe          BL       OS_FlagUnlink
000580  f8db0000          LDR      r0,[r11,#0]           ;683  ; OSTCBCur
000584  f8809030          STRB     r9,[r0,#0x30]         ;683
000588  4650              MOV      r0,r10                ;684
00058a  f7fffffe          BL       OS_CPU_SR_Restore
00058e  2000              MOVS     r0,#0                 ;685
000590  2f02              CMP      r7,#2                 ;686
000592  d004              BEQ      |L1.1438|
000594  210a              MOVS     r1,#0xa               ;693
000596  7029              STRB     r1,[r5,#0]            ;693
000598  b007              ADD      sp,sp,#0x1c
00059a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1438|
00059e  210e              MOVS     r1,#0xe               ;688
0005a0  7029              STRB     r1,[r5,#0]            ;688
0005a2  b007              ADD      sp,sp,#0x1c
0005a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1448|
0005a8  8d87              LDRH     r7,[r0,#0x2c]         ;698
0005aa  2e01              CMP      r6,#1                 ;699
0005ac  d11b              BNE      |L1.1510|
0005ae  f1b80f00          CMP      r8,#0                 ;700
0005b2  d015              BEQ      |L1.1504|
0005b4  f1b80f01          CMP      r8,#1                 ;700
0005b8  d012              BEQ      |L1.1504|
0005ba  f1b80f02          CMP      r8,#2                 ;700
0005be  d00b              BEQ      |L1.1496|
0005c0  f1b80f03          CMP      r8,#3                 ;700
0005c4  d008              BEQ      |L1.1496|
0005c6  4650              MOV      r0,r10                ;713
0005c8  f7fffffe          BL       OS_CPU_SR_Restore
0005cc  206f              MOVS     r0,#0x6f              ;714
0005ce  7028              STRB     r0,[r5,#0]            ;714
0005d0  b007              ADD      sp,sp,#0x1c
0005d2  2000              MOVS     r0,#0                 ;715
0005d4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1496|
0005d8  8920              LDRH     r0,[r4,#8]            ;703
0005da  43b8              BICS     r0,r0,r7              ;703
0005dc  8120              STRH     r0,[r4,#8]            ;703
0005de  e002              B        |L1.1510|
                  |L1.1504|
0005e0  8920              LDRH     r0,[r4,#8]            ;709
0005e2  4338              ORRS     r0,r0,r7              ;709
0005e4  8120              STRH     r0,[r4,#8]            ;709
                  |L1.1510|
0005e6  4650              MOV      r0,r10                ;718
0005e8  f7fffffe          BL       OS_CPU_SR_Restore
0005ec  f8859000          STRB     r9,[r5,#0]            ;719
0005f0  b007              ADD      sp,sp,#0x1c
0005f2  4638              MOV      r0,r7                 ;720
0005f4  e8bd8ff0          POP      {r4-r11,pc}
;;;722    /*$PAGE*/
                          ENDP

                  OSFlagPendGetFlagsRdy PROC
;;;737    
;;;738    OS_FLAGS  OSFlagPendGetFlagsRdy (void)
0005f8  b510              PUSH     {r4,lr}
;;;739    {
;;;740        OS_FLAGS      flags;
;;;741    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;742        OS_CPU_SR     cpu_sr = 0;
;;;743    #endif
;;;744    
;;;745    
;;;746    
;;;747        OS_ENTER_CRITICAL();
0005fa  f7fffffe          BL       OS_CPU_SR_Save
;;;748        flags = OSTCBCur->OSTCBFlagsRdy;
0005fe  495a              LDR      r1,|L1.1896|
000600  6809              LDR      r1,[r1,#0]  ; OSTCBCur
000602  8d8c              LDRH     r4,[r1,#0x2c]
;;;749        OS_EXIT_CRITICAL();
000604  f7fffffe          BL       OS_CPU_SR_Restore
;;;750        return (flags);
000608  4620              MOV      r0,r4
;;;751    }
00060a  bd10              POP      {r4,pc}
;;;752    
                          ENDP

                  OSFlagPost PROC
;;;794    */
;;;795    OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
00060c  e92d41f0          PUSH     {r4-r8,lr}
;;;796    {
000610  4605              MOV      r5,r0
000612  460e              MOV      r6,r1
000614  4614              MOV      r4,r2
000616  461f              MOV      r7,r3
;;;797        OS_FLAG_NODE *pnode;
;;;798        BOOLEAN       sched;
;;;799        OS_FLAGS      flags_cur;
;;;800        OS_FLAGS      flags_rdy;
;;;801        BOOLEAN       rdy;
;;;802    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;803        OS_CPU_SR     cpu_sr = 0;
;;;804    #endif
;;;805    
;;;806    
;;;807    
;;;808    #if OS_ARG_CHK_EN > 0
;;;809        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;810            return ((OS_FLAGS)0);
;;;811        }
;;;812        if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
;;;813            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;814            return ((OS_FLAGS)0);
;;;815        }
;;;816    #endif
;;;817        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
000618  7828              LDRB     r0,[r5,#0]
00061a  2805              CMP      r0,#5
00061c  d004              BEQ      |L1.1576|
;;;818            *perr = OS_ERR_EVENT_TYPE;
00061e  2001              MOVS     r0,#1
000620  7038              STRB     r0,[r7,#0]
;;;819            return ((OS_FLAGS)0);
000622  2000              MOVS     r0,#0
;;;820        }
;;;821    /*$PAGE*/
;;;822        OS_ENTER_CRITICAL();
;;;823        switch (opt) {
;;;824            case OS_FLAG_CLR:
;;;825                 pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
;;;826                 break;
;;;827    
;;;828            case OS_FLAG_SET:
;;;829                 pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
;;;830                 break;
;;;831    
;;;832            default:
;;;833                 OS_EXIT_CRITICAL();                     /* INVALID option                                 */
;;;834                 *perr = OS_ERR_FLAG_INVALID_OPT;
;;;835                 return ((OS_FLAGS)0);
;;;836        }
;;;837        sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
;;;838        pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;839        while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
;;;840            switch (pnode->OSFlagNodeWaitType) {
;;;841                case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
;;;842                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;843                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;844                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;845                         if (rdy == OS_TRUE) {
;;;846                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;847                         }
;;;848                     }
;;;849                     break;
;;;850    
;;;851                case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
;;;852                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;853                     if (flags_rdy != (OS_FLAGS)0) {
;;;854                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;855                         if (rdy == OS_TRUE) {
;;;856                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;857                         }
;;;858                     }
;;;859                     break;
;;;860    
;;;861    #if OS_FLAG_WAIT_CLR_EN > 0
;;;862                case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
;;;863                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;864                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;865                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;866                         if (rdy == OS_TRUE) {
;;;867                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;868                         }
;;;869                     }
;;;870                     break;
;;;871    
;;;872                case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
;;;873                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;874                     if (flags_rdy != (OS_FLAGS)0) {
;;;875                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;876                         if (rdy == OS_TRUE) {
;;;877                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;878                         }
;;;879                     }
;;;880                     break;
;;;881    #endif
;;;882                default:
;;;883                     OS_EXIT_CRITICAL();
;;;884                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;885                     return ((OS_FLAGS)0);
;;;886            }
;;;887            pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
;;;888        }
;;;889        OS_EXIT_CRITICAL();
;;;890        if (sched == OS_TRUE) {
;;;891            OS_Sched();
;;;892        }
;;;893        OS_ENTER_CRITICAL();
;;;894        flags_cur = pgrp->OSFlagFlags;
;;;895        OS_EXIT_CRITICAL();
;;;896        *perr     = OS_ERR_NONE;
;;;897        return (flags_cur);
;;;898    }
000624  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1576|
000628  f7fffffe          BL       OS_CPU_SR_Save
00062c  4680              MOV      r8,r0                 ;822
00062e  b14c              CBZ      r4,|L1.1604|
000630  2c01              CMP      r4,#1                 ;823
000632  d00b              BEQ      |L1.1612|
000634  4640              MOV      r0,r8                 ;833
000636  f7fffffe          BL       OS_CPU_SR_Restore
00063a  2071              MOVS     r0,#0x71              ;834
00063c  7038              STRB     r0,[r7,#0]            ;834
00063e  2000              MOVS     r0,#0                 ;835
000640  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1604|
000644  8928              LDRH     r0,[r5,#8]            ;825
000646  43b0              BICS     r0,r0,r6              ;825
000648  8128              STRH     r0,[r5,#8]            ;825
00064a  e002              B        |L1.1618|
                  |L1.1612|
00064c  8928              LDRH     r0,[r5,#8]            ;829
00064e  4330              ORRS     r0,r0,r6              ;829
000650  8128              STRH     r0,[r5,#8]            ;829
                  |L1.1618|
000652  2600              MOVS     r6,#0                 ;837
000654  686c              LDR      r4,[r5,#4]            ;838
000656  2c00              CMP      r4,#0                 ;839
000658  d041              BEQ      |L1.1758|
                  |L1.1626|
00065a  7ca0              LDRB     r0,[r4,#0x12]         ;840
00065c  b320              CBZ      r0,|L1.1704|
00065e  2801              CMP      r0,#1                 ;840
000660  d02f              BEQ      |L1.1730|
000662  2802              CMP      r0,#2                 ;840
000664  d009              BEQ      |L1.1658|
000666  2803              CMP      r0,#3                 ;840
000668  d013              BEQ      |L1.1682|
00066a  4640              MOV      r0,r8                 ;883
00066c  f7fffffe          BL       OS_CPU_SR_Restore
000670  206f              MOVS     r0,#0x6f              ;884
000672  7038              STRB     r0,[r7,#0]            ;884
000674  2000              MOVS     r0,#0                 ;885
000676  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1658|
00067a  8929              LDRH     r1,[r5,#8]            ;842
00067c  8a20              LDRH     r0,[r4,#0x10]         ;842
00067e  4001              ANDS     r1,r1,r0              ;842
000680  4288              CMP      r0,r1                 ;843
000682  d129              BNE      |L1.1752|
000684  4620              MOV      r0,r4                 ;844
000686  f7fffffe          BL       OS_FlagTaskRdy
00068a  2801              CMP      r0,#1                 ;845
00068c  d124              BNE      |L1.1752|
00068e  2601              MOVS     r6,#1                 ;846
000690  e022              B        |L1.1752|
                  |L1.1682|
000692  8928              LDRH     r0,[r5,#8]            ;852
000694  8a21              LDRH     r1,[r4,#0x10]         ;852
000696  4001              ANDS     r1,r1,r0              ;852
000698  b1f1              CBZ      r1,|L1.1752|
00069a  4620              MOV      r0,r4                 ;854
00069c  f7fffffe          BL       OS_FlagTaskRdy
0006a0  2801              CMP      r0,#1                 ;855
0006a2  d119              BNE      |L1.1752|
0006a4  2601              MOVS     r6,#1                 ;856
0006a6  e017              B        |L1.1752|
                  |L1.1704|
0006a8  8a20              LDRH     r0,[r4,#0x10]         ;863
0006aa  8929              LDRH     r1,[r5,#8]            ;863
0006ac  ea200101          BIC      r1,r0,r1              ;863
0006b0  4288              CMP      r0,r1                 ;864
0006b2  d111              BNE      |L1.1752|
0006b4  4620              MOV      r0,r4                 ;865
0006b6  f7fffffe          BL       OS_FlagTaskRdy
0006ba  2801              CMP      r0,#1                 ;866
0006bc  d10c              BNE      |L1.1752|
0006be  2601              MOVS     r6,#1                 ;867
0006c0  e00a              B        |L1.1752|
                  |L1.1730|
0006c2  8a20              LDRH     r0,[r4,#0x10]         ;873
0006c4  8929              LDRH     r1,[r5,#8]            ;873
0006c6  ea200101          BIC      r1,r0,r1              ;873
0006ca  b129              CBZ      r1,|L1.1752|
0006cc  4620              MOV      r0,r4                 ;875
0006ce  f7fffffe          BL       OS_FlagTaskRdy
0006d2  2801              CMP      r0,#1                 ;876
0006d4  d100              BNE      |L1.1752|
0006d6  2601              MOVS     r6,#1                 ;877
                  |L1.1752|
0006d8  6824              LDR      r4,[r4,#0]            ;887
0006da  2c00              CMP      r4,#0                 ;849
0006dc  d1bd              BNE      |L1.1626|
                  |L1.1758|
0006de  4640              MOV      r0,r8                 ;889
0006e0  f7fffffe          BL       OS_CPU_SR_Restore
0006e4  2e01              CMP      r6,#1                 ;890
0006e6  d101              BNE      |L1.1772|
0006e8  f7fffffe          BL       OS_Sched
                  |L1.1772|
0006ec  f7fffffe          BL       OS_CPU_SR_Save
0006f0  892c              LDRH     r4,[r5,#8]            ;894
0006f2  f7fffffe          BL       OS_CPU_SR_Restore
0006f6  2000              MOVS     r0,#0                 ;896
0006f8  7038              STRB     r0,[r7,#0]            ;896
0006fa  4620              MOV      r0,r4                 ;897
0006fc  e8bd81f0          POP      {r4-r8,pc}
;;;899    /*$PAGE*/
                          ENDP

                  OSFlagQuery PROC
;;;919    #if OS_FLAG_QUERY_EN > 0
;;;920    OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
000700  b570              PUSH     {r4-r6,lr}
;;;921    {
000702  4605              MOV      r5,r0
000704  460c              MOV      r4,r1
;;;922        OS_FLAGS   flags;
;;;923    #if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
;;;924        OS_CPU_SR  cpu_sr = 0;
;;;925    #endif
;;;926    
;;;927    
;;;928    
;;;929    #if OS_ARG_CHK_EN > 0
;;;930        if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
;;;931            return ((OS_FLAGS)0);
;;;932        }
;;;933        if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
;;;934            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;935            return ((OS_FLAGS)0);
;;;936        }
;;;937    #endif
;;;938        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
000706  7828              LDRB     r0,[r5,#0]
000708  2805              CMP      r0,#5
00070a  d003              BEQ      |L1.1812|
;;;939            *perr = OS_ERR_EVENT_TYPE;
00070c  2001              MOVS     r0,#1
00070e  7020              STRB     r0,[r4,#0]
;;;940            return ((OS_FLAGS)0);
000710  2000              MOVS     r0,#0
;;;941        }
;;;942        OS_ENTER_CRITICAL();
;;;943        flags = pgrp->OSFlagFlags;
;;;944        OS_EXIT_CRITICAL();
;;;945        *perr = OS_ERR_NONE;
;;;946        return (flags);                               /* Return the current value of the event flags       */
;;;947    }
000712  bd70              POP      {r4-r6,pc}
                  |L1.1812|
000714  f7fffffe          BL       OS_CPU_SR_Save
000718  892d              LDRH     r5,[r5,#8]            ;943
00071a  f7fffffe          BL       OS_CPU_SR_Restore
00071e  2000              MOVS     r0,#0                 ;945
000720  7020              STRB     r0,[r4,#0]            ;945
000722  4628              MOV      r0,r5                 ;946
000724  bd70              POP      {r4-r6,pc}
;;;948    #endif
                          ENDP

                  OS_FlagInit PROC
;;;1034   
;;;1035   void  OS_FlagInit (void)
000726  b510              PUSH     {r4,lr}
;;;1036   {
;;;1037   #if OS_MAX_FLAGS == 1
;;;1038       OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
;;;1039       OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1040       OSFlagFreeList->OSFlagWaitList = (void *)0;
;;;1041       OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
;;;1042   #if OS_FLAG_NAME_SIZE > 1
;;;1043       OSFlagFreeList->OSFlagName[0]  = '?';
;;;1044       OSFlagFreeList->OSFlagName[1]  = OS_ASCII_NUL;
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   #if OS_MAX_FLAGS >= 2
;;;1049       INT16U       i;
;;;1050       OS_FLAG_GRP *pgrp1;
;;;1051       OS_FLAG_GRP *pgrp2;
;;;1052   
;;;1053   
;;;1054       OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
000728  218c              MOVS     r1,#0x8c
00072a  4810              LDR      r0,|L1.1900|
00072c  f7fffffe          BL       OS_MemClr
;;;1055       pgrp1 = &OSFlagTbl[0];
000730  480e              LDR      r0,|L1.1900|
;;;1056       pgrp2 = &OSFlagTbl[1];
000732  4604              MOV      r4,r0
000734  f104021c          ADD      r2,r4,#0x1c
;;;1057       for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
000738  2100              MOVS     r1,#0
00073a  2300              MOVS     r3,#0
;;;1058           pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1059           pgrp1->OSFlagWaitList = (void *)pgrp2;
;;;1060   #if OS_FLAG_NAME_SIZE > 1
;;;1061           pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
00073c  f04f0c3f          MOV      r12,#0x3f
                  |L1.1856|
000740  7003              STRB     r3,[r0,#0]            ;1058
000742  6042              STR      r2,[r0,#4]            ;1059
000744  f880c00a          STRB     r12,[r0,#0xa]
;;;1062           pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
000748  72c3              STRB     r3,[r0,#0xb]
;;;1063   #endif
;;;1064           pgrp1++;
00074a  301c              ADDS     r0,r0,#0x1c
;;;1065           pgrp2++;
00074c  321c              ADDS     r2,r2,#0x1c
00074e  1c49              ADDS     r1,r1,#1              ;1057
000750  b289              UXTH     r1,r1                 ;1057
000752  2904              CMP      r1,#4                 ;1057
000754  d3f4              BCC      |L1.1856|
;;;1066       }
;;;1067       pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
000756  7003              STRB     r3,[r0,#0]
;;;1068       pgrp1->OSFlagWaitList = (void *)0;
000758  6043              STR      r3,[r0,#4]
;;;1069   #if OS_FLAG_NAME_SIZE > 1
;;;1070       pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
00075a  f880c00a          STRB     r12,[r0,#0xa]
;;;1071       pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
00075e  72c3              STRB     r3,[r0,#0xb]
;;;1072   #endif
;;;1073       OSFlagFreeList        = &OSFlagTbl[0];
000760  4803              LDR      r0,|L1.1904|
000762  6004              STR      r4,[r0,#0]  ; OSFlagFreeList
;;;1074   #endif
;;;1075   }
000764  bd10              POP      {r4,pc}
;;;1076   
                          ENDP

000766  0000              DCW      0x0000
                  |L1.1896|
                          DCD      OSTCBCur
                  |L1.1900|
                          DCD      OSFlagTbl
                  |L1.1904|
                          DCD      OSFlagFreeList
