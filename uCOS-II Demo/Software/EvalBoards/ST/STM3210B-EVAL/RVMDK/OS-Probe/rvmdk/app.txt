; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\app.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\app.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\app.crf app.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  App_TaskKbd PROC
;;;335    
;;;336    static  void  App_TaskKbd (void *p_arg)
000000  2500              MOVS     r5,#0
;;;337    {
;;;338        CPU_BOOLEAN  b1_prev;
;;;339        CPU_BOOLEAN  b1;
;;;340        CPU_INT08U   key;
;;;341    
;;;342    
;;;343        (void)p_arg;
;;;344    
;;;345        b1_prev = DEF_FALSE;
;;;346        key     = 1;
000002  2401              MOVS     r4,#1
;;;347    
;;;348        while (DEF_TRUE) {
;;;349            b1 = BSP_PB_GetStatus(BSP_PB_ID_KEY);
;;;350    
;;;351            if ((b1 == DEF_TRUE) && (b1_prev == DEF_FALSE)) {
;;;352                if (key == 2) {
;;;353                    key = 1;
;;;354                } else {
;;;355                    key++;
;;;356                }
;;;357    
;;;358                OSMboxPost(App_UserIFMbox, (void *)key);
000004  4ffe              LDR      r7,|L1.1024|
                  |L1.6|
000006  2001              MOVS     r0,#1                 ;349
000008  f7fffffe          BL       BSP_PB_GetStatus
00000c  4606              MOV      r6,r0                 ;349
00000e  2e01              CMP      r6,#1                 ;351
000010  d108              BNE      |L1.36|
000012  b93d              CBNZ     r5,|L1.36|
000014  2c02              CMP      r4,#2                 ;352
000016  d00d              BEQ      |L1.52|
000018  1c60              ADDS     r0,r4,#1              ;355
00001a  b2c4              UXTB     r4,r0                 ;355
                  |L1.28|
00001c  4621              MOV      r1,r4
00001e  68b8              LDR      r0,[r7,#8]  ; App_UserIFMbox
000020  f7fffffe          BL       OSMboxPost
                  |L1.36|
;;;359            }
;;;360    
;;;361            b1_prev = b1;
000024  4635              MOV      r5,r6
;;;362    
;;;363            OSTimeDlyHMSM(0, 0, 0, 20);
000026  2200              MOVS     r2,#0
000028  2314              MOVS     r3,#0x14
00002a  4611              MOV      r1,r2
00002c  4610              MOV      r0,r2
00002e  f7fffffe          BL       OSTimeDlyHMSM
000032  e7e8              B        |L1.6|
                  |L1.52|
000034  2401              MOVS     r4,#1                 ;353
000036  e7f1              B        |L1.28|
;;;364        }
;;;365    }
;;;366    
                          ENDP

                  App_FormatDec PROC
;;;754    
;;;755    static  void  App_FormatDec (CPU_INT08U *pstr, CPU_INT32U value, CPU_INT08U digits)
000038  b470              PUSH     {r4-r6}
;;;756    {
;;;757        CPU_INT08U   i;
;;;758        CPU_INT32U   mult;
;;;759        CPU_BOOLEAN  found;
;;;760        CPU_INT32U   nbr;
;;;761    
;;;762    
;;;763        found = DEF_NO;
00003a  2400              MOVS     r4,#0
;;;764        mult  = 1;
00003c  2301              MOVS     r3,#1
;;;765        for (i = 0; i < (digits - 1); i++) {
00003e  f04f0c00          MOV      r12,#0
000042  1e52              SUBS     r2,r2,#1
000044  2a00              CMP      r2,#0
000046  dd08              BLE      |L1.90|
                  |L1.72|
;;;766            mult *= 10;
000048  eb030383          ADD      r3,r3,r3,LSL #2
00004c  005b              LSLS     r3,r3,#1
00004e  f10c0c01          ADD      r12,r12,#1            ;765
000052  f00c0cff          AND      r12,r12,#0xff         ;765
000056  4594              CMP      r12,r2                ;765
000058  dbf6              BLT      |L1.72|
                  |L1.90|
;;;767        }
;;;768        while (mult > 0) {
00005a  2b00              CMP      r3,#0
00005c  d012              BEQ      |L1.132|
;;;769            nbr = value / mult;
;;;770            if (found == DEF_NO) {
;;;771                if (nbr != 0) {
;;;772                    found = DEF_YES;
;;;773                    *pstr = nbr + '0';
;;;774                } else{
;;;775                    if (mult == 1) {
;;;776                        *pstr = '0';
;;;777                    } else {
;;;778                        *pstr = ' ';
;;;779                    }
;;;780                }
;;;781            } else {
;;;782                *pstr = nbr + '0';
;;;783            }
;;;784            pstr++;
;;;785            value %= mult;
;;;786            mult  /= 10;
00005e  4ee9              LDR      r6,|L1.1028|
000060  f04f0c30          MOV      r12,#0x30             ;776
000064  2520              MOVS     r5,#0x20              ;778
                  |L1.102|
000066  fbb1f2f3          UDIV     r2,r1,r3              ;769
00006a  b16c              CBZ      r4,|L1.136|
00006c  3230              ADDS     r2,r2,#0x30           ;782
00006e  7002              STRB     r2,[r0,#0]            ;782
                  |L1.112|
000070  1c40              ADDS     r0,r0,#1              ;784
000072  fbb1f2f3          UDIV     r2,r1,r3              ;785
000076  fb031112          MLS      r1,r3,r2,r1           ;785
00007a  fba63203          UMULL    r3,r2,r6,r3
00007e  08d3              LSRS     r3,r2,#3
000080  2b00              CMP      r3,#0                 ;768
000082  d1f0              BNE      |L1.102|
                  |L1.132|
;;;787        }
;;;788    }
000084  bc70              POP      {r4-r6}
000086  4770              BX       lr
                  |L1.136|
000088  b11a              CBZ      r2,|L1.146|
00008a  2401              MOVS     r4,#1                 ;772
00008c  3230              ADDS     r2,r2,#0x30           ;773
00008e  7002              STRB     r2,[r0,#0]            ;773
000090  e7ee              B        |L1.112|
                  |L1.146|
000092  2b01              CMP      r3,#1                 ;775
000094  d001              BEQ      |L1.154|
000096  7005              STRB     r5,[r0,#0]            ;778
000098  e7ea              B        |L1.112|
                  |L1.154|
00009a  f880c000          STRB     r12,[r0,#0]           ;776
00009e  e7e7              B        |L1.112|
;;;789    
                          ENDP

                  App_DispScr_SignOn PROC
;;;441    
;;;442    static  void  App_DispScr_SignOn (void)
0000a0  b510              PUSH     {r4,lr}
;;;443    {
;;;444        CPU_INT32U  value;
;;;445    
;;;446    
;;;447        Str_Copy(App_LCDLine0, "  Micrium uC/OS-II  ");
0000a2  a1d9              ADR      r1,|L1.1032|
0000a4  48de              LDR      r0,|L1.1056|
0000a6  f7fffffe          BL       Str_Copy
;;;448        Str_Copy(App_LCDLine1, "ST STM32 (Cortex-M3)");
0000aa  a1de              ADR      r1,|L1.1060|
0000ac  48e3              LDR      r0,|L1.1084|
0000ae  f7fffffe          BL       Str_Copy
;;;449    
;;;450        Str_Copy(App_LCDLine2, "                    ");
0000b2  a1e3              ADR      r1,|L1.1088|
0000b4  48e8              LDR      r0,|L1.1112|
0000b6  f7fffffe          BL       Str_Copy
;;;451    
;;;452        Str_Copy(App_LCDLine3, "  uC/OS-II:  Vx.yy  ");
0000ba  a1e8              ADR      r1,|L1.1116|
0000bc  48ed              LDR      r0,|L1.1140|
0000be  f7fffffe          BL       Str_Copy
;;;453        value            = (CPU_INT32U)OSVersion();
0000c2  f7fffffe          BL       OSVersion
;;;454        App_LCDLine3[14] =  value / 100 + '0';
0000c6  49ec              LDR      r1,|L1.1144|
0000c8  fba12100          UMULL    r2,r1,r1,r0
0000cc  4ae9              LDR      r2,|L1.1140|
0000ce  0949              LSRS     r1,r1,#5
0000d0  f1010330          ADD      r3,r1,#0x30
0000d4  7393              STRB     r3,[r2,#0xe]
;;;455        App_LCDLine3[16] = (value % 100) / 10 + '0';
0000d6  f06f0318          MVN      r3,#0x18
0000da  4359              MULS     r1,r3,r1
0000dc  4cc9              LDR      r4,|L1.1028|
0000de  eb000181          ADD      r1,r0,r1,LSL #2
0000e2  fba43101          UMULL    r3,r1,r4,r1
0000e6  08c9              LSRS     r1,r1,#3
0000e8  3130              ADDS     r1,r1,#0x30
0000ea  7411              STRB     r1,[r2,#0x10]
;;;456        App_LCDLine3[17] = (value %  10) + '0';
0000ec  fba43100          UMULL    r3,r1,r4,r0
0000f0  08c9              LSRS     r1,r1,#3
0000f2  4249              RSBS     r1,r1,#0
0000f4  eb010181          ADD      r1,r1,r1,LSL #2
0000f8  eb000041          ADD      r0,r0,r1,LSL #1
0000fc  3030              ADDS     r0,r0,#0x30
0000fe  7450              STRB     r0,[r2,#0x11]
;;;457    
;;;458        Str_Copy(App_LCDLine4, "  TickRate:   xxxx  ");
000100  a1de              ADR      r1,|L1.1148|
000102  f1020015          ADD      r0,r2,#0x15
000106  f7fffffe          BL       Str_Copy
;;;459        value = (CPU_INT32U)OS_TICKS_PER_SEC;
00010a  f44f717a          MOV      r1,#0x3e8
;;;460        App_FormatDec(&App_LCDLine4[14], value, 4);
00010e  2204              MOVS     r2,#4
000110  48e0              LDR      r0,|L1.1172|
000112  f7fffffe          BL       App_FormatDec
;;;461    
;;;462        Str_Copy(App_LCDLine5, "  CPU Usage:xx %    ");
000116  a1e0              ADR      r1,|L1.1176|
000118  48e5              LDR      r0,|L1.1200|
00011a  f7fffffe          BL       Str_Copy
;;;463        value            = (CPU_INT32U)OSCPUUsage;
00011e  48e5              LDR      r0,|L1.1204|
000120  7800              LDRB     r0,[r0,#0]  ; OSCPUUsage
;;;464        App_LCDLine5[12] = (value / 10) + '0';
000122  fba42100          UMULL    r2,r1,r4,r0
000126  4ae2              LDR      r2,|L1.1200|
000128  08c9              LSRS     r1,r1,#3
00012a  f1010330          ADD      r3,r1,#0x30
00012e  7313              STRB     r3,[r2,#0xc]
;;;465        App_LCDLine5[13] = (value % 10) + '0';
000130  4249              RSBS     r1,r1,#0
000132  eb010181          ADD      r1,r1,r1,LSL #2
000136  eb000041          ADD      r0,r0,r1,LSL #1
00013a  3030              ADDS     r0,r0,#0x30
00013c  7350              STRB     r0,[r2,#0xd]
;;;466    
;;;467        Str_Copy(App_LCDLine6, "  CPU Speed:xx MHz  ");
00013e  a1de              ADR      r1,|L1.1208|
000140  f1020015          ADD      r0,r2,#0x15
000144  f7fffffe          BL       Str_Copy
;;;468        value            = (CPU_INT32U)BSP_CPU_ClkFreq() / 1000000L;
000148  f7fffffe          BL       BSP_CPU_ClkFreq
00014c  49e0              LDR      r1,|L1.1232|
00014e  fbb0f0f1          UDIV     r0,r0,r1
;;;469        App_LCDLine6[12] = (value / 10) + '0';
000152  fba42100          UMULL    r2,r1,r4,r0
000156  4bdf              LDR      r3,|L1.1236|
000158  08c9              LSRS     r1,r1,#3
00015a  f1010230          ADD      r2,r1,#0x30
00015e  731a              STRB     r2,[r3,#0xc]
;;;470        App_LCDLine6[13] = (value % 10) + '0';
000160  4249              RSBS     r1,r1,#0
000162  eb010181          ADD      r1,r1,r1,LSL #2
000166  eb000041          ADD      r0,r0,r1,LSL #1
00016a  3030              ADDS     r0,r0,#0x30
00016c  7358              STRB     r0,[r3,#0xd]
;;;471    
;;;472        Str_Copy(App_LCDLine7, "  #Ticks: xxxxxxxx  ");
00016e  a1da              ADR      r1,|L1.1240|
000170  f1030015          ADD      r0,r3,#0x15
000174  f7fffffe          BL       Str_Copy
;;;473        value = (CPU_INT32U)OSTime;
000178  48dd              LDR      r0,|L1.1264|
00017a  6801              LDR      r1,[r0,#0]  ; OSTime
;;;474        App_FormatDec(&App_LCDLine7[10], value, 8);
00017c  2208              MOVS     r2,#8
00017e  48dd              LDR      r0,|L1.1268|
000180  f7fffffe          BL       App_FormatDec
;;;475    
;;;476        Str_Copy(App_LCDLine8, "  #CtxSw: xxxxxxxx  ");
000184  a1dc              ADR      r1,|L1.1272|
000186  48e2              LDR      r0,|L1.1296|
000188  f7fffffe          BL       Str_Copy
;;;477        value = (CPU_INT32U)OSCtxSwCtr;
00018c  48e1              LDR      r0,|L1.1300|
00018e  6801              LDR      r1,[r0,#0]  ; OSCtxSwCtr
;;;478        App_FormatDec(&App_LCDLine8[10], value, 8);
000190  2208              MOVS     r2,#8
000192  48e1              LDR      r0,|L1.1304|
000194  f7fffffe          BL       App_FormatDec
;;;479    
;;;480        Str_Copy(App_LCDLine9, "                    ");
000198  a1a9              ADR      r1,|L1.1088|
00019a  48e0              LDR      r0,|L1.1308|
00019c  f7fffffe          BL       Str_Copy
;;;481    
;;;482        LCD_SetTextColor(APP_COLOR_BLUE);
0001a0  201f              MOVS     r0,#0x1f
0001a2  f7fffffe          BL       LCD_SetTextColor
;;;483        LCD_DisplayString(APP_LINE_0, App_LCDLine0);
0001a6  499e              LDR      r1,|L1.1056|
0001a8  2000              MOVS     r0,#0
0001aa  f7fffffe          BL       LCD_DisplayString
;;;484        LCD_DisplayString(APP_LINE_1, App_LCDLine1);
0001ae  49a3              LDR      r1,|L1.1084|
0001b0  2018              MOVS     r0,#0x18
0001b2  f7fffffe          BL       LCD_DisplayString
;;;485        LCD_SetTextColor(APP_COLOR_BLACK);
0001b6  2000              MOVS     r0,#0
0001b8  f7fffffe          BL       LCD_SetTextColor
;;;486        LCD_DisplayString(APP_LINE_2, App_LCDLine2);
0001bc  49a6              LDR      r1,|L1.1112|
0001be  2030              MOVS     r0,#0x30
0001c0  f7fffffe          BL       LCD_DisplayString
;;;487        LCD_DisplayString(APP_LINE_3, App_LCDLine3);
0001c4  49ab              LDR      r1,|L1.1140|
0001c6  2048              MOVS     r0,#0x48
0001c8  f7fffffe          BL       LCD_DisplayString
;;;488        LCD_DisplayString(APP_LINE_4, App_LCDLine4);
0001cc  49d4              LDR      r1,|L1.1312|
0001ce  2060              MOVS     r0,#0x60
0001d0  f7fffffe          BL       LCD_DisplayString
;;;489        LCD_DisplayString(APP_LINE_5, App_LCDLine5);
0001d4  49b6              LDR      r1,|L1.1200|
0001d6  2078              MOVS     r0,#0x78
0001d8  f7fffffe          BL       LCD_DisplayString
;;;490        LCD_DisplayString(APP_LINE_6, App_LCDLine6);
0001dc  49bd              LDR      r1,|L1.1236|
0001de  2090              MOVS     r0,#0x90
0001e0  f7fffffe          BL       LCD_DisplayString
;;;491        LCD_DisplayString(APP_LINE_7, App_LCDLine7);
0001e4  49cf              LDR      r1,|L1.1316|
0001e6  20a8              MOVS     r0,#0xa8
0001e8  f7fffffe          BL       LCD_DisplayString
;;;492        LCD_DisplayString(APP_LINE_8, App_LCDLine8);
0001ec  e8bd4010          POP      {r4,lr}
0001f0  49c7              LDR      r1,|L1.1296|
0001f2  20c0              MOVS     r0,#0xc0
0001f4  f7ffbffe          B.W      LCD_DisplayString
;;;493    }
;;;494    
                          ENDP

                  App_DispScr_TaskNames PROC
;;;512    
;;;513    static  void  App_DispScr_TaskNames (void)
0001f8  e92d41f0          PUSH     {r4-r8,lr}
;;;514    {
;;;515        CPU_INT08U   ix;
;;;516        OS_TCB      *ptcb;
;;;517        CPU_CHAR    *line;
;;;518        CPU_INT08U   value;
;;;519    
;;;520    
;;;521        ptcb = &OSTCBTbl[0];
0001fc  4dca              LDR      r5,|L1.1320|
;;;522        ix   = 0;
0001fe  2400              MOVS     r4,#0
;;;523    
;;;524        Str_Copy(App_LCDLine0, "  Micrium uC/OS-II  ");
000200  a181              ADR      r1,|L1.1032|
000202  4887              LDR      r0,|L1.1056|
000204  f7fffffe          BL       Str_Copy
;;;525        Str_Copy(App_LCDLine1, "ST STM32 (Cortex-M3)");
000208  a186              ADR      r1,|L1.1060|
00020a  488c              LDR      r0,|L1.1084|
00020c  f7fffffe          BL       Str_Copy
;;;526    
;;;527        Str_Copy(App_LCDLine2, "  Prio   Taskname   ");
000210  a1c6              ADR      r1,|L1.1324|
000212  4891              LDR      r0,|L1.1112|
000214  f7fffffe          BL       Str_Copy
;;;528    
;;;529        while (ptcb != NULL) {
;;;530            value = ptcb->OSTCBPrio;
;;;531    
;;;532            switch (ix) {
;;;533                case 0:
;;;534                     line = App_LCDLine3;
;;;535                     break;
;;;536    
;;;537                case 1:
;;;538                     line = App_LCDLine4;
;;;539                     break;
;;;540    
;;;541                case 2:
;;;542                     line = App_LCDLine5;
;;;543                     break;
;;;544    
;;;545                case 3:
;;;546                     line = App_LCDLine6;
;;;547                     break;
;;;548    
;;;549                case 4:
;;;550                     line = App_LCDLine7;
;;;551                     break;
;;;552    
;;;553                case 5:
;;;554                     line = App_LCDLine8;
;;;555                     break;
;;;556    
;;;557                case 6:
;;;558                     line = App_LCDLine9;
;;;559                     break;
;;;560    
;;;561                default:
;;;562                     line = (CPU_CHAR *)0;
;;;563                     break;
;;;564            }
;;;565    
;;;566            if (line == (CPU_CHAR *)0) {
;;;567                break;
;;;568            }
;;;569    
;;;570            line[0] = ' ';
;;;571            line[1] = ' ';
;;;572            line[2] = ' ';
;;;573            line[3] = value / 10 + '0';
;;;574            line[4] = value % 10 + '0';
000218  4f7a              LDR      r7,|L1.1028|
00021a  2620              MOVS     r6,#0x20              ;570
                  |L1.540|
00021c  f8951032          LDRB     r1,[r5,#0x32]         ;530
000220  2c07              CMP      r4,#7                 ;532
000222  d213              BCS      |L1.588|
000224  e8dff004          TBB      [pc,r4]               ;532
000228  0406080a          DCB      0x04,0x06,0x08,0x0a
00022c  0c0e1000          DCB      0x0c,0x0e,0x10,0x00
000230  4890              LDR      r0,|L1.1140|
000232  e00c              B        |L1.590|
000234  48ba              LDR      r0,|L1.1312|
000236  e00a              B        |L1.590|
000238  489d              LDR      r0,|L1.1200|
00023a  e008              B        |L1.590|
00023c  48a5              LDR      r0,|L1.1236|
00023e  e006              B        |L1.590|
000240  48b8              LDR      r0,|L1.1316|
000242  e004              B        |L1.590|
000244  48b2              LDR      r0,|L1.1296|
000246  e002              B        |L1.590|
000248  48b4              LDR      r0,|L1.1308|
00024a  e000              B        |L1.590|
                  |L1.588|
00024c  2000              MOVS     r0,#0                 ;562
                  |L1.590|
00024e  b1e8              CBZ      r0,|L1.652|
000250  7006              STRB     r6,[r0,#0]            ;570
000252  7046              STRB     r6,[r0,#1]            ;571
000254  7086              STRB     r6,[r0,#2]            ;572
000256  22cd              MOVS     r2,#0xcd              ;573
000258  434a              MULS     r2,r1,r2              ;573
00025a  0ad2              LSRS     r2,r2,#11             ;573
00025c  3230              ADDS     r2,r2,#0x30           ;573
00025e  70c2              STRB     r2,[r0,#3]            ;573
000260  fba73201          UMULL    r3,r2,r7,r1
000264  08d2              LSRS     r2,r2,#3
000266  4252              RSBS     r2,r2,#0
000268  eb020282          ADD      r2,r2,r2,LSL #2
00026c  eb010142          ADD      r1,r1,r2,LSL #1
000270  3130              ADDS     r1,r1,#0x30
000272  7101              STRB     r1,[r0,#4]
;;;575            line[5] = ' ';
000274  7146              STRB     r6,[r0,#5]
;;;576            Str_Copy_N(line + 6, ptcb->OSTCBTaskName, 14);
000276  220e              MOVS     r2,#0xe
000278  f105014c          ADD      r1,r5,#0x4c
00027c  1d80              ADDS     r0,r0,#6
00027e  f7fffffe          BL       Str_Copy_N
;;;577    
;;;578            ptcb    = ptcb->OSTCBPrev;
000282  69ad              LDR      r5,[r5,#0x18]
;;;579            ix++;
000284  1c60              ADDS     r0,r4,#1
000286  b2c4              UXTB     r4,r0
000288  2d00              CMP      r5,#0                 ;529
00028a  d1c7              BNE      |L1.540|
                  |L1.652|
;;;580        }
;;;581    
;;;582        if (ix < 6) {
00028c  2c06              CMP      r4,#6
00028e  d203              BCS      |L1.664|
;;;583            Str_Copy(App_LCDLine9, "                    ");
000290  a16b              ADR      r1,|L1.1088|
000292  48a2              LDR      r0,|L1.1308|
000294  f7fffffe          BL       Str_Copy
                  |L1.664|
;;;584        }
;;;585    
;;;586        if (ix < 5) {
000298  2c05              CMP      r4,#5
00029a  d203              BCS      |L1.676|
;;;587            Str_Copy(App_LCDLine8, "                    ");
00029c  a168              ADR      r1,|L1.1088|
00029e  489c              LDR      r0,|L1.1296|
0002a0  f7fffffe          BL       Str_Copy
                  |L1.676|
;;;588        }
;;;589    
;;;590        if (ix < 4) {
0002a4  2c04              CMP      r4,#4
0002a6  d203              BCS      |L1.688|
;;;591            Str_Copy(App_LCDLine7, "                    ");
0002a8  a165              ADR      r1,|L1.1088|
0002aa  489e              LDR      r0,|L1.1316|
0002ac  f7fffffe          BL       Str_Copy
                  |L1.688|
;;;592        }
;;;593    
;;;594        if (ix < 3) {
0002b0  2c03              CMP      r4,#3
0002b2  d203              BCS      |L1.700|
;;;595            Str_Copy(App_LCDLine6, "                    ");
0002b4  a162              ADR      r1,|L1.1088|
0002b6  4887              LDR      r0,|L1.1236|
0002b8  f7fffffe          BL       Str_Copy
                  |L1.700|
;;;596        }
;;;597    
;;;598        LCD_SetTextColor(APP_COLOR_BLUE);
0002bc  201f              MOVS     r0,#0x1f
0002be  f7fffffe          BL       LCD_SetTextColor
;;;599        LCD_DisplayString(APP_LINE_0, App_LCDLine0);
0002c2  4957              LDR      r1,|L1.1056|
0002c4  2000              MOVS     r0,#0
0002c6  f7fffffe          BL       LCD_DisplayString
;;;600        LCD_DisplayString(APP_LINE_1, App_LCDLine1);
0002ca  495c              LDR      r1,|L1.1084|
0002cc  2018              MOVS     r0,#0x18
0002ce  f7fffffe          BL       LCD_DisplayString
;;;601        LCD_SetTextColor(APP_COLOR_RED);
0002d2  f44f4078          MOV      r0,#0xf800
0002d6  f7fffffe          BL       LCD_SetTextColor
;;;602        LCD_DisplayString(APP_LINE_2, App_LCDLine2);
0002da  495f              LDR      r1,|L1.1112|
0002dc  2030              MOVS     r0,#0x30
0002de  f7fffffe          BL       LCD_DisplayString
;;;603        LCD_SetTextColor(APP_COLOR_BLACK);
0002e2  2000              MOVS     r0,#0
0002e4  f7fffffe          BL       LCD_SetTextColor
;;;604        LCD_DisplayString(APP_LINE_3, App_LCDLine3);
0002e8  4962              LDR      r1,|L1.1140|
0002ea  2048              MOVS     r0,#0x48
0002ec  f7fffffe          BL       LCD_DisplayString
;;;605        LCD_DisplayString(APP_LINE_4, App_LCDLine4);
0002f0  498b              LDR      r1,|L1.1312|
0002f2  2060              MOVS     r0,#0x60
0002f4  f7fffffe          BL       LCD_DisplayString
;;;606        LCD_DisplayString(APP_LINE_5, App_LCDLine5);
0002f8  496d              LDR      r1,|L1.1200|
0002fa  2078              MOVS     r0,#0x78
0002fc  f7fffffe          BL       LCD_DisplayString
;;;607        LCD_DisplayString(APP_LINE_6, App_LCDLine6);
000300  4974              LDR      r1,|L1.1236|
000302  2090              MOVS     r0,#0x90
000304  f7fffffe          BL       LCD_DisplayString
;;;608        LCD_DisplayString(APP_LINE_7, App_LCDLine7);
000308  4986              LDR      r1,|L1.1316|
00030a  20a8              MOVS     r0,#0xa8
00030c  f7fffffe          BL       LCD_DisplayString
;;;609        LCD_DisplayString(APP_LINE_8, App_LCDLine8);
000310  497f              LDR      r1,|L1.1296|
000312  20c0              MOVS     r0,#0xc0
000314  f7fffffe          BL       LCD_DisplayString
;;;610        LCD_DisplayString(APP_LINE_9, App_LCDLine9);
000318  e8bd41f0          POP      {r4-r8,lr}
00031c  497f              LDR      r1,|L1.1308|
00031e  20d8              MOVS     r0,#0xd8
000320  f7ffbffe          B.W      LCD_DisplayString
;;;611    }
;;;612    
                          ENDP

                  App_TaskUserIF PROC
;;;383    
;;;384    static  void  App_TaskUserIF (void *p_arg)
000324  b082              SUB      sp,sp,#8
;;;385    {
;;;386        CPU_INT08U  *msg;
;;;387        CPU_INT08U   err;
;;;388        CPU_INT32U   nstate;
;;;389        CPU_INT32U   pstate;
;;;390    
;;;391    
;;;392        (void)p_arg;
;;;393    
;;;394    
;;;395        App_DispScr_SignOn();
000326  f7fffffe          BL       App_DispScr_SignOn
;;;396        OSTimeDlyHMSM(0, 0, 1, 0);
00032a  2300              MOVS     r3,#0
00032c  2201              MOVS     r2,#1
00032e  4619              MOV      r1,r3
000330  4618              MOV      r0,r3
000332  f7fffffe          BL       OSTimeDlyHMSM
;;;397        nstate = 1;
000336  2401              MOVS     r4,#1
;;;398        pstate = 1;
000338  2501              MOVS     r5,#1
;;;399    
;;;400    
;;;401        while (DEF_TRUE) {
;;;402            msg = (CPU_INT08U *)(OSMboxPend(App_UserIFMbox, OS_TICKS_PER_SEC / 10, &err));
00033a  4e31              LDR      r6,|L1.1024|
                  |L1.828|
00033c  aa01              ADD      r2,sp,#4
00033e  2164              MOVS     r1,#0x64
000340  68b0              LDR      r0,[r6,#8]  ; App_UserIFMbox
000342  f7fffffe          BL       OSMboxPend
;;;403            if (err == OS_NO_ERR) {
000346  f89d1004          LDRB     r1,[sp,#4]
00034a  b901              CBNZ     r1,|L1.846|
;;;404                nstate = (CPU_INT32U)msg;
00034c  4604              MOV      r4,r0
                  |L1.846|
;;;405            }
;;;406    
;;;407            if (nstate != pstate) {
00034e  42ac              CMP      r4,r5
000350  d004              BEQ      |L1.860|
;;;408                LCD_Clear(APP_COLOR_WHITE);
000352  f64f70ff          MOV      r0,#0xffff
000356  f7fffffe          BL       LCD_Clear
;;;409                pstate  = nstate;
00035a  4625              MOV      r5,r4
                  |L1.860|
;;;410            }
;;;411    
;;;412            switch (nstate) {
00035c  2c02              CMP      r4,#2
00035e  d002              BEQ      |L1.870|
;;;413                case 2:
;;;414                    App_DispScr_TaskNames();
;;;415                    break;
;;;416    
;;;417                case 1:
;;;418                default:
;;;419                    App_DispScr_SignOn();
000360  f7fffffe          BL       App_DispScr_SignOn
;;;420                    break;
000364  e7ea              B        |L1.828|
                  |L1.870|
000366  f7fffffe          BL       App_DispScr_TaskNames
00036a  e7e7              B        |L1.828|
;;;421            }
;;;422        }
;;;423    }
;;;424    
                          ENDP

                  App_TaskCreate PROC
;;;284    
;;;285    static  void  App_TaskCreate (void)
00036c  b530              PUSH     {r4,r5,lr}
;;;286    {
00036e  b087              SUB      sp,sp,#0x1c
;;;287        CPU_INT08U  os_err;
;;;288    
;;;289    
;;;290        os_err = OSTaskCreateExt((void (*)(void *)) App_TaskUserIF,
000370  4874              LDR      r0,|L1.1348|
000372  aa01              ADD      r2,sp,#4
000374  2503              MOVS     r5,#3
000376  2400              MOVS     r4,#0
000378  f44f7180          MOV      r1,#0x100
00037c  c233              STM      r2!,{r0,r1,r4,r5}
00037e  210d              MOVS     r1,#0xd
000380  460b              MOV      r3,r1
000382  f500727f          ADD      r2,r0,#0x3fc
000386  9100              STR      r1,[sp,#0]
000388  4621              MOV      r1,r4
00038a  486f              LDR      r0,|L1.1352|
00038c  f7fffffe          BL       OSTaskCreateExt
000390  9006              STR      r0,[sp,#0x18]
;;;291                                 (void          * ) 0,
;;;292                                 (OS_STK        * )&App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE - 1],
;;;293                                 (INT8U           ) APP_TASK_USER_IF_PRIO,
;;;294                                 (INT16U          ) APP_TASK_USER_IF_PRIO,
;;;295                                 (OS_STK        * )&App_TaskUserIFStk[0],
;;;296                                 (INT32U          ) APP_TASK_USER_IF_STK_SIZE,
;;;297                                 (void          * ) 0,
;;;298                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;299    
;;;300    #if (OS_TASK_NAME_SIZE >= 9)
;;;301        OSTaskNameSet(APP_TASK_USER_IF_PRIO, "User I/F", &os_err);
000392  aa06              ADD      r2,sp,#0x18
000394  a16d              ADR      r1,|L1.1356|
000396  200d              MOVS     r0,#0xd
000398  f7fffffe          BL       OSTaskNameSet
;;;302    #endif
;;;303    
;;;304        os_err = OSTaskCreateExt((void (*)(void *)) App_TaskKbd,
00039c  486e              LDR      r0,|L1.1368|
00039e  aa01              ADD      r2,sp,#4
0003a0  2180              MOVS     r1,#0x80
0003a2  c233              STM      r2!,{r0,r1,r4,r5}
0003a4  210c              MOVS     r1,#0xc
0003a6  460b              MOV      r3,r1
0003a8  f50072fe          ADD      r2,r0,#0x1fc
0003ac  9100              STR      r1,[sp,#0]
0003ae  2100              MOVS     r1,#0
0003b0  486a              LDR      r0,|L1.1372|
0003b2  f7fffffe          BL       OSTaskCreateExt
0003b6  9006              STR      r0,[sp,#0x18]
;;;305                                 (void          * ) 0,
;;;306                                 (OS_STK        * )&App_TaskKbdStk[APP_TASK_KBD_STK_SIZE - 1],
;;;307                                 (INT8U           ) APP_TASK_KBD_PRIO,
;;;308                                 (INT16U          ) APP_TASK_KBD_PRIO,
;;;309                                 (OS_STK        * )&App_TaskKbdStk[0],
;;;310                                 (INT32U          ) APP_TASK_KBD_STK_SIZE,
;;;311                                 (void          * ) 0,
;;;312                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;313    
;;;314    #if (OS_TASK_NAME_SIZE >= 9)
;;;315        OSTaskNameSet(APP_TASK_KBD_PRIO, "Keyboard", &os_err);
0003b8  aa06              ADD      r2,sp,#0x18
0003ba  a169              ADR      r1,|L1.1376|
0003bc  200c              MOVS     r0,#0xc
0003be  f7fffffe          BL       OSTaskNameSet
;;;316    #endif
;;;317    }
0003c2  b007              ADD      sp,sp,#0x1c
0003c4  bd30              POP      {r4,r5,pc}
;;;318    
                          ENDP

                  App_EventCreate PROC
;;;254    
;;;255    static  void  App_EventCreate (void)
0003c6  b508              PUSH     {r3,lr}
;;;256    {
;;;257    #if (OS_EVENT_NAME_SIZE > 12)
;;;258        CPU_INT08U  os_err;
;;;259    #endif
;;;260    
;;;261    
;;;262        App_UserIFMbox = OSMboxCreate((void *)0);                   /* Create MBOX for communication between Kbd and UserIF.*/
0003c8  2000              MOVS     r0,#0
0003ca  f7fffffe          BL       OSMboxCreate
0003ce  490c              LDR      r1,|L1.1024|
0003d0  6088              STR      r0,[r1,#8]  ; App_UserIFMbox
;;;263    #if (OS_EVENT_NAME_SIZE > 12)
;;;264        OSEventNameSet(App_UserIFMbox, "User IF Mbox", &os_err);
0003d2  466a              MOV      r2,sp
0003d4  a165              ADR      r1,|L1.1388|
0003d6  f7fffffe          BL       OSEventNameSet
;;;265    #endif
;;;266    }
0003da  bd08              POP      {r3,pc}
;;;267    
                          ENDP

                  App_ProbeCallback PROC
;;;683    #if (APP_OS_PROBE_EN == DEF_ENABLED)
;;;684    static  void  App_ProbeCallback (void)
0003dc  e92d5ff0          PUSH     {r4-r12,lr}
;;;685    {
;;;686    
;;;687    #if ((APP_PROBE_COM_EN  == DEF_ENABLED) && \
;;;688         (PROBE_COM_STAT_EN == DEF_ENABLED))
;;;689        CPU_INT32U  ctr_curr;
;;;690        CPU_INT32U  rxpkt_curr;
;;;691        CPU_INT32U  txpkt_curr;
;;;692        CPU_INT32U  sym_curr;
;;;693        CPU_INT32U  symbyte_curr;
;;;694    #endif
;;;695        CPU_INT32U  joystick;
;;;696    
;;;697    
;;;698        App_ProbeCounts++;
0003e0  4c07              LDR      r4,|L1.1024|
0003e2  6b20              LDR      r0,[r4,#0x30]  ; App_ProbeCounts
0003e4  1c40              ADDS     r0,r0,#1
0003e6  6320              STR      r0,[r4,#0x30]  ; App_ProbeCounts
;;;699    
;;;700        App_ProbeB1             = BSP_PB_GetStatus(1);
0003e8  2001              MOVS     r0,#1
0003ea  f7fffffe          BL       BSP_PB_GetStatus
0003ee  7020              STRB     r0,[r4,#0]
;;;701    
;;;702        joystick                = BSP_Joystick_GetStatus();
0003f0  f7fffffe          BL       BSP_Joystick_GetStatus
;;;703        App_ProbeJoystickCenter = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_CENTER);
0003f4  f3c01100          UBFX     r1,r0,#4,#1
0003f8  7161              STRB     r1,[r4,#5]
;;;704        App_ProbeJoystickDown   = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_DOWN);
0003fa  f3c00140          UBFX     r1,r0,#1,#1
0003fe  e0bd              B        |L1.1404|
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
                          DCD      0xcccccccd
                  |L1.1032|
000408  20204d69          DCB      "  Micrium uC/OS-II  ",0
00040c  63726975
000410  6d207543
000414  2f4f532d
000418  49492020
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
                          DCD      ||.bss||+0x800
                  |L1.1060|
000424  53542053          DCB      "ST STM32 (Cortex-M3)",0
000428  544d3332
00042c  2028436f
000430  72746578
000434  2d4d3329
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
                          DCD      ||.bss||+0x815
                  |L1.1088|
000440  20202020          DCB      "                    ",0
000444  20202020
000448  20202020
00044c  20202020
000450  20202020
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L1.1112|
                          DCD      ||.bss||+0x82a
                  |L1.1116|
00045c  20207543          DCB      "  uC/OS-II:  Vx.yy  ",0
000460  2f4f532d
000464  49493a20
000468  2056782e
00046c  79792020
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
                          DCD      ||.bss||+0x83f
                  |L1.1144|
                          DCD      0x51eb851f
                  |L1.1148|
00047c  20205469          DCB      "  TickRate:   xxxx  ",0
000480  636b5261
000484  74653a20
000488  20207878
00048c  78782020
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
                          DCD      ||.bss||+0x862
                  |L1.1176|
000498  20204350          DCB      "  CPU Usage:xx %    ",0
00049c  55205573
0004a0  6167653a
0004a4  78782025
0004a8  20202020
0004ac  00      
0004ad  00                DCB      0
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L1.1200|
                          DCD      ||.bss||+0x869
                  |L1.1204|
                          DCD      OSCPUUsage
                  |L1.1208|
0004b8  20204350          DCB      "  CPU Speed:xx MHz  ",0
0004bc  55205370
0004c0  6565643a
0004c4  7878204d
0004c8  487a2020
0004cc  00      
0004cd  00                DCB      0
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L1.1232|
                          DCD      0x000f4240
                  |L1.1236|
                          DCD      ||.bss||+0x87e
                  |L1.1240|
0004d8  20202354          DCB      "  #Ticks: xxxxxxxx  ",0
0004dc  69636b73
0004e0  3a207878
0004e4  78787878
0004e8  78782020
0004ec  00      
0004ed  00                DCB      0
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L1.1264|
                          DCD      OSTime
                  |L1.1268|
                          DCD      ||.bss||+0x89d
                  |L1.1272|
0004f8  20202343          DCB      "  #CtxSw: xxxxxxxx  ",0
0004fc  74785377
000500  3a207878
000504  78787878
000508  78782020
00050c  00      
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
                          DCD      ||.bss||+0x8a8
                  |L1.1300|
                          DCD      OSCtxSwCtr
                  |L1.1304|
                          DCD      ||.bss||+0x8b2
                  |L1.1308|
                          DCD      ||.bss||+0x8bd
                  |L1.1312|
                          DCD      ||.bss||+0x854
                  |L1.1316|
                          DCD      ||.bss||+0x893
                  |L1.1320|
                          DCD      OSTCBTbl
                  |L1.1324|
00052c  20205072          DCB      "  Prio   Taskname   ",0
000530  696f2020
000534  20546173
000538  6b6e616d
00053c  65202020
000540  00      
000541  00                DCB      0
000542  00                DCB      0
000543  00                DCB      0
                  |L1.1348|
                          DCD      ||.bss||+0x200
                  |L1.1352|
                          DCD      App_TaskUserIF
                  |L1.1356|
00054c  55736572          DCB      "User I/F",0
000550  20492f46
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L1.1368|
                          DCD      ||.bss||+0x600
                  |L1.1372|
                          DCD      App_TaskKbd
                  |L1.1376|
000560  4b657962          DCB      "Keyboard",0
000564  6f617264
000568  00      
000569  00                DCB      0
00056a  00                DCB      0
00056b  00                DCB      0
                  |L1.1388|
00056c  55736572          DCB      "User IF Mbox",0
000570  20494620
000574  4d626f78
000578  00      
000579  00                DCB      0
00057a  00                DCB      0
00057b  00                DCB      0
                  |L1.1404|
00057c  7121              STRB     r1,[r4,#4]
;;;705        App_ProbeJoystickLeft   = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_LEFT);
00057e  f3c00180          UBFX     r1,r0,#2,#1
000582  7061              STRB     r1,[r4,#1]
;;;706        App_ProbeJoystickRight  = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_RIGHT);
000584  f3c001c0          UBFX     r1,r0,#3,#1
000588  70a1              STRB     r1,[r4,#2]
;;;707        App_ProbeJoystickUp     = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_UP);
00058a  f0000001          AND      r0,r0,#1
00058e  70e0              STRB     r0,[r4,#3]
;;;708    
;;;709    
;;;710    #if ((APP_PROBE_COM_EN  == DEF_ENABLED) && \
;;;711         (PROBE_COM_STAT_EN == DEF_ENABLED))
;;;712        ctr_curr     = OSTime;
000590  4857              LDR      r0,|L1.1776|
000592  6805              LDR      r5,[r0,#0]  ; OSTime
;;;713        rxpkt_curr   = ProbeCom_RxPktCtr;
000594  4857              LDR      r0,|L1.1780|
000596  6806              LDR      r6,[r0,#0]  ; ProbeCom_RxPktCtr
;;;714        txpkt_curr   = ProbeCom_TxPktCtr;
000598  4857              LDR      r0,|L1.1784|
00059a  6807              LDR      r7,[r0,#0]  ; ProbeCom_TxPktCtr
;;;715        sym_curr     = ProbeCom_TxSymCtr;
00059c  4857              LDR      r0,|L1.1788|
00059e  f8d08000          LDR      r8,[r0,#0]  ; ProbeCom_TxSymCtr
;;;716        symbyte_curr = ProbeCom_TxSymByteCtr;
0005a2  4857              LDR      r0,|L1.1792|
0005a4  f8d09000          LDR      r9,[r0,#0]  ; ProbeCom_TxSymByteCtr
;;;717    
;;;718        if ((ctr_curr - App_ProbeComCtrLast) >= OS_TICKS_PER_SEC) {
0005a8  6ae0              LDR      r0,[r4,#0x2c]  ; App_ProbeComCtrLast
0005aa  1a28              SUBS     r0,r5,r0
0005ac  f5b07f7a          CMP      r0,#0x3e8
0005b0  d339              BCC      |L1.1574|
;;;719            App_ProbeComRxPktSpd      = ((CPU_FP32)(rxpkt_curr   - App_ProbeComRxPktLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
0005b2  f7fffffe          BL       __aeabi_ui2f
0005b6  4683              MOV      r11,r0
0005b8  69e0              LDR      r0,[r4,#0x1c]  ; App_ProbeComRxPktLast
0005ba  1a30              SUBS     r0,r6,r0
0005bc  f7fffffe          BL       __aeabi_ui2f
0005c0  4659              MOV      r1,r11
0005c2  f7fffffe          BL       __aeabi_fdiv
0005c6  f8dfa13c          LDR      r10,|L1.1796|
0005ca  4651              MOV      r1,r10
0005cc  f7fffffe          BL       __aeabi_fmul
0005d0  60e0              STR      r0,[r4,#0xc]  ; App_ProbeComRxPktSpd
;;;720            App_ProbeComTxPktSpd      = ((CPU_FP32)(txpkt_curr   - App_ProbeComTxPktLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
0005d2  6a20              LDR      r0,[r4,#0x20]  ; App_ProbeComTxPktLast
0005d4  1a38              SUBS     r0,r7,r0
0005d6  f7fffffe          BL       __aeabi_ui2f
0005da  4659              MOV      r1,r11
0005dc  f7fffffe          BL       __aeabi_fdiv
0005e0  4651              MOV      r1,r10
0005e2  f7fffffe          BL       __aeabi_fmul
0005e6  6120              STR      r0,[r4,#0x10]  ; App_ProbeComTxPktSpd
;;;721            App_ProbeComTxSymSpd      = ((CPU_FP32)(sym_curr     - App_ProbeComTxSymLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
0005e8  6a60              LDR      r0,[r4,#0x24]  ; App_ProbeComTxSymLast
0005ea  eba80000          SUB      r0,r8,r0
0005ee  f7fffffe          BL       __aeabi_ui2f
0005f2  4659              MOV      r1,r11
0005f4  f7fffffe          BL       __aeabi_fdiv
0005f8  4651              MOV      r1,r10
0005fa  f7fffffe          BL       __aeabi_fmul
0005fe  6160              STR      r0,[r4,#0x14]  ; App_ProbeComTxSymSpd
;;;722            App_ProbeComTxSymByteSpd  = ((CPU_FP32)(symbyte_curr - App_ProbeComTxSymByteLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
000600  6aa0              LDR      r0,[r4,#0x28]  ; App_ProbeComTxSymByteLast
000602  eba90000          SUB      r0,r9,r0
000606  f7fffffe          BL       __aeabi_ui2f
00060a  4659              MOV      r1,r11
00060c  f7fffffe          BL       __aeabi_fdiv
000610  4651              MOV      r1,r10
000612  f7fffffe          BL       __aeabi_fmul
000616  61a0              STR      r0,[r4,#0x18]  ; App_ProbeComTxSymByteSpd
;;;723    
;;;724            App_ProbeComCtrLast       = ctr_curr;
000618  62e5              STR      r5,[r4,#0x2c]  ; App_ProbeComCtrLast
;;;725            App_ProbeComRxPktLast     = rxpkt_curr;
00061a  61e6              STR      r6,[r4,#0x1c]  ; App_ProbeComRxPktLast
;;;726            App_ProbeComTxPktLast     = txpkt_curr;
00061c  6227              STR      r7,[r4,#0x20]  ; App_ProbeComTxPktLast
;;;727            App_ProbeComTxSymLast     = sym_curr;
00061e  f8c48024          STR      r8,[r4,#0x24]  ; App_ProbeComTxSymLast
;;;728            App_ProbeComTxSymByteLast = symbyte_curr;
000622  f8c49028          STR      r9,[r4,#0x28]  ; App_ProbeComTxSymByteLast
                  |L1.1574|
;;;729        }
;;;730    #endif
;;;731    }
000626  e8bd9ff0          POP      {r4-r12,pc}
;;;732    #endif
                          ENDP

                  App_InitProbe PROC
;;;631         (APP_OS_PROBE_EN  == DEF_ENABLED))
;;;632    static  void  App_InitProbe (void)
00062a  b510              PUSH     {r4,lr}
;;;633    {
;;;634    #if (APP_OS_PROBE_EN        == DEF_ENABLED)
;;;635        (void)App_ProbeCounts;
;;;636        (void)App_ProbeB1;
;;;637        (void)App_ProbeJoystickCenter;
;;;638        (void)App_ProbeJoystickDown;
;;;639        (void)App_ProbeJoystickLeft;
;;;640        (void)App_ProbeJoystickRight;
;;;641        (void)App_ProbeJoystickUp;
;;;642    
;;;643    #if ((APP_PROBE_COM_EN      == DEF_ENABLED) && \
;;;644         (PROBE_COM_STAT_EN     == DEF_ENABLED))
;;;645        (void)App_ProbeComRxPktSpd;
;;;646        (void)App_ProbeComTxPktSpd;
;;;647        (void)App_ProbeComTxSymSpd;
;;;648        (void)App_ProbeComTxSymByteSpd;
;;;649    #endif
;;;650    
;;;651        OSProbe_Init();
00062c  f7fffffe          BL       OSProbe_Init
;;;652        OSProbe_SetCallback(App_ProbeCallback);
000630  4835              LDR      r0,|L1.1800|
000632  f7fffffe          BL       OSProbe_SetCallback
;;;653        OSProbe_SetDelay(250);
000636  20fa              MOVS     r0,#0xfa
000638  f7fffffe          BL       OSProbe_SetDelay
;;;654    #endif
;;;655    
;;;656    #if (APP_PROBE_COM_EN       == DEF_ENABLED)
;;;657        ProbeCom_Init();                                            /* Initialize the uC/Probe communications module.       */
00063c  f7fffffe          BL       ProbeCom_Init
;;;658    #if (PROBE_COM_METHOD_RS232 == DEF_ENABLED)
;;;659        ProbeRS232_Init(115200);
000640  f44f30e1          MOV      r0,#0x1c200
000644  f7fffffe          BL       ProbeRS232_Init
;;;660        ProbeRS232_RxIntEn();
000648  e8bd4010          POP      {r4,lr}
00064c  f7ffbffe          B.W      ProbeRS232_RxIntEn
;;;661    #endif
;;;662    #endif
;;;663    }
;;;664    #endif
                          ENDP

                  App_TaskStart PROC
;;;204    
;;;205    static  void  App_TaskStart (void *p_arg)
000650  f7fffffe          BL       BSP_Init
;;;206    {
;;;207        CPU_INT32U  i;
;;;208        CPU_INT32U  j;
;;;209        CPU_INT32U  dly;
;;;210    
;;;211    
;;;212        (void)p_arg;
;;;213    
;;;214        BSP_Init();                                                 /* Initialize BSP functions.                            */
;;;215        OS_CPU_SysTickInit();                                       /* Initialize the SysTick.                              */
000654  f7fffffe          BL       OS_CPU_SysTickInit
;;;216    
;;;217    #if (OS_TASK_STAT_EN > 0)
;;;218        OSStatInit();                                               /* Determine CPU capacity.                              */
000658  f7fffffe          BL       OSStatInit
;;;219    #endif
;;;220    
;;;221    #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
;;;222         (APP_OS_PROBE_EN  == DEF_ENABLED))
;;;223        App_InitProbe();
00065c  f7fffffe          BL       App_InitProbe
;;;224    #endif
;;;225    
;;;226        App_EventCreate();                                          /* Create application events.                           */
000660  f7fffffe          BL       App_EventCreate
;;;227        App_TaskCreate();                                           /* Create application tasks.                            */
000664  f7fffffe          BL       App_TaskCreate
                  |L1.1640|
;;;228    
;;;229        while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
;;;230            BSP_LED_On(3);BSP_LED_On(4);
000668  2003              MOVS     r0,#3
00066a  f7fffffe          BL       BSP_LED_On
00066e  2004              MOVS     r0,#4
000670  f7fffffe          BL       BSP_LED_On
;;;231    				OSTimeDlyHMSM(0, 0, 0, 100);
000674  2200              MOVS     r2,#0
000676  2364              MOVS     r3,#0x64
000678  4611              MOV      r1,r2
00067a  4610              MOV      r0,r2
00067c  f7fffffe          BL       OSTimeDlyHMSM
;;;232    				BSP_LED_Off(3);BSP_LED_Off(4);
000680  2003              MOVS     r0,#3
000682  f7fffffe          BL       BSP_LED_Off
000686  2004              MOVS     r0,#4
000688  f7fffffe          BL       BSP_LED_Off
;;;233    				OSTimeDlyHMSM(0, 0, 0, 100);
00068c  2200              MOVS     r2,#0
00068e  2364              MOVS     r3,#0x64
000690  4611              MOV      r1,r2
000692  4610              MOV      r0,r2
000694  f7fffffe          BL       OSTimeDlyHMSM
000698  e7e6              B        |L1.1640|
;;;234        }
;;;235    }
;;;236    
                          ENDP

                  main PROC
;;;159    
;;;160    int  main (void)
00069a  b500              PUSH     {lr}
;;;161    {
00069c  b087              SUB      sp,sp,#0x1c
;;;162        CPU_INT08U  os_err;
;;;163    
;;;164    
;;;165        BSP_IntDisAll();                                            /* Disable all ints until we are ready to accept them.  */
00069e  f7fffffe          BL       BSP_IntDisAll
;;;166    
;;;167        OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel".         */
0006a2  f7fffffe          BL       OSInit
;;;168    
;;;169        os_err = OSTaskCreateExt((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
0006a6  2103              MOVS     r1,#3
0006a8  2200              MOVS     r2,#0
0006aa  2380              MOVS     r3,#0x80
0006ac  4817              LDR      r0,|L1.1804|
0006ae  9302              STR      r3,[sp,#8]
0006b0  9203              STR      r2,[sp,#0xc]
0006b2  9104              STR      r1,[sp,#0x10]
0006b4  9100              STR      r1,[sp,#0]
0006b6  9001              STR      r0,[sp,#4]
0006b8  460b              MOV      r3,r1
0006ba  f50072fe          ADD      r2,r0,#0x1fc
0006be  2100              MOVS     r1,#0
0006c0  4813              LDR      r0,|L1.1808|
0006c2  f7fffffe          BL       OSTaskCreateExt
0006c6  9006              STR      r0,[sp,#0x18]
;;;170                                 (void          * ) 0,
;;;171                                 (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
;;;172                                 (INT8U           ) APP_TASK_START_PRIO,
;;;173                                 (INT16U          ) APP_TASK_START_PRIO,
;;;174                                 (OS_STK        * )&App_TaskStartStk[0],
;;;175                                 (INT32U          ) APP_TASK_START_STK_SIZE,
;;;176                                 (void          * )0,
;;;177                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;178    
;;;179    #if (OS_TASK_NAME_SIZE >= 11)
;;;180        OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U *)"Start Task", &os_err);
0006c8  aa06              ADD      r2,sp,#0x18
0006ca  a112              ADR      r1,|L1.1812|
0006cc  2003              MOVS     r0,#3
0006ce  f7fffffe          BL       OSTaskNameSet
;;;181    #endif
;;;182    
;;;183        OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
0006d2  f7fffffe          BL       OSStart
;;;184    
;;;185        return (0);
;;;186    }
0006d6  b007              ADD      sp,sp,#0x1c
0006d8  2000              MOVS     r0,#0                 ;185
0006da  bd00              POP      {pc}
;;;187    
                          ENDP

                  App_TaskCreateHook PROC
;;;811    
;;;812    void  App_TaskCreateHook (OS_TCB *ptcb)
0006dc  f7ffbffe          B.W      OSProbe_TaskCreateHook
;;;813    {
;;;814    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;815         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;816        OSProbe_TaskCreateHook(ptcb);
;;;817    #endif
;;;818    }
;;;819    
                          ENDP

                  App_TaskDelHook PROC
;;;831    
;;;832    void  App_TaskDelHook (OS_TCB *ptcb)
0006e0  4770              BX       lr
;;;833    {
;;;834        (void)ptcb;
;;;835    }
;;;836    
                          ENDP

                  App_TaskIdleHook PROC
;;;850    #if OS_VERSION >= 251
;;;851    void  App_TaskIdleHook (void)
0006e2  4770              BX       lr
;;;852    {
;;;853    }
;;;854    #endif
                          ENDP

                  App_TaskStatHook PROC
;;;866    
;;;867    void  App_TaskStatHook (void)
0006e4  4770              BX       lr
;;;868    {
;;;869    }
;;;870    
                          ENDP

                  App_TaskSwHook PROC
;;;888    #if OS_TASK_SW_HOOK_EN > 0
;;;889    void  App_TaskSwHook (void)
0006e6  f7ffbffe          B.W      OSProbe_TaskSwHook
;;;890    {
;;;891    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;892         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;893        OSProbe_TaskSwHook();
;;;894    #endif
;;;895    }
;;;896    #endif
                          ENDP

                  App_TCBInitHook PROC
;;;911    #if OS_VERSION >= 204
;;;912    void  App_TCBInitHook (OS_TCB *ptcb)
0006ea  4770              BX       lr
;;;913    {
;;;914        (void)ptcb;
;;;915    }
;;;916    #endif
                          ENDP

                  App_TimeTickHook PROC
;;;930    #if OS_TIME_TICK_HOOK_EN > 0
;;;931    void  App_TimeTickHook (void)
0006ec  f7ffbffe          B.W      OSProbe_TickHook
;;;932    {
;;;933    #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
;;;934         (OS_PROBE_HOOKS_EN == DEF_ENABLED))
;;;935        OSProbe_TickHook();
;;;936    #endif
;;;937    }
;;;938    #endif
                          ENDP

                  |L1.1776|
                          DCD      OSTime
                  |L1.1780|
                          DCD      ProbeCom_RxPktCtr
                  |L1.1784|
                          DCD      ProbeCom_TxPktCtr
                  |L1.1788|
                          DCD      ProbeCom_TxSymCtr
                  |L1.1792|
                          DCD      ProbeCom_TxSymByteCtr
                  |L1.1796|
                          DCD      0x447a0000
                  |L1.1800|
                          DCD      App_ProbeCallback
                  |L1.1804|
                          DCD      ||.bss||
                  |L1.1808|
                          DCD      App_TaskStart
                  |L1.1812|
000714  53746172          DCB      "Start Task",0
000718  74205461
00071c  736b00  
00071f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  App_TaskStartStk
                          %        512
                  App_TaskUserIFStk
                          %        1024
                  App_TaskKbdStk
                          %        512
                  App_LCDLine0
                          %        21
                  App_LCDLine1
                          %        21
                  App_LCDLine2
                          %        21
                  App_LCDLine3
                          %        21
                  App_LCDLine4
                          %        21
                  App_LCDLine5
                          %        21
                  App_LCDLine6
                          %        21
                  App_LCDLine7
                          %        21
                  App_LCDLine8
                          %        21
                  App_LCDLine9
                          %        21

                          AREA ||.data||, DATA, ALIGN=2

                  App_ProbeB1
000000  00                DCB      0x00
                  App_ProbeJoystickLeft
000001  00                DCB      0x00
                  App_ProbeJoystickRight
000002  00                DCB      0x00
                  App_ProbeJoystickUp
000003  00                DCB      0x00
                  App_ProbeJoystickDown
000004  00                DCB      0x00
                  App_ProbeJoystickCenter
000005  000000            DCB      0x00,0x00,0x00
                  App_UserIFMbox
                          DCD      0x00000000
                  App_ProbeComRxPktSpd
                          DCD      0x00000000
                  App_ProbeComTxPktSpd
                          DCD      0x00000000
                  App_ProbeComTxSymSpd
                          DCD      0x00000000
                  App_ProbeComTxSymByteSpd
                          DCD      0x00000000
                  App_ProbeComRxPktLast
                          DCD      0x00000000
                  App_ProbeComTxPktLast
                          DCD      0x00000000
                  App_ProbeComTxSymLast
                          DCD      0x00000000
                  App_ProbeComTxSymByteLast
                          DCD      0x00000000
                  App_ProbeComCtrLast
                          DCD      0x00000000
                  App_ProbeCounts
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
