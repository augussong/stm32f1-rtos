; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\stm32f10x_bkp.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\stm32f10x_bkp.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;73     *******************************************************************************/
;;;74     void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76       RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;77       RCC_BackupResetCmd(DISABLE);
000008  e8bd4010          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7ffbffe          B.W      RCC_BackupResetCmd
;;;78     }
;;;79     
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;89     *******************************************************************************/
;;;90     void BKP_TamperPinLevelConfig(u16 BKP_TamperPinLevel)
000012  491c              LDR      r1,|L1.132|
;;;91     {
;;;92       /* Check the parameters */
;;;93       assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;94     
;;;95       *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
000014  6008              STR      r0,[r1,#0]
;;;96     }
000016  4770              BX       lr
;;;97     
                          ENDP

                  BKP_TamperPinCmd PROC
;;;105    *******************************************************************************/
;;;106    void BKP_TamperPinCmd(FunctionalState NewState)
000018  491b              LDR      r1,|L1.136|
;;;107    {
;;;108      /* Check the parameters */
;;;109      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;110    
;;;111      *(vu32 *) CR_TPE_BB = (u32)NewState;
00001a  6008              STR      r0,[r1,#0]
;;;112    }
00001c  4770              BX       lr
;;;113    
                          ENDP

                  BKP_ITConfig PROC
;;;121    *******************************************************************************/
;;;122    void BKP_ITConfig(FunctionalState NewState)
00001e  491b              LDR      r1,|L1.140|
;;;123    {
;;;124      /* Check the parameters */
;;;125      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;126    
;;;127      *(vu32 *) CSR_TPIE_BB = (u32)NewState;
000020  6008              STR      r0,[r1,#0]
;;;128    }
000022  4770              BX       lr
;;;129    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;144    *******************************************************************************/
;;;145    void BKP_RTCOutputConfig(u16 BKP_RTCOutputSource)
000024  4a1a              LDR      r2,|L1.144|
;;;146    {
;;;147      u16 tmpreg = 0;
;;;148    
;;;149      /* Check the parameters */
;;;150      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;151    
;;;152      tmpreg = BKP->RTCCR;
000026  8811              LDRH     r1,[r2,#0]
;;;153    
;;;154      /* Clear CCO, ASOE and ASOS bits */
;;;155      tmpreg &= RTCCR_Mask;
000028  f4217160          BIC      r1,r1,#0x380
;;;156      
;;;157      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;158      tmpreg |= BKP_RTCOutputSource;
00002c  4308              ORRS     r0,r0,r1
;;;159    
;;;160      /* Store the new value */
;;;161      BKP->RTCCR = tmpreg;
00002e  8010              STRH     r0,[r2,#0]
;;;162    }
000030  4770              BX       lr
;;;163    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;171    *******************************************************************************/
;;;172    void BKP_SetRTCCalibrationValue(u8 CalibrationValue)
000032  4a17              LDR      r2,|L1.144|
;;;173    {
;;;174      u16 tmpreg = 0;
;;;175    
;;;176      /* Check the parameters */
;;;177      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;178    
;;;179      tmpreg = BKP->RTCCR;
000034  8811              LDRH     r1,[r2,#0]
;;;180    
;;;181      /* Clear CAL[6:0] bits */
;;;182      tmpreg &= RTCCR_CAL_Mask;
000036  f021017f          BIC      r1,r1,#0x7f
;;;183    
;;;184      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;185      tmpreg |= CalibrationValue;
00003a  4308              ORRS     r0,r0,r1
;;;186    
;;;187      /* Store the new value */
;;;188      BKP->RTCCR = tmpreg;
00003c  8010              STRH     r0,[r2,#0]
;;;189    }
00003e  4770              BX       lr
;;;190    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;199    *******************************************************************************/
;;;200    void BKP_WriteBackupRegister(u16 BKP_DR, u16 Data)
000040  f1004080          ADD      r0,r0,#0x40000000
;;;201    {
;;;202      /* Check the parameters */
;;;203      assert_param(IS_BKP_DR(BKP_DR));
;;;204    
;;;205      *(vu16 *) (BKP_BASE + BKP_DR) = Data;
000044  f50040c0          ADD      r0,r0,#0x6000
000048  f8a01c00          STRH     r1,[r0,#0xc00]
;;;206    }
00004c  4770              BX       lr
;;;207    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;215    *******************************************************************************/
;;;216    u16 BKP_ReadBackupRegister(u16 BKP_DR)
00004e  f1004080          ADD      r0,r0,#0x40000000
;;;217    {
;;;218      /* Check the parameters */
;;;219      assert_param(IS_BKP_DR(BKP_DR));
;;;220    
;;;221      return (*(vu16 *) (BKP_BASE + BKP_DR));
000052  f50040c0          ADD      r0,r0,#0x6000
000056  f8b00c00          LDRH     r0,[r0,#0xc00]
;;;222    }
00005a  4770              BX       lr
;;;223    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;230    *******************************************************************************/
;;;231    FlagStatus BKP_GetFlagStatus(void)
00005c  480d              LDR      r0,|L1.148|
;;;232    {
;;;233      return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
00005e  6800              LDR      r0,[r0,#0]
000060  b2c0              UXTB     r0,r0
;;;234    }
000062  4770              BX       lr
;;;235    
                          ENDP

                  BKP_ClearFlag PROC
;;;242    *******************************************************************************/
;;;243    void BKP_ClearFlag(void)
000064  480c              LDR      r0,|L1.152|
;;;244    {
;;;245      /* Set CTE bit to clear Tamper Pin Event flag */
;;;246      BKP->CSR |= CSR_CTE_Set;
000066  8801              LDRH     r1,[r0,#0]
000068  f0410101          ORR      r1,r1,#1
00006c  8001              STRH     r1,[r0,#0]
;;;247    }
00006e  4770              BX       lr
;;;248    
                          ENDP

                  BKP_GetITStatus PROC
;;;255    *******************************************************************************/
;;;256    ITStatus BKP_GetITStatus(void)
000070  480a              LDR      r0,|L1.156|
;;;257    {
;;;258      return (ITStatus)(*(vu32 *) CSR_TIF_BB);
000072  6800              LDR      r0,[r0,#0]
000074  b2c0              UXTB     r0,r0
;;;259    }
000076  4770              BX       lr
;;;260    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;267    *******************************************************************************/
;;;268    void BKP_ClearITPendingBit(void)
000078  4807              LDR      r0,|L1.152|
;;;269    {
;;;270      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;271      BKP->CSR |= CSR_CTI_Set;
00007a  8801              LDRH     r1,[r0,#0]
00007c  f0410102          ORR      r1,r1,#2
000080  8001              STRH     r1,[r0,#0]
;;;272    }
000082  4770              BX       lr
;;;273    
                          ENDP

                  |L1.132|
                          DCD      0x420d8604
                  |L1.136|
                          DCD      0x420d8600
                  |L1.140|
                          DCD      0x420d8688
                  |L1.144|
                          DCD      0x40006c2c
                  |L1.148|
                          DCD      0x420d86a0
                  |L1.152|
                          DCD      0x40006c34
                  |L1.156|
                          DCD      0x420d86a4
