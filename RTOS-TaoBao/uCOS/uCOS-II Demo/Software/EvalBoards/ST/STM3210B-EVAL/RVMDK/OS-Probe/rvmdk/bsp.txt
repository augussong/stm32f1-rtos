; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\bsp.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\bsp.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\bsp.crf ..\BSP\bsp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BSP_LED_Init PROC
;;;549    
;;;550    static  void  BSP_LED_Init (void)
000000  b508              PUSH     {r3,lr}
;;;551    {
;;;552        GPIO_InitTypeDef  gpio_init;
;;;553    
;;;554    
;;;555        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;556    
;;;557        gpio_init.GPIO_Pin   = BSP_GPIOC_LED1 | BSP_GPIOC_LED2 | BSP_GPIOC_LED3 | BSP_GPIOC_LED4;
00000a  f44f7070          MOV      r0,#0x3c0
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;558        gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;559        gpio_init.GPIO_Mode  = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;560        GPIO_Init(GPIOB, &gpio_init);
00001e  4669              MOV      r1,sp
000020  48a9              LDR      r0,|L1.712|
000022  f7fffffe          BL       GPIO_Init
;;;561    }
000026  bd08              POP      {r3,pc}
;;;562    
                          ENDP

                  BSP_Init PROC
;;;149    
;;;150    void  BSP_Init (void)
000028  b510              PUSH     {r4,lr}
;;;151    {
;;;152        RCC_DeInit();
00002a  f7fffffe          BL       RCC_DeInit
;;;153        RCC_HSEConfig(RCC_HSE_ON);
00002e  f44f3080          MOV      r0,#0x10000
000032  f7fffffe          BL       RCC_HSEConfig
;;;154        RCC_WaitForHSEStartUp();
000036  f7fffffe          BL       RCC_WaitForHSEStartUp
;;;155    
;;;156    
;;;157        RCC_HCLKConfig(RCC_SYSCLK_Div1);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       RCC_HCLKConfig
;;;158        RCC_PCLK2Config(RCC_HCLK_Div1);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       RCC_PCLK2Config
;;;159        RCC_PCLK1Config(RCC_HCLK_Div2);
000046  f44f6080          MOV      r0,#0x400
00004a  f7fffffe          BL       RCC_PCLK1Config
;;;160        RCC_ADCCLKConfig(RCC_PCLK2_Div6);
00004e  f44f4000          MOV      r0,#0x8000
000052  f7fffffe          BL       RCC_ADCCLKConfig
;;;161        FLASH_SetLatency(FLASH_Latency_2);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       FLASH_SetLatency
;;;162        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;163        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
000062  f44f11e0          MOV      r1,#0x1c0000
000066  f44f3080          MOV      r0,#0x10000
00006a  f7fffffe          BL       RCC_PLLConfig
;;;164        RCC_PLLCmd(ENABLE);
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       RCC_PLLCmd
                  |L1.116|
;;;165    
;;;166        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {
000074  2039              MOVS     r0,#0x39
000076  f7fffffe          BL       RCC_GetFlagStatus
00007a  2800              CMP      r0,#0
00007c  d0fa              BEQ      |L1.116|
;;;167            ;
;;;168        }
;;;169    
;;;170        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
00007e  2002              MOVS     r0,#2
000080  f7fffffe          BL       RCC_SYSCLKConfig
                  |L1.132|
;;;171    
;;;172        while (RCC_GetSYSCLKSource() != 0x08) {
000084  f7fffffe          BL       RCC_GetSYSCLKSource
000088  2808              CMP      r0,#8
00008a  d1fb              BNE      |L1.132|
;;;173            ;
;;;174        }
;;;175    
;;;176    //    BSP_ADC_Init();                                             /* Initialize the I/Os for the ADC      controls.       */
;;;177        BSP_LED_Init();                                             /* Initialize the I/Os for the LED      controls.       */
00008c  e8bd4010          POP      {r4,lr}
000090  e7fe              B        BSP_LED_Init
;;;178    //    BSP_PB_Init();                                              /* Initialize the I/Os for the PB       control.        */
;;;179    //    BSP_Joystick_Init();                                        /* Initialize the I/Os for the Joystick control.        */
;;;180    
;;;181    //    STM3210B_LCD_Init();
;;;182    //    LCD_Clear(0xFFFF);
;;;183    }
;;;184    
                          ENDP

                  BSP_CPU_ClkFreq PROC
;;;200    
;;;201    CPU_INT32U  BSP_CPU_ClkFreq (void)
000092  b500              PUSH     {lr}
;;;202    {
000094  b085              SUB      sp,sp,#0x14
;;;203        RCC_ClocksTypeDef  rcc_clocks;
;;;204    
;;;205    
;;;206        RCC_GetClocksFreq(&rcc_clocks);
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       RCC_GetClocksFreq
;;;207    
;;;208        return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);
00009c  9801              LDR      r0,[sp,#4]
;;;209    }
00009e  b005              ADD      sp,sp,#0x14
0000a0  bd00              POP      {pc}
;;;210    
                          ENDP

                  OS_CPU_SysTickClkFreq PROC
;;;234    
;;;235    INT32U  OS_CPU_SysTickClkFreq (void)
0000a2  e7fe              B        BSP_CPU_ClkFreq
;;;236    {
;;;237        INT32U  freq;
;;;238    
;;;239    
;;;240        freq = BSP_CPU_ClkFreq();
;;;241        return (freq);
;;;242    }
;;;243    
                          ENDP

                  BSP_ADC_GetStatus PROC
;;;311    
;;;312    CPU_INT16U  BSP_ADC_GetStatus (CPU_INT08U  adc)
0000a4  4601              MOV      r1,r0
;;;313    {
;;;314        CPU_INT16U  result;
;;;315    
;;;316    
;;;317        result = 0;
0000a6  2000              MOVS     r0,#0
;;;318    
;;;319        if (adc == 1) {
0000a8  2901              CMP      r1,#1
0000aa  d102              BNE      |L1.178|
;;;320            result = ADC_GetConversionValue(ADC1);
0000ac  4887              LDR      r0,|L1.716|
0000ae  f7ffbffe          B.W      ADC_GetConversionValue
                  |L1.178|
;;;321        }
;;;322    
;;;323        return (result);
;;;324    }
0000b2  4770              BX       lr
;;;325    
                          ENDP

                  BSP_PB_GetStatus PROC
;;;389    
;;;390    CPU_BOOLEAN  BSP_PB_GetStatus (CPU_INT08U pb)
0000b4  b510              PUSH     {r4,lr}
;;;391    {
;;;392        CPU_BOOLEAN  status;
;;;393        CPU_INT32U   pin;
;;;394    
;;;395    
;;;396        status = DEF_FALSE;
0000b6  2400              MOVS     r4,#0
;;;397    
;;;398        switch (pb) {
0000b8  2801              CMP      r0,#1
0000ba  d004              BEQ      |L1.198|
0000bc  2802              CMP      r0,#2
0000be  d00a              BEQ      |L1.214|
0000c0  2803              CMP      r0,#3
0000c2  d116              BNE      |L1.242|
0000c4  e00e              B        |L1.228|
                  |L1.198|
;;;399            case BSP_PB_ID_KEY:
;;;400                 pin = GPIO_ReadInputDataBit(GPIOB, BSP_GPIOB_PB_KEY);
0000c6  f44f7100          MOV      r1,#0x200
0000ca  487f              LDR      r0,|L1.712|
0000cc  f7fffffe          BL       GPIO_ReadInputDataBit
;;;401                 if (pin == 0) {
0000d0  b978              CBNZ     r0,|L1.242|
;;;402                     status = DEF_TRUE;
0000d2  2401              MOVS     r4,#1
0000d4  e00d              B        |L1.242|
                  |L1.214|
;;;403                 }
;;;404                 break;
;;;405    
;;;406            case BSP_PB_ID_WAKEUP:
;;;407                 pin = GPIO_ReadInputDataBit(GPIOA, BSP_GPIOA_PB_WAKEUP);
0000d6  2101              MOVS     r1,#1
0000d8  487d              LDR      r0,|L1.720|
0000da  f7fffffe          BL       GPIO_ReadInputDataBit
;;;408                 if (pin == 0) {
0000de  b940              CBNZ     r0,|L1.242|
;;;409                     status = DEF_TRUE;
0000e0  2401              MOVS     r4,#1
0000e2  e006              B        |L1.242|
                  |L1.228|
;;;410                 }
;;;411                 break;
;;;412    
;;;413            case BSP_PB_ID_TAMPER:
;;;414                 pin = GPIO_ReadInputDataBit(GPIOC, BSP_GPIOC_PB_TAMPER);
0000e4  f44f5100          MOV      r1,#0x2000
0000e8  487a              LDR      r0,|L1.724|
0000ea  f7fffffe          BL       GPIO_ReadInputDataBit
;;;415                 if (pin == 0) {
0000ee  b900              CBNZ     r0,|L1.242|
;;;416                     status = DEF_TRUE;
0000f0  2401              MOVS     r4,#1
                  |L1.242|
;;;417                 }
;;;418                 break;
;;;419    
;;;420            default:
;;;421                 break;
;;;422        }
;;;423    
;;;424        return (status);
0000f2  4620              MOV      r0,r4
;;;425    }
0000f4  bd10              POP      {r4,pc}
;;;426    
                          ENDP

                  BSP_Joystick_GetStatus PROC
;;;490    
;;;491    CPU_INT32U  BSP_Joystick_GetStatus (void)
0000f6  b570              PUSH     {r4-r6,lr}
;;;492    {
;;;493        CPU_BOOLEAN  pin;
;;;494        CPU_BOOLEAN  status;
;;;495    
;;;496        status = 0;
0000f8  2400              MOVS     r4,#0
;;;497    
;;;498        pin    = GPIO_ReadInputDataBit(GPIOE, BSP_GPIOE_JOY_RIGHT);
0000fa  4d77              LDR      r5,|L1.728|
0000fc  2102              MOVS     r1,#2
0000fe  4628              MOV      r0,r5
000100  f7fffffe          BL       GPIO_ReadInputDataBit
;;;499        if (pin == 0) {
000104  b900              CBNZ     r0,|L1.264|
;;;500            status |= BSP_JOYSTICK_LEFT;
000106  2404              MOVS     r4,#4
                  |L1.264|
;;;501        }
;;;502    
;;;503        pin    = GPIO_ReadInputDataBit(GPIOE, BSP_GPIOE_JOY_LEFT);
000108  2101              MOVS     r1,#1
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       GPIO_ReadInputDataBit
;;;504        if (pin == 0) {
000110  b908              CBNZ     r0,|L1.278|
;;;505            status |= BSP_JOYSTICK_RIGHT;
000112  f0440408          ORR      r4,r4,#8
                  |L1.278|
;;;506        }
;;;507    
;;;508        pin    = GPIO_ReadInputDataBit(GPIOD, BSP_GPIOD_JOY_UP);
000116  4d71              LDR      r5,|L1.732|
000118  f44f7180          MOV      r1,#0x100
00011c  4628              MOV      r0,r5
00011e  f7fffffe          BL       GPIO_ReadInputDataBit
;;;509        if (pin == 0) {
000122  b908              CBNZ     r0,|L1.296|
;;;510            status |= BSP_JOYSTICK_UP;
000124  f0440401          ORR      r4,r4,#1
                  |L1.296|
;;;511        }
;;;512    
;;;513        pin    = GPIO_ReadInputDataBit(GPIOD, BSP_GPIOD_JOY_DOWN);
000128  f44f4180          MOV      r1,#0x4000
00012c  4628              MOV      r0,r5
00012e  f7fffffe          BL       GPIO_ReadInputDataBit
;;;514        if (pin == 0) {
000132  b908              CBNZ     r0,|L1.312|
;;;515            status |= BSP_JOYSTICK_DOWN;
000134  f0440402          ORR      r4,r4,#2
                  |L1.312|
;;;516        }
;;;517    
;;;518        pin    = GPIO_ReadInputDataBit(GPIOD, BSP_GPIOD_JOY_SEL);
000138  f44f5180          MOV      r1,#0x1000
00013c  4628              MOV      r0,r5
00013e  f7fffffe          BL       GPIO_ReadInputDataBit
;;;519        if (pin == 0) {
000142  b908              CBNZ     r0,|L1.328|
;;;520            status |= BSP_JOYSTICK_CENTER;
000144  f0440410          ORR      r4,r4,#0x10
                  |L1.328|
;;;521        }
;;;522    
;;;523        return (status);
000148  4620              MOV      r0,r4
;;;524    }
00014a  bd70              POP      {r4-r6,pc}
;;;525    
                          ENDP

                  BSP_LED_On PROC
;;;584    
;;;585    void  BSP_LED_On (CPU_INT08U led)
00014c  4601              MOV      r1,r0
;;;586    {
;;;587        switch (led) {
;;;588            case 0:
;;;589                 GPIO_SetBits(GPIOB, BSP_GPIOC_LED1 | BSP_GPIOC_LED2 | BSP_GPIOC_LED3 | BSP_GPIOC_LED4);
00014e  485e              LDR      r0,|L1.712|
000150  2905              CMP      r1,#5                 ;587
000152  d216              BCS      |L1.386|
000154  e8dff001          TBB      [pc,r1]               ;587
000158  03070a0d          DCB      0x03,0x07,0x0a,0x0d
00015c  1100              DCB      0x11,0x00
00015e  f44f7170          MOV      r1,#0x3c0
000162  f7ffbffe          B.W      GPIO_SetBits
;;;590                 break;
;;;591    
;;;592            case 1:
;;;593                 GPIO_SetBits(GPIOB, BSP_GPIOC_LED1);
000166  2140              MOVS     r1,#0x40
000168  f7ffbffe          B.W      GPIO_SetBits
;;;594                 break;
;;;595    
;;;596            case 2:
;;;597                 GPIO_SetBits(GPIOB, BSP_GPIOC_LED2);
00016c  2180              MOVS     r1,#0x80
00016e  f7ffbffe          B.W      GPIO_SetBits
;;;598                 break;
;;;599    
;;;600            case 3:
;;;601                 GPIO_SetBits(GPIOB, BSP_GPIOC_LED3);
000172  f44f7180          MOV      r1,#0x100
000176  f7ffbffe          B.W      GPIO_SetBits
;;;602                 break;
;;;603    
;;;604            case 4:
;;;605                 GPIO_SetBits(GPIOB, BSP_GPIOC_LED4);
00017a  f44f7100          MOV      r1,#0x200
00017e  f7ffbffe          B.W      GPIO_SetBits
                  |L1.386|
;;;606                 break;
;;;607    
;;;608            default:
;;;609                 break;
;;;610        }
;;;611    }
000182  4770              BX       lr
;;;612    
                          ENDP

                  BSP_LED_Off PROC
;;;634    
;;;635    void  BSP_LED_Off (CPU_INT08U led)
000184  4601              MOV      r1,r0
;;;636    {
;;;637        switch (led) {
;;;638            case 0:
;;;639                 GPIO_ResetBits(GPIOB, BSP_GPIOC_LED1 | BSP_GPIOC_LED2 | BSP_GPIOC_LED3 | BSP_GPIOC_LED4);
000186  4850              LDR      r0,|L1.712|
000188  2905              CMP      r1,#5                 ;637
00018a  d216              BCS      |L1.442|
00018c  e8dff001          TBB      [pc,r1]               ;637
000190  03070a0d          DCB      0x03,0x07,0x0a,0x0d
000194  1100              DCB      0x11,0x00
000196  f44f7170          MOV      r1,#0x3c0
00019a  f7ffbffe          B.W      GPIO_ResetBits
;;;640                 break;
;;;641    
;;;642            case 1:
;;;643                 GPIO_ResetBits(GPIOB, BSP_GPIOC_LED1);
00019e  2140              MOVS     r1,#0x40
0001a0  f7ffbffe          B.W      GPIO_ResetBits
;;;644                 break;
;;;645    
;;;646            case 2:
;;;647                 GPIO_ResetBits(GPIOB, BSP_GPIOC_LED2);
0001a4  2180              MOVS     r1,#0x80
0001a6  f7ffbffe          B.W      GPIO_ResetBits
;;;648                 break;
;;;649    
;;;650            case 3:
;;;651                 GPIO_ResetBits(GPIOB, BSP_GPIOC_LED3);
0001aa  f44f7180          MOV      r1,#0x100
0001ae  f7ffbffe          B.W      GPIO_ResetBits
;;;652                 break;
;;;653    
;;;654            case 4:
;;;655                 GPIO_ResetBits(GPIOB, BSP_GPIOC_LED4);
0001b2  f44f7100          MOV      r1,#0x200
0001b6  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.442|
;;;656                 break;
;;;657    
;;;658            default:
;;;659                 break;
;;;660        }
;;;661    }
0001ba  4770              BX       lr
;;;662    
                          ENDP

                  BSP_LED_Toggle PROC
;;;684    
;;;685    void  BSP_LED_Toggle (CPU_INT08U led)
0001bc  b570              PUSH     {r4-r6,lr}
;;;686    {
0001be  4604              MOV      r4,r0
;;;687        CPU_INT32U  pins;
;;;688    
;;;689    
;;;690        pins = GPIO_ReadOutputData(GPIOC);
0001c0  4d44              LDR      r5,|L1.724|
0001c2  4628              MOV      r0,r5
0001c4  f7fffffe          BL       GPIO_ReadOutputData
;;;691    
;;;692        switch (led) {
0001c8  2c05              CMP      r4,#5
0001ca  d251              BCS      |L1.624|
0001cc  e8dff004          TBB      [pc,r4]
0001d0  03101f2e          DCB      0x03,0x10,0x1f,0x2e
0001d4  3f00              DCB      0x3f,0x00
;;;693            case 0:
;;;694                 BSP_LED_Toggle(1);
0001d6  2001              MOVS     r0,#1
0001d8  f7fffffe          BL       BSP_LED_Toggle
;;;695                 BSP_LED_Toggle(2);
0001dc  2002              MOVS     r0,#2
0001de  f7fffffe          BL       BSP_LED_Toggle
;;;696                 BSP_LED_Toggle(3);
0001e2  2003              MOVS     r0,#3
0001e4  f7fffffe          BL       BSP_LED_Toggle
;;;697                 BSP_LED_Toggle(4);
0001e8  e8bd4070          POP      {r4-r6,lr}
0001ec  2004              MOVS     r0,#4
0001ee  e7fe              B        BSP_LED_Toggle
;;;698                 break;
;;;699    
;;;700            case 1:
;;;701                 if ((pins & BSP_GPIOC_LED1) == 0) {
0001f0  f0100f40          TST      r0,#0x40
0001f4  d005              BEQ      |L1.514|
;;;702                     GPIO_SetBits(  GPIOC, BSP_GPIOC_LED1);
;;;703                 } else {
;;;704                     GPIO_ResetBits(GPIOC, BSP_GPIOC_LED1);
0001f6  4628              MOV      r0,r5
0001f8  e8bd4070          POP      {r4-r6,lr}
0001fc  2140              MOVS     r1,#0x40
0001fe  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.514|
000202  4628              MOV      r0,r5                 ;702
000204  e8bd4070          POP      {r4-r6,lr}            ;702
000208  2140              MOVS     r1,#0x40              ;702
00020a  f7ffbffe          B.W      GPIO_SetBits
;;;705                 }
;;;706                break;
;;;707    
;;;708            case 2:
;;;709                 if ((pins & BSP_GPIOC_LED2) == 0) {
00020e  f0100f80          TST      r0,#0x80
000212  d005              BEQ      |L1.544|
;;;710                     GPIO_SetBits(  GPIOC, BSP_GPIOC_LED2);
;;;711                 } else {
;;;712                     GPIO_ResetBits(GPIOC, BSP_GPIOC_LED2);
000214  4628              MOV      r0,r5
000216  e8bd4070          POP      {r4-r6,lr}
00021a  2180              MOVS     r1,#0x80
00021c  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.544|
000220  4628              MOV      r0,r5                 ;710
000222  e8bd4070          POP      {r4-r6,lr}            ;710
000226  2180              MOVS     r1,#0x80              ;710
000228  f7ffbffe          B.W      GPIO_SetBits
;;;713                 }
;;;714                break;
;;;715    
;;;716            case 3:
;;;717                 if ((pins & BSP_GPIOC_LED3) == 0) {
00022c  f4107f80          TST      r0,#0x100
000230  d006              BEQ      |L1.576|
;;;718                     GPIO_SetBits(  GPIOC, BSP_GPIOC_LED3);
;;;719                 } else {
;;;720                     GPIO_ResetBits(GPIOC, BSP_GPIOC_LED3);
000232  4628              MOV      r0,r5
000234  e8bd4070          POP      {r4-r6,lr}
000238  f44f7180          MOV      r1,#0x100
00023c  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.576|
000240  4628              MOV      r0,r5                 ;718
000242  e8bd4070          POP      {r4-r6,lr}            ;718
000246  f44f7180          MOV      r1,#0x100             ;718
00024a  f7ffbffe          B.W      GPIO_SetBits
;;;721                 }
;;;722                break;
;;;723    
;;;724            case 4:
;;;725                 if ((pins & BSP_GPIOC_LED4) == 0) {
00024e  f4107f00          TST      r0,#0x200
000252  d006              BEQ      |L1.610|
;;;726                     GPIO_SetBits(  GPIOC, BSP_GPIOC_LED4);
;;;727                 } else {
;;;728                     GPIO_ResetBits(GPIOC, BSP_GPIOC_LED4);
000254  4628              MOV      r0,r5
000256  e8bd4070          POP      {r4-r6,lr}
00025a  f44f7100          MOV      r1,#0x200
00025e  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.610|
000262  4628              MOV      r0,r5                 ;726
000264  e8bd4070          POP      {r4-r6,lr}            ;726
000268  f44f7100          MOV      r1,#0x200             ;726
00026c  f7ffbffe          B.W      GPIO_SetBits
                  |L1.624|
;;;729                 }
;;;730                break;
;;;731    
;;;732            default:
;;;733                 break;
;;;734        }
;;;735    }
000270  bd70              POP      {r4-r6,pc}
;;;736    /*
                          ENDP

                  OSProbe_TmrInit PROC
;;;761         (OS_PROBE_HOOKS_EN == 1))
;;;762    void  OSProbe_TmrInit (void)
000272  b500              PUSH     {lr}
;;;763    {
000274  b083              SUB      sp,sp,#0xc
;;;764        TIM_TimeBaseInitTypeDef  tim_init;
;;;765    
;;;766    
;;;767        tim_init.TIM_Period        = 0xFFFF;
000276  f64f70ff          MOV      r0,#0xffff
00027a  f8ad0004          STRH     r0,[sp,#4]
;;;768        tim_init.TIM_Prescaler     = 0x00;
00027e  2000              MOVS     r0,#0
000280  f8ad0000          STRH     r0,[sp,#0]
;;;769        tim_init.TIM_ClockDivision = 0x0;
000284  f8ad0006          STRH     r0,[sp,#6]
;;;770        tim_init.TIM_CounterMode   = TIM_CounterMode_Up;
000288  f8ad0002          STRH     r0,[sp,#2]
;;;771    
;;;772    #if (OS_PROBE_TIMER_SEL == 2)
;;;773        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
00028c  2101              MOVS     r1,#1
00028e  4608              MOV      r0,r1
000290  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;774    
;;;775        TIM_TimeBaseInit(TIM2, &tim_init);
000294  4669              MOV      r1,sp
000296  f04f4080          MOV      r0,#0x40000000
00029a  f7fffffe          BL       TIM_TimeBaseInit
;;;776        TIM_SetCounter(TIM2, 0);
00029e  2100              MOVS     r1,#0
0002a0  f04f4080          MOV      r0,#0x40000000
0002a4  f7fffffe          BL       TIM_SetCounter
;;;777        TIM_PrescalerConfig(TIM2, 256, TIM_PSCReloadMode_Immediate);
0002a8  2201              MOVS     r2,#1
0002aa  0211              LSLS     r1,r2,#8
0002ac  0588              LSLS     r0,r1,#22
0002ae  f7fffffe          BL       TIM_PrescalerConfig
;;;778        TIM_Cmd(TIM2, ENABLE);
0002b2  2101              MOVS     r1,#1
0002b4  0788              LSLS     r0,r1,#30
0002b6  f7fffffe          BL       TIM_Cmd
;;;779    #elif (OS_PROBE_TIMER_SEL == 3)
;;;780        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;781    
;;;782        TIM_TimeBaseInit(TIM3, &tim_init);
;;;783        TIM_SetCounter(TIM3, 0);
;;;784        TIM_PrescalerConfig(TIM3, 256, TIM_PSCReloadMode_Immediate);
;;;785        TIM_Cmd(TIM3, ENABLE);
;;;786    #elif (OS_PROBE_TIMER_SEL == 4)
;;;787        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;788    
;;;789        TIM_TimeBaseInit(TIM4, &tim_init);
;;;790        TIM_SetCounter(TIM4, 0);
;;;791        TIM_PrescalerConfig(TIM4, 256, TIM_PSCReloadMode_Immediate);
;;;792        TIM_Cmd(TIM4, ENABLE);
;;;793    #endif
;;;794    }
0002ba  b003              ADD      sp,sp,#0xc
0002bc  bd00              POP      {pc}
;;;795    #endif
                          ENDP

                  OSProbe_TmrRd PROC
;;;814         (OS_PROBE_HOOKS_EN == 1))
;;;815    CPU_INT32U  OSProbe_TmrRd (void)
0002be  f04f4080          MOV      r0,#0x40000000
;;;816    {
;;;817    #if (OS_PROBE_TIMER_SEL == 2)
;;;818    
;;;819        return ((CPU_INT32U)TIM_GetCounter(TIM2));
0002c2  f7ffbffe          B.W      TIM_GetCounter
;;;820    
;;;821    #elif (OS_PROBE_TIMER_SEL == 3)
;;;822    
;;;823        return ((CPU_INT32U)TIM_GetCounter(TIM3));
;;;824    
;;;825    #elif (OS_PROBE_TIMER_SEL == 4)
;;;826    
;;;827        return ((CPU_INT32U)TIM_GetCounter(TIM4));
;;;828    
;;;829    #endif
;;;830    }
;;;831    #endif
                          ENDP

0002c6  0000              DCW      0x0000
                  |L1.712|
                          DCD      0x40010c00
                  |L1.716|
                          DCD      0x40012400
                  |L1.720|
                          DCD      0x40010800
                  |L1.724|
                          DCD      0x40011000
                  |L1.728|
                          DCD      0x40011800
                  |L1.732|
                          DCD      0x40011400
