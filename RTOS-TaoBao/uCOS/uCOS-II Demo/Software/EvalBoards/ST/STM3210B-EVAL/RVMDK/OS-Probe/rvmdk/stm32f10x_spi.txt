; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\rvmdk\stm32f10x_spi.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O1 -Otime --diag_suppress=9931 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -I..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32 -I..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source -I.\RTE\_Flash -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"C:\Program Files\0Software\Keil_v5\ARM\CMSIS\Include" -I"C:\Program Files\0Software\Keil_v5\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0" -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_MD --omf_browse=.\rvmdk\stm32f10x_spi.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;63     *******************************************************************************/
;;;64     void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66       /* Check the parameters */
;;;67       assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;68       
;;;69       switch (*(u32*)&SPIx)
000002  f1a04080          SUB      r0,r0,#0x40000000
000006  f5b05060          SUBS     r0,r0,#0x3800
00000a  d010              BEQ      |L1.46|
00000c  f5b06f80          CMP      r0,#0x400
000010  d018              BEQ      |L1.68|
000012  f5b04f78          CMP      r0,#0xf800
000016  d120              BNE      |L1.90|
;;;70       {
;;;71         case SPI1_BASE:
;;;72           /* Enable SPI1 reset state */
;;;73           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0308              LSLS     r0,r1,#12
00001c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;74           /* Release SPI1 from reset state */
;;;75           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000020  e8bd4010          POP      {r4,lr}
000024  2100              MOVS     r1,#0
000026  f44f5080          MOV      r0,#0x1000
00002a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.46|
;;;76           break;
;;;77     
;;;78         case SPI2_BASE:
;;;79           /* Enable SPI2 reset state */
;;;80           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
00002e  2101              MOVS     r1,#1
000030  0388              LSLS     r0,r1,#14
000032  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;81           /* Release SPI2 from reset state */
;;;82           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000036  e8bd4010          POP      {r4,lr}
00003a  2100              MOVS     r1,#0
00003c  f44f4080          MOV      r0,#0x4000
000040  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.68|
;;;83           break;
;;;84     
;;;85         case SPI3_BASE:
;;;86           /* Enable SPI3 reset state */
;;;87           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000044  2101              MOVS     r1,#1
000046  03c8              LSLS     r0,r1,#15
000048  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;88           /* Release SPI3 from reset state */
;;;89           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00004c  e8bd4010          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f44f4000          MOV      r0,#0x8000
000056  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.90|
;;;90           break;
;;;91     
;;;92         default:
;;;93           break;
;;;94       }
;;;95     }
00005a  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  SPI_Init PROC
;;;107    ******************************************************************************/
;;;108    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
00005c  b410              PUSH     {r4}
;;;109    {
;;;110      u16 tmpreg = 0;
;;;111      
;;;112      /* check the parameters */
;;;113      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;114      
;;;115      /* Check the SPI parameters */
;;;116      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;117      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;118      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;119      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;120      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;121      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;122      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;123      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;124      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;125    
;;;126    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;127      /* Get the SPIx CR1 value */
;;;128      tmpreg = SPIx->CR1;
00005e  8802              LDRH     r2,[r0,#0]
;;;129      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;130      tmpreg &= CR1_CLEAR_Mask;
000060  f4025241          AND      r2,r2,#0x3040
;;;131      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;132         master/salve mode, CPOL and CPHA */
;;;133      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;134      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;135      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;136      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;137      /* Set CPOL bit according to SPI_CPOL value */
;;;138      /* Set CPHA bit according to SPI_CPHA value */
;;;139      tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000064  880b              LDRH     r3,[r1,#0]
000066  f8b1c002          LDRH     r12,[r1,#2]
00006a  88cc              LDRH     r4,[r1,#6]
00006c  ea43030c          ORR      r3,r3,r12
000070  f8b1c004          LDRH     r12,[r1,#4]
000074  ea4c0c04          ORR      r12,r12,r4
000078  ea43030c          ORR      r3,r3,r12
00007c  f8b1c008          LDRH     r12,[r1,#8]
000080  ea43030c          ORR      r3,r3,r12
000084  f8b1c00a          LDRH     r12,[r1,#0xa]
000088  ea43030c          ORR      r3,r3,r12
00008c  f8b1c00c          LDRH     r12,[r1,#0xc]
000090  ea43030c          ORR      r3,r3,r12
000094  f8b1c00e          LDRH     r12,[r1,#0xe]
000098  ea43030c          ORR      r3,r3,r12
00009c  431a              ORRS     r2,r2,r3
;;;140                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;141                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;142                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;143      /* Write to SPIx CR1 */
;;;144      SPIx->CR1 = tmpreg;
00009e  8002              STRH     r2,[r0,#0]
;;;145      
;;;146      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;147      SPIx->I2SCFGR &= SPI_Mode_Select;		
0000a0  8b82              LDRH     r2,[r0,#0x1c]
0000a2  f4226200          BIC      r2,r2,#0x800
0000a6  8382              STRH     r2,[r0,#0x1c]
;;;148    
;;;149    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;150      /* Write to SPIx CRCPOLY */
;;;151      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
0000a8  8a09              LDRH     r1,[r1,#0x10]
0000aa  8201              STRH     r1,[r0,#0x10]
;;;152    }
0000ac  bc10              POP      {r4}
0000ae  4770              BX       lr
;;;153    
                          ENDP

                  I2S_Init PROC
;;;165    ******************************************************************************/
;;;166    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
0000b0  b5f0              PUSH     {r4-r7,lr}
;;;167    {
0000b2  b085              SUB      sp,sp,#0x14
0000b4  4605              MOV      r5,r0
0000b6  460c              MOV      r4,r1
;;;168      u16 tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
0000b8  2002              MOVS     r0,#2
0000ba  2100              MOVS     r1,#0
0000bc  2601              MOVS     r6,#1
;;;169      u32 tmp = 0;
;;;170      RCC_ClocksTypeDef RCC_Clocks;
;;;171       
;;;172      /* Check the I2S parameters */
;;;173      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;174      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;175      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;176      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;177      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;178      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;179      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;180    
;;;181    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;182    
;;;183      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;184      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
0000be  8baa              LDRH     r2,[r5,#0x1c]
0000c0  f02202bf          BIC      r2,r2,#0xbf
0000c4  f4226270          BIC      r2,r2,#0xf00
0000c8  83aa              STRH     r2,[r5,#0x1c]
;;;185      SPIx->I2SPR = 0x0002;
0000ca  2202              MOVS     r2,#2
0000cc  842a              STRH     r2,[r5,#0x20]
;;;186      
;;;187      /* Get the I2SCFGR register value */
;;;188      tmpreg = SPIx->I2SCFGR;
0000ce  8baf              LDRH     r7,[r5,#0x1c]
;;;189      
;;;190      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;191      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
0000d0  8922              LDRH     r2,[r4,#8]
0000d2  2a02              CMP      r2,#2
0000d4  d021              BEQ      |L1.282|
;;;192      {
;;;193        i2sodd = (u16)0;
;;;194        i2sdiv = (u16)2;   
;;;195      }
;;;196      /* If the requested audio frequency is not the default, compute the prescaler */
;;;197      else
;;;198      {
;;;199        /* Check the frame length (For the Prescaler computing) */
;;;200        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
0000d6  88a0              LDRH     r0,[r4,#4]
0000d8  b100              CBZ      r0,|L1.220|
;;;201        {
;;;202          /* Packet length is 16 bits */
;;;203          packetlength = 1;
;;;204        }
;;;205        else
;;;206        {
;;;207          /* Packet length is 32 bits */
;;;208          packetlength = 2;
0000da  2602              MOVS     r6,#2
                  |L1.220|
;;;209        }
;;;210        /* Get System Clock frequency */
;;;211        RCC_GetClocksFreq(&RCC_Clocks);
0000dc  4668              MOV      r0,sp
0000de  f7fffffe          BL       RCC_GetClocksFreq
;;;212        
;;;213        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;214        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
0000e2  88e0              LDRH     r0,[r4,#6]
0000e4  f5b07f00          CMP      r0,#0x200
0000e8  d02d              BEQ      |L1.326|
;;;215        {
;;;216          /* MCLK output is enabled */
;;;217          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;218        }
;;;219        else
;;;220        {
;;;221          /* MCLK output is disabled */
;;;222          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
0000ea  8921              LDRH     r1,[r4,#8]
0000ec  0170              LSLS     r0,r6,#5
0000ee  4341              MULS     r1,r0,r1
0000f0  9800              LDR      r0,[sp,#0]
0000f2  eb000080          ADD      r0,r0,r0,LSL #2
0000f6  0040              LSLS     r0,r0,#1
0000f8  fbb0f0f1          UDIV     r0,r0,r1
0000fc  1d40              ADDS     r0,r0,#5
0000fe  b280              UXTH     r0,r0
                  |L1.256|
;;;223        }
;;;224        
;;;225        /* Remove the flaoting point */
;;;226        tmp = tmp/10;  
000100  4983              LDR      r1,|L1.784|
000102  fba11000          UMULL    r1,r0,r1,r0
000106  08c0              LSRS     r0,r0,#3
;;;227          
;;;228        /* Check the parity of the divider */
;;;229        i2sodd = (u16)(tmp & (u16)0x0001);
000108  f0000101          AND      r1,r0,#1
;;;230       
;;;231        /* Compute the i2sdiv prescaler */
;;;232        i2sdiv = (u16)((tmp - i2sodd) / 2);
00010c  1a40              SUBS     r0,r0,r1
00010e  f3c0004f          UBFX     r0,r0,#1,#16
;;;233       
;;;234        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;235        i2sodd = (u16) (i2sodd << 8);
000112  f64f72ff          MOV      r2,#0xffff
000116  ea022101          AND      r1,r2,r1,LSL #8
                  |L1.282|
;;;236      }
;;;237      
;;;238      /* Test if the divider is 1 or 0 */
;;;239      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
00011a  1e82              SUBS     r2,r0,#2
00011c  2afe              CMP      r2,#0xfe
00011e  d301              BCC      |L1.292|
;;;240      {
;;;241        /* Set the default values */
;;;242        i2sdiv = 2;
000120  2002              MOVS     r0,#2
;;;243        i2sodd = 0;
000122  2100              MOVS     r1,#0
                  |L1.292|
;;;244      }
;;;245    
;;;246      /* Write to SPIx I2SPR register the computed value */
;;;247      SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
000124  88e2              LDRH     r2,[r4,#6]
000126  4308              ORRS     r0,r0,r1
000128  4310              ORRS     r0,r0,r2
00012a  8428              STRH     r0,[r5,#0x20]
;;;248     
;;;249      /* Configure the I2S with the SPI_InitStruct values */
;;;250      tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
00012c  8820              LDRH     r0,[r4,#0]
00012e  8861              LDRH     r1,[r4,#2]
000130  8962              LDRH     r2,[r4,#0xa]
000132  4308              ORRS     r0,r0,r1
000134  88a1              LDRH     r1,[r4,#4]
000136  4311              ORRS     r1,r1,r2
000138  4308              ORRS     r0,r0,r1
00013a  4338              ORRS     r0,r0,r7
00013c  f4406000          ORR      r0,r0,#0x800
;;;251                      I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
;;;252                      I2S_InitStruct->I2S_CPOL);
;;;253     
;;;254      /* Write to SPIx I2SCFGR */  
;;;255      SPIx->I2SCFGR = tmpreg;                                    
000140  83a8              STRH     r0,[r5,#0x1c]
;;;256    }
000142  b005              ADD      sp,sp,#0x14
000144  bdf0              POP      {r4-r7,pc}
                  |L1.326|
000146  9800              LDR      r0,[sp,#0]            ;217
000148  8921              LDRH     r1,[r4,#8]            ;217
00014a  eb000080          ADD      r0,r0,r0,LSL #2       ;217
00014e  0040              LSLS     r0,r0,#1              ;217
000150  0209              LSLS     r1,r1,#8              ;217
000152  fbb0f0f1          UDIV     r0,r0,r1              ;217
000156  1d40              ADDS     r0,r0,#5              ;217
000158  b280              UXTH     r0,r0                 ;217
00015a  e7d1              B        |L1.256|
;;;257    
                          ENDP

                  SPI_StructInit PROC
;;;265    *******************************************************************************/
;;;266    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
00015c  2100              MOVS     r1,#0
;;;267    {
;;;268    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;269      /* Initialize the SPI_Direction member */
;;;270      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00015e  8001              STRH     r1,[r0,#0]
;;;271    
;;;272      /* initialize the SPI_Mode member */
;;;273      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000160  8041              STRH     r1,[r0,#2]
;;;274    
;;;275      /* initialize the SPI_DataSize member */
;;;276      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000162  8081              STRH     r1,[r0,#4]
;;;277    
;;;278      /* Initialize the SPI_CPOL member */
;;;279      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000164  80c1              STRH     r1,[r0,#6]
;;;280    
;;;281      /* Initialize the SPI_CPHA member */
;;;282      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
000166  8101              STRH     r1,[r0,#8]
;;;283    
;;;284      /* Initialize the SPI_NSS member */
;;;285      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
000168  8141              STRH     r1,[r0,#0xa]
;;;286    
;;;287      /* Initialize the SPI_BaudRatePrescaler member */
;;;288      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00016a  8181              STRH     r1,[r0,#0xc]
;;;289    
;;;290      /* Initialize the SPI_FirstBit member */
;;;291      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
00016c  81c1              STRH     r1,[r0,#0xe]
;;;292    
;;;293      /* Initialize the SPI_CRCPolynomial member */
;;;294      SPI_InitStruct->SPI_CRCPolynomial = 7;
00016e  2107              MOVS     r1,#7
000170  8201              STRH     r1,[r0,#0x10]
;;;295    }
000172  4770              BX       lr
;;;296    
                          ENDP

                  I2S_StructInit PROC
;;;304    *******************************************************************************/
;;;305    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000174  2100              MOVS     r1,#0
;;;306    {
;;;307    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;308      /* Initialize the I2S_Mode member */
;;;309      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000176  8001              STRH     r1,[r0,#0]
;;;310      
;;;311      /* Initialize the I2S_Standard member */
;;;312      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000178  8041              STRH     r1,[r0,#2]
;;;313      
;;;314      /* Initialize the I2S_DataFormat member */
;;;315      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
00017a  8081              STRH     r1,[r0,#4]
;;;316      
;;;317      /* Initialize the I2S_MCLKOutput member */
;;;318      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
00017c  80c1              STRH     r1,[r0,#6]
;;;319      
;;;320      /* Initialize the I2S_AudioFreq member */
;;;321      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00017e  2202              MOVS     r2,#2
000180  8102              STRH     r2,[r0,#8]
;;;322      
;;;323      /* Initialize the I2S_CPOL member */
;;;324      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
000182  8141              STRH     r1,[r0,#0xa]
;;;325    }
000184  4770              BX       lr
;;;326    
                          ENDP

                  SPI_Cmd PROC
;;;335    *******************************************************************************/
;;;336    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000186  2900              CMP      r1,#0
;;;337    {
000188  d004              BEQ      |L1.404|
;;;338      /* Check the parameters */
;;;339      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;340      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;341    
;;;342      if (NewState != DISABLE)
;;;343      {
;;;344        /* Enable the selected SPI peripheral */
;;;345        SPIx->CR1 |= CR1_SPE_Set;
00018a  8801              LDRH     r1,[r0,#0]
00018c  f0410140          ORR      r1,r1,#0x40
000190  8001              STRH     r1,[r0,#0]
;;;346      }
;;;347      else
;;;348      {
;;;349        /* Disable the selected SPI peripheral */
;;;350        SPIx->CR1 &= CR1_SPE_Reset;
;;;351      }
;;;352    }
000192  4770              BX       lr
                  |L1.404|
000194  8801              LDRH     r1,[r0,#0]            ;350
000196  f0210140          BIC      r1,r1,#0x40           ;350
00019a  8001              STRH     r1,[r0,#0]            ;350
00019c  4770              BX       lr
;;;353    
                          ENDP

                  I2S_Cmd PROC
;;;362    *******************************************************************************/
;;;363    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
00019e  2900              CMP      r1,#0
;;;364    {
0001a0  d004              BEQ      |L1.428|
;;;365      /* Check the parameters */
;;;366      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;367      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;368    
;;;369      if (NewState != DISABLE)
;;;370      {
;;;371        /* Enable the selected SPI peripheral (in I2S mode) */
;;;372        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
0001a2  8b81              LDRH     r1,[r0,#0x1c]
0001a4  f4416180          ORR      r1,r1,#0x400
0001a8  8381              STRH     r1,[r0,#0x1c]
;;;373      }
;;;374      else
;;;375      {
;;;376        /* Disable the selected SPI peripheral (in I2S mode) */
;;;377        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
;;;378      }
;;;379    }
0001aa  4770              BX       lr
                  |L1.428|
0001ac  8b81              LDRH     r1,[r0,#0x1c]         ;377
0001ae  f4216180          BIC      r1,r1,#0x400          ;377
0001b2  8381              STRH     r1,[r0,#0x1c]         ;377
0001b4  4770              BX       lr
;;;380    
                          ENDP

                  SPI_I2S_ITConfig PROC
;;;397    *******************************************************************************/
;;;398    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, u8 SPI_I2S_IT, FunctionalState NewState)
0001b6  0909              LSRS     r1,r1,#4
;;;399    {
;;;400      u16 itpos = 0, itmask = 0 ;
;;;401    
;;;402      /* Check the parameters */
;;;403      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;404      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;405      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;406    
;;;407      /* Get the SPI/I2S IT index */
;;;408      itpos = SPI_I2S_IT >> 4;
;;;409      /* Set the IT mask */
;;;410      itmask = (u16)((u16)1 << itpos);
0001b8  2301              MOVS     r3,#1
0001ba  fa03f101          LSL      r1,r3,r1
0001be  b289              UXTH     r1,r1
;;;411    
;;;412      if (NewState != DISABLE)
0001c0  2a00              CMP      r2,#0
0001c2  d003              BEQ      |L1.460|
;;;413      {
;;;414        /* Enable the selected SPI/I2S interrupt */
;;;415        SPIx->CR2 |= itmask;
0001c4  8882              LDRH     r2,[r0,#4]
0001c6  4311              ORRS     r1,r1,r2
0001c8  8081              STRH     r1,[r0,#4]
;;;416      }
;;;417      else
;;;418      {
;;;419        /* Disable the selected SPI/I2S interrupt */
;;;420        SPIx->CR2 &= (u16)~itmask;
;;;421      }
;;;422    }
0001ca  4770              BX       lr
                  |L1.460|
0001cc  8882              LDRH     r2,[r0,#4]            ;420
0001ce  ea220101          BIC      r1,r2,r1              ;420
0001d2  8081              STRH     r1,[r0,#4]            ;420
0001d4  4770              BX       lr
;;;423    
                          ENDP

                  SPI_I2S_DMACmd PROC
;;;440    *******************************************************************************/
;;;441    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, u16 SPI_I2S_DMAReq, FunctionalState NewState)
0001d6  2a00              CMP      r2,#0
;;;442    {
0001d8  d003              BEQ      |L1.482|
;;;443      /* Check the parameters */
;;;444      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;445      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;446      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;447    
;;;448      if (NewState != DISABLE)
;;;449      {
;;;450        /* Enable the selected SPI/I2S DMA requests */
;;;451        SPIx->CR2 |= SPI_I2S_DMAReq;
0001da  8882              LDRH     r2,[r0,#4]
0001dc  4311              ORRS     r1,r1,r2
0001de  8081              STRH     r1,[r0,#4]
;;;452      }
;;;453      else
;;;454      {
;;;455        /* Disable the selected SPI/I2S DMA requests */
;;;456        SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
;;;457      }
;;;458    }
0001e0  4770              BX       lr
                  |L1.482|
0001e2  8882              LDRH     r2,[r0,#4]            ;456
0001e4  ea220101          BIC      r1,r2,r1              ;456
0001e8  8081              STRH     r1,[r0,#4]            ;456
0001ea  4770              BX       lr
;;;459    
                          ENDP

                  SPI_I2S_SendData PROC
;;;469    *******************************************************************************/
;;;470    void SPI_I2S_SendData(SPI_TypeDef* SPIx, u16 Data)
0001ec  8181              STRH     r1,[r0,#0xc]
;;;471    {
;;;472      /* Check the parameters */
;;;473      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;474      
;;;475      /* Write in the DR register the data to be sent */
;;;476      SPIx->DR = Data;
;;;477    }
0001ee  4770              BX       lr
;;;478    
                          ENDP

                  SPI_I2S_ReceiveData PROC
;;;487    *******************************************************************************/
;;;488    u16 SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
0001f0  8980              LDRH     r0,[r0,#0xc]
;;;489    {
;;;490      /* Check the parameters */
;;;491      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;492      
;;;493      /* Return the data in the DR register */
;;;494      return SPIx->DR;
;;;495    }
0001f2  4770              BX       lr
;;;496    
                          ENDP

                  SPI_NSSInternalSoftwareConfig PROC
;;;508    *******************************************************************************/
;;;509    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, u16 SPI_NSSInternalSoft)
0001f4  f5a1427e          SUB      r2,r1,#0xfe00
;;;510    {
;;;511      /* Check the parameters */
;;;512      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;513      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;514    
;;;515      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
0001f8  3aff              SUBS     r2,r2,#0xff
0001fa  d004              BEQ      |L1.518|
;;;516      {
;;;517        /* Set NSS pin internally by software */
;;;518        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
0001fc  8801              LDRH     r1,[r0,#0]
0001fe  f4417180          ORR      r1,r1,#0x100
000202  8001              STRH     r1,[r0,#0]
;;;519      }
;;;520      else
;;;521      {
;;;522        /* Reset NSS pin internally by software */
;;;523        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
;;;524      }
;;;525    }
000204  4770              BX       lr
                  |L1.518|
000206  8801              LDRH     r1,[r0,#0]            ;523
000208  f4217180          BIC      r1,r1,#0x100          ;523
00020c  8001              STRH     r1,[r0,#0]            ;523
00020e  4770              BX       lr
;;;526    
                          ENDP

                  SPI_SSOutputCmd PROC
;;;535    *******************************************************************************/
;;;536    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000210  2900              CMP      r1,#0
;;;537    {
000212  d004              BEQ      |L1.542|
;;;538      /* Check the parameters */
;;;539      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;541    
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the selected SPI SS output */
;;;545        SPIx->CR2 |= CR2_SSOE_Set;
000214  8881              LDRH     r1,[r0,#4]
000216  f0410104          ORR      r1,r1,#4
00021a  8081              STRH     r1,[r0,#4]
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected SPI SS output */
;;;550        SPIx->CR2 &= CR2_SSOE_Reset;
;;;551      }
;;;552    }
00021c  4770              BX       lr
                  |L1.542|
00021e  8881              LDRH     r1,[r0,#4]            ;550
000220  f0210104          BIC      r1,r1,#4              ;550
000224  8081              STRH     r1,[r0,#4]            ;550
000226  4770              BX       lr
;;;553    
                          ENDP

                  SPI_DataSizeConfig PROC
;;;564    *******************************************************************************/
;;;565    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, u16 SPI_DataSize)
000228  8802              LDRH     r2,[r0,#0]
;;;566    {
;;;567      /* Check the parameters */
;;;568      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;569      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;570    
;;;571      /* Clear DFF bit */
;;;572      SPIx->CR1 &= (u16)~SPI_DataSize_16b;
00022a  f4226200          BIC      r2,r2,#0x800
00022e  8002              STRH     r2,[r0,#0]
;;;573      /* Set new DFF bit value */
;;;574      SPIx->CR1 |= SPI_DataSize;
000230  8802              LDRH     r2,[r0,#0]
000232  4311              ORRS     r1,r1,r2
000234  8001              STRH     r1,[r0,#0]
;;;575    }
000236  4770              BX       lr
;;;576    
                          ENDP

                  SPI_TransmitCRC PROC
;;;583    *******************************************************************************/
;;;584    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000238  8801              LDRH     r1,[r0,#0]
;;;585    {
;;;586      /* Check the parameters */
;;;587      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;588      
;;;589      /* Enable the selected SPI CRC transmission */
;;;590      SPIx->CR1 |= CR1_CRCNext_Set;
00023a  f4415180          ORR      r1,r1,#0x1000
00023e  8001              STRH     r1,[r0,#0]
;;;591    }
000240  4770              BX       lr
;;;592    
                          ENDP

                  SPI_CalculateCRC PROC
;;;602    *******************************************************************************/
;;;603    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000242  2900              CMP      r1,#0
;;;604    {
000244  d004              BEQ      |L1.592|
;;;605      /* Check the parameters */
;;;606      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;607      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;608    
;;;609      if (NewState != DISABLE)
;;;610      {
;;;611        /* Enable the selected SPI CRC calculation */
;;;612        SPIx->CR1 |= CR1_CRCEN_Set;
000246  8801              LDRH     r1,[r0,#0]
000248  f4415100          ORR      r1,r1,#0x2000
00024c  8001              STRH     r1,[r0,#0]
;;;613      }
;;;614      else
;;;615      {
;;;616        /* Disable the selected SPI CRC calculation */
;;;617        SPIx->CR1 &= CR1_CRCEN_Reset;
;;;618      }
;;;619    }
00024e  4770              BX       lr
                  |L1.592|
000250  8801              LDRH     r1,[r0,#0]            ;617
000252  f4215100          BIC      r1,r1,#0x2000         ;617
000256  8001              STRH     r1,[r0,#0]            ;617
000258  4770              BX       lr
;;;620    
                          ENDP

                  SPI_GetCRC PROC
;;;632    *******************************************************************************/
;;;633    u16 SPI_GetCRC(SPI_TypeDef* SPIx, u8 SPI_CRC)
00025a  2901              CMP      r1,#1
;;;634    {
00025c  d001              BEQ      |L1.610|
;;;635      u16 crcreg = 0;
;;;636    
;;;637      /* Check the parameters */
;;;638      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;639      assert_param(IS_SPI_CRC(SPI_CRC));
;;;640    
;;;641      if (SPI_CRC != SPI_CRC_Rx)
;;;642      {
;;;643        /* Get the Tx CRC register */
;;;644        crcreg = SPIx->TXCRCR;
00025e  8b00              LDRH     r0,[r0,#0x18]
;;;645      }
;;;646      else
;;;647      {
;;;648        /* Get the Rx CRC register */
;;;649        crcreg = SPIx->RXCRCR;
;;;650      }
;;;651    
;;;652      /* Return the selected CRC register */
;;;653      return crcreg;
;;;654    }
000260  4770              BX       lr
                  |L1.610|
000262  8a80              LDRH     r0,[r0,#0x14]         ;649
000264  4770              BX       lr
;;;655    
                          ENDP

                  SPI_GetCRCPolynomial PROC
;;;662    *******************************************************************************/
;;;663    u16 SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000266  8a00              LDRH     r0,[r0,#0x10]
;;;664    {
;;;665      /* Check the parameters */
;;;666      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;667      
;;;668      /* Return the CRC polynomial register */
;;;669      return SPIx->CRCPR;
;;;670    }
000268  4770              BX       lr
;;;671    
                          ENDP

                  SPI_BiDirectionalLineConfig PROC
;;;684    *******************************************************************************/
;;;685    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, u16 SPI_Direction)
00026a  f5b14f80          CMP      r1,#0x4000
;;;686    {
00026e  d004              BEQ      |L1.634|
;;;687      /* Check the parameters */
;;;688      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;689      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;690    
;;;691      if (SPI_Direction == SPI_Direction_Tx)
;;;692      {
;;;693        /* Set the Tx only mode */
;;;694        SPIx->CR1 |= SPI_Direction_Tx;
;;;695      }
;;;696      else
;;;697      {
;;;698        /* Set the Rx only mode */
;;;699        SPIx->CR1 &= SPI_Direction_Rx;
000270  8801              LDRH     r1,[r0,#0]
000272  f4214180          BIC      r1,r1,#0x4000
000276  8001              STRH     r1,[r0,#0]
;;;700      }
;;;701    }
000278  4770              BX       lr
                  |L1.634|
00027a  8801              LDRH     r1,[r0,#0]            ;694
00027c  f4414180          ORR      r1,r1,#0x4000         ;694
000280  8001              STRH     r1,[r0,#0]            ;694
000282  4770              BX       lr
;;;702    
                          ENDP

                  SPI_I2S_GetFlagStatus PROC
;;;721    *******************************************************************************/
;;;722    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000284  4602              MOV      r2,r0
;;;723    {
;;;724      FlagStatus bitstatus = RESET;
000286  2000              MOVS     r0,#0
;;;725    
;;;726      /* Check the parameters */
;;;727      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;728      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;729    
;;;730      /* Check the status of the specified SPI/I2S flag */
;;;731      if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
000288  8912              LDRH     r2,[r2,#8]
00028a  420a              TST      r2,r1
00028c  d000              BEQ      |L1.656|
;;;732      {
;;;733        /* SPI_I2S_FLAG is set */
;;;734        bitstatus = SET;
00028e  2001              MOVS     r0,#1
                  |L1.656|
;;;735      }
;;;736      else
;;;737      {
;;;738        /* SPI_I2S_FLAG is reset */
;;;739        bitstatus = RESET;
;;;740      }
;;;741      /* Return the SPI_I2S_FLAG status */
;;;742      return  bitstatus;
;;;743    }
000290  4770              BX       lr
;;;744    
                          ENDP

                  SPI_I2S_ClearFlag PROC
;;;761    *******************************************************************************/
;;;762    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000292  2920              CMP      r1,#0x20
;;;763    {
000294  d006              BEQ      |L1.676|
;;;764      /* Check the parameters */
;;;765      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;766      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;767        
;;;768      /* SPI_FLAG_MODF flag clear */
;;;769      if(SPI_I2S_FLAG == SPI_FLAG_MODF)
;;;770      {
;;;771        /* Read SR register */
;;;772        (void)SPIx->SR;
;;;773        
;;;774        /* Write on CR1 register */
;;;775        SPIx->CR1 |= CR1_SPE_Set; 
;;;776      }
;;;777      /* SPI_I2S_FLAG_OVR flag or I2S_FLAG_UDR flag clear */
;;;778      else if ((SPI_I2S_FLAG == SPI_I2S_FLAG_OVR) || (SPI_I2S_FLAG == I2S_FLAG_UDR))  
000296  2940              CMP      r1,#0x40
000298  d00a              BEQ      |L1.688|
00029a  2908              CMP      r1,#8
00029c  d008              BEQ      |L1.688|
;;;779      {
;;;780        /* Read SR register  (Before clearing OVR flag, it is mandatory to read 
;;;781           SPI_I2S_DR register)*/
;;;782        (void)SPIx->SR;
;;;783      }
;;;784      else /* SPI_FLAG_CRCERR flag clear */
;;;785      {
;;;786        /* Clear the selected SPI flag */
;;;787        SPIx->SR = (u16)~SPI_I2S_FLAG;
00029e  43c9              MVNS     r1,r1
0002a0  8101              STRH     r1,[r0,#8]
;;;788      }
;;;789    }
0002a2  4770              BX       lr
                  |L1.676|
0002a4  8901              LDRH     r1,[r0,#8]            ;772
0002a6  8801              LDRH     r1,[r0,#0]            ;775
0002a8  f0410140          ORR      r1,r1,#0x40           ;775
0002ac  8001              STRH     r1,[r0,#0]            ;775
0002ae  4770              BX       lr
                  |L1.688|
0002b0  8900              LDRH     r0,[r0,#8]            ;782
0002b2  4770              BX       lr
;;;790    
                          ENDP

                  SPI_I2S_GetITStatus PROC
;;;807    *******************************************************************************/
;;;808    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
0002b4  2200              MOVS     r2,#0
;;;809    {
;;;810      ITStatus bitstatus = RESET;
;;;811      u16 itpos = 0, itmask = 0, enablestatus = 0;
;;;812    
;;;813      /* Check the parameters */
;;;814      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;815      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;816    
;;;817      /* Get the SPI/I2S IT index */
;;;818      itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
0002b6  f001030f          AND      r3,r1,#0xf
0002ba  f04f0c01          MOV      r12,#1
0002be  fa0cf303          LSL      r3,r12,r3
0002c2  b29b              UXTH     r3,r3
;;;819    
;;;820      /* Get the SPI/I2S IT mask */
;;;821      itmask = SPI_I2S_IT >> 4;
0002c4  0909              LSRS     r1,r1,#4
;;;822      /* Set the IT mask */
;;;823      itmask = (u16)((u16)0x01 << itmask);
0002c6  fa0cf101          LSL      r1,r12,r1
0002ca  b289              UXTH     r1,r1
;;;824      /* Get the SPI_I2S_IT enable bit status */
;;;825      enablestatus = (SPIx->CR2 & itmask) ;
0002cc  f8b0c004          LDRH     r12,[r0,#4]
0002d0  ea0c0101          AND      r1,r12,r1
;;;826    
;;;827      /* Check the status of the specified SPI/I2S interrupt */
;;;828      if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
0002d4  8900              LDRH     r0,[r0,#8]
0002d6  4218              TST      r0,r3
0002d8  d001              BEQ      |L1.734|
0002da  b101              CBZ      r1,|L1.734|
;;;829      {
;;;830        /* SPI_I2S_IT is set */
;;;831        bitstatus = SET;
0002dc  2201              MOVS     r2,#1
                  |L1.734|
;;;832      }
;;;833      else
;;;834      {
;;;835        /* SPI_I2S_IT is reset */
;;;836        bitstatus = RESET;
;;;837      }
;;;838      /* Return the SPI_I2S_IT status */
;;;839      return bitstatus;
0002de  4610              MOV      r0,r2
;;;840    }
0002e0  4770              BX       lr
;;;841    
                          ENDP

                  SPI_I2S_ClearITPendingBit PROC
;;;856    *******************************************************************************/
;;;857    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
0002e2  2955              CMP      r1,#0x55
;;;858    {
0002e4  d00b              BEQ      |L1.766|
;;;859      u16 itpos = 0;
;;;860    
;;;861      /* Check the parameters */
;;;862      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;863      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;864    
;;;865      /* SPI_IT_MODF pending bit clear */
;;;866      if(SPI_I2S_IT == SPI_IT_MODF)
;;;867      {
;;;868        /* Read SR register */
;;;869        (void)SPIx->SR;
;;;870        /* Write on CR1 register */
;;;871        SPIx->CR1 |= CR1_SPE_Set; 
;;;872      }
;;;873      /* SPI_I2S_IT_OVR or I2S_IT_UDR pending bit clear */ 
;;;874      else if((SPI_I2S_IT == SPI_I2S_IT_OVR) || (SPI_I2S_IT == I2S_IT_UDR))    
0002e6  2956              CMP      r1,#0x56
0002e8  d00f              BEQ      |L1.778|
0002ea  2953              CMP      r1,#0x53
0002ec  d00d              BEQ      |L1.778|
;;;875      {
;;;876        /* Read SR register */
;;;877        (void)(SPIx->SR);
;;;878      }  
;;;879      else   /* SPI_IT_CRCERR pending bit clear */
;;;880      {
;;;881        /* Get the SPI/I2S IT index */
;;;882        itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
0002ee  f001010f          AND      r1,r1,#0xf
0002f2  2201              MOVS     r2,#1
0002f4  fa02f101          LSL      r1,r2,r1
;;;883        /* Clear the selected SPI/I2S interrupt pending bits */
;;;884        SPIx->SR = (u16)~itpos;
0002f8  43c9              MVNS     r1,r1
0002fa  8101              STRH     r1,[r0,#8]
;;;885      }
;;;886    }
0002fc  4770              BX       lr
                  |L1.766|
0002fe  8901              LDRH     r1,[r0,#8]            ;869
000300  8801              LDRH     r1,[r0,#0]            ;871
000302  f0410140          ORR      r1,r1,#0x40           ;871
000306  8001              STRH     r1,[r0,#0]            ;871
000308  4770              BX       lr
                  |L1.778|
00030a  8900              LDRH     r0,[r0,#8]            ;877
00030c  4770              BX       lr
;;;887    
                          ENDP

00030e  0000              DCW      0x0000
                  |L1.784|
                          DCD      0xcccccccd
